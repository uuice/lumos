{
  "posts": [
    {
      "id": "1ef3b59b-0a4e-6760-9d78-69ba27cbd20e",
      "title": "通过takeUntil取消订阅可观察对象",
      "alias": null,
      "cover": null,
      "created_time": "2023-03-01T10:46:32.000Z",
      "date": "2023-03-01T10:46:32.000Z",
      "updated_time": "2023-03-01T10:46:32.000Z",
      "updated": "2023-03-01T10:46:32.000Z",
      "categories": [
        "javascript"
      ],
      "tags": [
        "Rxjs",
        "Angular"
      ],
      "excerpt": "Angular 中的单例 Service通过@NgModule()装饰器来声明一个service时， 会与整个应用的生命周期保持一致， 属于单利service （单例模式）。Angular 中的非单例 Service通过@Component()装饰器来声明一个service时，会成为一个非单例的se",
      "published": true,
      "content": "<h3 id=\"toc-133f92\">Angular 中的单例 Service / Angular singleton Service</h3>\n<p>通过<code>@NgModule()</code>装饰器来声明一个service时， 会与整个应用的生命周期保持一致， 属于单例service （单例模式）。</p>\n<!-- more -->\n\n<h3 id=\"toc-348874\">Angular 中的非单例 Service / Non-singleton Service in Angular</h3>\n<p>通过<code>@Component()</code>装饰器来声明一个service时，会成为一个非单例的service， 生命周期与component 一致， 当Angular销毁组件实例时，Angular将同时销毁与之绑定的service实例。</p>\n<p>非单例service 拥有ngOnDestroy()生命周期， 因此可以通过创建一个非单例的service来取消订阅可观察对象。</p>\n<h3 id=\"toc-51894b\">创建DestroyService / Create DestroyService</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span>, <span class=\"hljs-title class_\">OnDestroy</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Subject</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;rxjs&#x27;</span>;\n\n@<span class=\"hljs-title class_\">Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DestroyService</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Subject</span>&lt;<span class=\"hljs-keyword\">void</span>&gt; implements <span class=\"hljs-title class_\">OnDestroy</span> {\n  <span class=\"hljs-title function_\">ngOnDestroy</span>(): <span class=\"hljs-keyword\">void</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">next</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">complete</span>();\n  }\n}\n</code></pre>\n<h3 id=\"toc-8cb489\">使用方法 / How to use</h3>\n<pre><code class=\"hljs lang-javascript\">@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title class_\">DestroyService</span>]\n})\n\n<span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"> private destroy$: DestroyService </span>) {}\n\nsome$.<span class=\"hljs-title function_\">pipe</span>( <span class=\"hljs-title function_\">takeUntil</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">destroy$</span>)).<span class=\"hljs-title function_\">subscribe</span>(...)\n</code></pre>\n<h3 id=\"toc-1f84c1\">可能的问题 / Memory Leaks</h3>\n<p>当有多个操作符时，应该始终保证takeUntil是序列中的最后一个操作符， 不然会有内存泄漏的可能。</p>\n<p>To avoid problems with memory leaks, the general rule is that takeUntil should be the last operator in the sequence</p>\n",
      "mdContent": "\n### Angular 中的单例 Service / Angular singleton Service\n\n通过`@NgModule()`装饰器来声明一个service时， 会与整个应用的生命周期保持一致， 属于单例service （单例模式）。\n\n<!-- more -->\n\n### Angular 中的非单例 Service / Non-singleton Service in Angular\n\n通过`@Component()`装饰器来声明一个service时，会成为一个非单例的service， 生命周期与component 一致， 当Angular销毁组件实例时，Angular将同时销毁与之绑定的service实例。\n\n非单例service 拥有ngOnDestroy()生命周期， 因此可以通过创建一个非单例的service来取消订阅可观察对象。\n\n### 创建DestroyService / Create DestroyService\n\n```javascript\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class DestroyService extends Subject<void> implements OnDestroy {\n  ngOnDestroy(): void {\n    this.next();\n    this.complete();\n  }\n}\n\n```\n\n### 使用方法 / How to use\n\n```javascript\n@Component({\n  providers: [DestroyService]\n})\n\nconstructor( private destroy$: DestroyService ) {}\n\nsome$.pipe( takeUntil(this.destroy$)).subscribe(...)\n```\n\n### 可能的问题 / Memory Leaks\n\n当有多个操作符时，应该始终保证takeUntil是序列中的最后一个操作符， 不然会有内存泄漏的可能。\n\nTo avoid problems with memory leaks, the general rule is that takeUntil should be the last operator in the sequence\n",
      "toc": "<ul>\n<li><a href=\"#toc-133f92\">Angular 中的单例 Service / Angular singleton Service</a></li>\n<li><a href=\"#toc-348874\">Angular 中的非单例 Service / Non-singleton Service in Angular</a></li>\n<li><a href=\"#toc-51894b\">创建DestroyService / Create DestroyService</a></li>\n<li><a href=\"#toc-8cb489\">使用方法 / How to use</a></li>\n<li><a href=\"#toc-1f84c1\">可能的问题 / Memory Leaks</a></li>\n</ul>\n",
      "created_timestamp": 1677667592000,
      "updated_timestamp": 1677667592000,
      "url": "tong-guo-takeuntil-qu-xiao-ding-yue-ke-guan-cha-dui-xiang",
      "symbolsCount": 919,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 1062,
      "readingTime": 6
    },
    {
      "id": "1ef3b5a2-b387-6370-adf2-057eb14ae353",
      "title": "将布尔表达式转成json格式",
      "alias": null,
      "cover": null,
      "created_time": "2022-11-18T17:53:10.000Z",
      "date": "2022-11-18T17:53:10.000Z",
      "updated_time": "2022-11-18T17:53:10.000Z",
      "updated": "2022-11-18T17:53:10.000Z",
      "categories": [
        "javascript"
      ],
      "tags": null,
      "excerpt": "简单的词法分析和推栈的应用",
      "published": true,
      "content": "<h3 id=\"toc-7c31fc\">完整代码</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">&#x27;(((((1 &amp; 2) | 3) &amp; 4 &amp; 5) | 6) &amp; 7) | 8&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> operate = [<span class=\"hljs-string\">&#x27;&amp;&#x27;</span>, <span class=\"hljs-string\">&#x27;|&#x27;</span>] <span class=\"hljs-comment\">// 操作符</span>\n<span class=\"hljs-keyword\">const</span> divide = [<span class=\"hljs-string\">&#x27;(&#x27;</span>, <span class=\"hljs-string\">&#x27;)&#x27;</span>] <span class=\"hljs-comment\">// 分隔符</span>\n\n<span class=\"hljs-comment\">// 字符串去除空格转数组 进行词法分析</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">translate</span>(<span class=\"hljs-params\">str</span>) {\n  <span class=\"hljs-keyword\">let</span> arr = str.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/ /gi</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>).<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">let</span> arrTranslate = []\n  arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">itm, idx</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (operate.<span class=\"hljs-title function_\">indexOf</span>(itm) &gt; -<span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-comment\">// 操作</span>\n      arrTranslate.<span class=\"hljs-title function_\">push</span>({\n        <span class=\"hljs-attr\">index</span>: idx,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;operate&#x27;</span>,\n        <span class=\"hljs-attr\">value</span>: itm,\n      })\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (divide.<span class=\"hljs-title function_\">indexOf</span>(itm) &gt; -<span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-comment\">// 括号分隔符</span>\n      arrTranslate.<span class=\"hljs-title function_\">push</span>({\n        <span class=\"hljs-attr\">index</span>: idx,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;divide&#x27;</span>,\n        <span class=\"hljs-attr\">value</span>: itm,\n      })\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 数字等符号</span>\n      arrTranslate.<span class=\"hljs-title function_\">push</span>({\n        <span class=\"hljs-attr\">index</span>: idx,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;token&#x27;</span>,\n        <span class=\"hljs-attr\">value</span>: itm,\n      })\n    }\n  })\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">getResultByStack</span>(arrTranslate)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getResultByStack</span>(<span class=\"hljs-params\">arrTranslate</span>) {\n  <span class=\"hljs-comment\">// 通过栈分组 先匹配第一个括号 作为第一层的逻辑</span>\n  <span class=\"hljs-keyword\">let</span> obj = {\n    <span class=\"hljs-attr\">operate</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n    <span class=\"hljs-attr\">tokenList</span>: [],\n    <span class=\"hljs-attr\">children</span>: [],\n  }\n  <span class=\"hljs-keyword\">let</span> stack = []\n  arrTranslate.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (item.<span class=\"hljs-property\">value</span> === <span class=\"hljs-string\">&#x27;(&#x27;</span>) {\n      stack.<span class=\"hljs-title function_\">push</span>(item)\n    }\n    <span class=\"hljs-keyword\">if</span> (item.<span class=\"hljs-property\">value</span> === <span class=\"hljs-string\">&#x27;)&#x27;</span>) {\n      stack.<span class=\"hljs-title function_\">push</span>(item)\n      <span class=\"hljs-comment\">// 判断当前分组是否完备 即 （）成对匹配</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">checkStack</span>(stack)) {\n        <span class=\"hljs-comment\">// 递归匹配子集</span>\n        <span class=\"hljs-keyword\">let</span> child = <span class=\"hljs-title function_\">getResultByStack</span>(stack.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>))\n        obj.<span class=\"hljs-property\">children</span>.<span class=\"hljs-title function_\">push</span>(child)\n        <span class=\"hljs-comment\">// 清空栈</span>\n        stack = []\n      }\n    }\n    <span class=\"hljs-keyword\">if</span> (item.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&#x27;operate&#x27;</span>) {\n      <span class=\"hljs-keyword\">if</span> (stack.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">// 如果栈为空 则为当前分组的 操作符</span>\n        obj.<span class=\"hljs-property\">operate</span> = item.<span class=\"hljs-property\">value</span>\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// 不为空则是子分组的 操作符</span>\n        stack.<span class=\"hljs-title function_\">push</span>(item)\n      }\n    }\n\n    <span class=\"hljs-keyword\">if</span> (item.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&#x27;token&#x27;</span>) {\n      <span class=\"hljs-keyword\">if</span> (stack.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">// 如果栈为空 则属于当前分组的 token 列表</span>\n        obj.<span class=\"hljs-property\">tokenList</span>.<span class=\"hljs-title function_\">push</span>(item)\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// 不为空则是子分组的 token 列表</span>\n        stack.<span class=\"hljs-title function_\">push</span>(item)\n      }\n    }\n  })\n  <span class=\"hljs-keyword\">return</span> obj\n}\n\n<span class=\"hljs-comment\">// 判断栈分组是否完备</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">checkStack</span>(<span class=\"hljs-params\">stack</span>) {\n  <span class=\"hljs-keyword\">let</span> leftCount = stack.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">itm</span>) =&gt;</span> itm.<span class=\"hljs-property\">value</span> === <span class=\"hljs-string\">&#x27;(&#x27;</span>).<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">let</span> rightCount = stack.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">itm</span>) =&gt;</span> itm.<span class=\"hljs-property\">value</span> === <span class=\"hljs-string\">&#x27;)&#x27;</span>).<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">return</span> leftCount === rightCount\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(<span class=\"hljs-title function_\">translate</span>(str)))\n</code></pre>\n<h3 id=\"toc-5ad7f5\">结果</h3>\n<pre><code class=\"hljs lang-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;operate&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;|&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;tokenList&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">24</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;8&quot;</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;children&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;operate&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&amp;&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;tokenList&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-punctuation\">{</span>\n          <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">21</span><span class=\"hljs-punctuation\">,</span>\n          <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n          <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;7&quot;</span>\n        <span class=\"hljs-punctuation\">}</span>\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;children&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-punctuation\">{</span>\n          <span class=\"hljs-attr\">&quot;operate&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;|&quot;</span><span class=\"hljs-punctuation\">,</span>\n          <span class=\"hljs-attr\">&quot;tokenList&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n            <span class=\"hljs-punctuation\">{</span>\n              <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">18</span><span class=\"hljs-punctuation\">,</span>\n              <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n              <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;6&quot;</span>\n            <span class=\"hljs-punctuation\">}</span>\n          <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n          <span class=\"hljs-attr\">&quot;children&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n            <span class=\"hljs-punctuation\">{</span>\n              <span class=\"hljs-attr\">&quot;operate&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&amp;&quot;</span><span class=\"hljs-punctuation\">,</span>\n              <span class=\"hljs-attr\">&quot;tokenList&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                <span class=\"hljs-punctuation\">{</span>\n                  <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">13</span><span class=\"hljs-punctuation\">,</span>\n                  <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n                  <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;4&quot;</span>\n                <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n                <span class=\"hljs-punctuation\">{</span>\n                  <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">15</span><span class=\"hljs-punctuation\">,</span>\n                  <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n                  <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;5&quot;</span>\n                <span class=\"hljs-punctuation\">}</span>\n              <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n              <span class=\"hljs-attr\">&quot;children&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                <span class=\"hljs-punctuation\">{</span>\n                  <span class=\"hljs-attr\">&quot;operate&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;|&quot;</span><span class=\"hljs-punctuation\">,</span>\n                  <span class=\"hljs-attr\">&quot;tokenList&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                    <span class=\"hljs-punctuation\">{</span>\n                      <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">10</span><span class=\"hljs-punctuation\">,</span>\n                      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n                      <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;3&quot;</span>\n                    <span class=\"hljs-punctuation\">}</span>\n                  <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n                  <span class=\"hljs-attr\">&quot;children&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                    <span class=\"hljs-punctuation\">{</span>\n                      <span class=\"hljs-attr\">&quot;operate&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&amp;&quot;</span><span class=\"hljs-punctuation\">,</span>\n                      <span class=\"hljs-attr\">&quot;tokenList&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                        <span class=\"hljs-punctuation\">{</span>\n                          <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">5</span><span class=\"hljs-punctuation\">,</span>\n                          <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n                          <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;1&quot;</span>\n                        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n                        <span class=\"hljs-punctuation\">{</span>\n                          <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">7</span><span class=\"hljs-punctuation\">,</span>\n                          <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;token&quot;</span><span class=\"hljs-punctuation\">,</span>\n                          <span class=\"hljs-attr\">&quot;value&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2&quot;</span>\n                        <span class=\"hljs-punctuation\">}</span>\n                      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n                      <span class=\"hljs-attr\">&quot;children&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\n                    <span class=\"hljs-punctuation\">}</span>\n                  <span class=\"hljs-punctuation\">]</span>\n                <span class=\"hljs-punctuation\">}</span>\n              <span class=\"hljs-punctuation\">]</span>\n            <span class=\"hljs-punctuation\">}</span>\n          <span class=\"hljs-punctuation\">]</span>\n        <span class=\"hljs-punctuation\">}</span>\n      <span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n",
      "mdContent": "\n### 完整代码\n\n```javascript\nconst str = '(((((1 & 2) | 3) & 4 & 5) | 6) & 7) | 8'\n\nconst operate = ['&', '|'] // 操作符\nconst divide = ['(', ')'] // 分隔符\n\n// 字符串去除空格转数组 进行词法分析\nfunction translate(str) {\n  let arr = str.replace(/ /gi, '').split('')\n  let arrTranslate = []\n  arr.forEach((itm, idx) => {\n    if (operate.indexOf(itm) > -1) {\n      // 操作\n      arrTranslate.push({\n        index: idx,\n        type: 'operate',\n        value: itm,\n      })\n    } else if (divide.indexOf(itm) > -1) {\n      // 括号分隔符\n      arrTranslate.push({\n        index: idx,\n        type: 'divide',\n        value: itm,\n      })\n    } else {\n      // 数字等符号\n      arrTranslate.push({\n        index: idx,\n        type: 'token',\n        value: itm,\n      })\n    }\n  })\n\n  return getResultByStack(arrTranslate)\n}\n\nfunction getResultByStack(arrTranslate) {\n  // 通过栈分组 先匹配第一个括号 作为第一层的逻辑\n  let obj = {\n    operate: '',\n    tokenList: [],\n    children: [],\n  }\n  let stack = []\n  arrTranslate.forEach((item) => {\n    if (item.value === '(') {\n      stack.push(item)\n    }\n    if (item.value === ')') {\n      stack.push(item)\n      // 判断当前分组是否完备 即 （）成对匹配\n      if (checkStack(stack)) {\n        // 递归匹配子集\n        let child = getResultByStack(stack.slice(1, -1))\n        obj.children.push(child)\n        // 清空栈\n        stack = []\n      }\n    }\n    if (item.type === 'operate') {\n      if (stack.length === 0) {\n        // 如果栈为空 则为当前分组的 操作符\n        obj.operate = item.value\n      } else {\n        // 不为空则是子分组的 操作符\n        stack.push(item)\n      }\n    }\n\n    if (item.type === 'token') {\n      if (stack.length === 0) {\n        // 如果栈为空 则属于当前分组的 token 列表\n        obj.tokenList.push(item)\n      } else {\n        // 不为空则是子分组的 token 列表\n        stack.push(item)\n      }\n    }\n  })\n  return obj\n}\n\n// 判断栈分组是否完备\nfunction checkStack(stack) {\n  let leftCount = stack.filter((itm) => itm.value === '(').length\n  let rightCount = stack.filter((itm) => itm.value === ')').length\n  return leftCount === rightCount\n}\n\nconsole.log(JSON.stringify(translate(str)))\n```\n\n### 结果\n\n```json\n{\n  \"operate\": \"|\",\n  \"tokenList\": [\n    {\n      \"index\": 24,\n      \"type\": \"token\",\n      \"value\": \"8\"\n    }\n  ],\n  \"children\": [\n    {\n      \"operate\": \"&\",\n      \"tokenList\": [\n        {\n          \"index\": 21,\n          \"type\": \"token\",\n          \"value\": \"7\"\n        }\n      ],\n      \"children\": [\n        {\n          \"operate\": \"|\",\n          \"tokenList\": [\n            {\n              \"index\": 18,\n              \"type\": \"token\",\n              \"value\": \"6\"\n            }\n          ],\n          \"children\": [\n            {\n              \"operate\": \"&\",\n              \"tokenList\": [\n                {\n                  \"index\": 13,\n                  \"type\": \"token\",\n                  \"value\": \"4\"\n                },\n                {\n                  \"index\": 15,\n                  \"type\": \"token\",\n                  \"value\": \"5\"\n                }\n              ],\n              \"children\": [\n                {\n                  \"operate\": \"|\",\n                  \"tokenList\": [\n                    {\n                      \"index\": 10,\n                      \"type\": \"token\",\n                      \"value\": \"3\"\n                    }\n                  ],\n                  \"children\": [\n                    {\n                      \"operate\": \"&\",\n                      \"tokenList\": [\n                        {\n                          \"index\": 5,\n                          \"type\": \"token\",\n                          \"value\": \"1\"\n                        },\n                        {\n                          \"index\": 7,\n                          \"type\": \"token\",\n                          \"value\": \"2\"\n                        }\n                      ],\n                      \"children\": []\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-7c31fc\">完整代码</a></li>\n<li><a href=\"#toc-5ad7f5\">结果</a></li>\n</ul>\n",
      "created_timestamp": 1668793990000,
      "updated_timestamp": 1668793990000,
      "url": "jiang-bu-er-biao-da-shi-zhuan-cheng-json-ge-shi",
      "symbolsCount": 1958,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 3857,
      "readingTime": 20
    },
    {
      "id": "1ef3b596-893a-6790-a593-1d07427d06eb",
      "title": "pnpm install报错",
      "alias": null,
      "cover": null,
      "created_time": "2022-08-26T10:30:22.000Z",
      "date": "2022-08-26T10:30:22.000Z",
      "updated_time": "2022-08-26T10:30:22.000Z",
      "updated": "2022-08-26T10:30:22.000Z",
      "categories": [
        "nodejs"
      ],
      "tags": [
        "pnpm"
      ],
      "excerpt": "在使用pnpm 安装依赖的时候有时候会出现lock文件损坏等情况解决方法安装重试失败， 可以先删除 pnpm本地store- 执行-  执行 rm -rf $(pnpm store path)-  重新安装目前个人碰到的几种失败情况， 都能解决， 以后碰到更多的情况再补充",
      "published": true,
      "content": "<p>在使用pnpm 安装依赖的时候有时候会出现lock文件损坏等情况</p>\n<p>解决方法</p>\n<p>pnpm install失败多次后， 可以删除 项目中的 <code>node_modules</code> 以及 <code>pnpm</code> 的本地store</p>\n<ul>\n<li>执行 <code>rm -rf node_modules</code></li>\n<li>执行 <code>rm -rf $(pnpm store path)</code></li>\n<li>重试 <code>pnpm install</code></li>\n</ul>\n<p>目前个人碰到的几种失败情况， 都能解决， 以后碰到更多的情况再补充</p>\n<!-- more -->\n",
      "mdContent": "\n在使用pnpm 安装依赖的时候有时候会出现lock文件损坏等情况\n\n解决方法\n\npnpm install失败多次后， 可以删除 项目中的 `node_modules` 以及 `pnpm` 的本地store\n\n- 执行 `rm -rf node_modules`\n- 执行 `rm -rf $(pnpm store path)`\n- 重试 `pnpm install`\n\n目前个人碰到的几种失败情况， 都能解决， 以后碰到更多的情况再补充\n\n<!-- more -->\n",
      "toc": "",
      "created_timestamp": 1661509822000,
      "updated_timestamp": 1661509822000,
      "url": "pnpm-install-bao-cuo",
      "symbolsCount": 185,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 222,
      "readingTime": 2
    },
    {
      "id": "1ef3b5ae-4c0c-69f0-aa92-08c2005ee788",
      "title": "Linux npm -g 全局安装的命令找不到",
      "alias": null,
      "cover": null,
      "created_time": "2022-08-26T10:19:04.000Z",
      "date": "2022-08-26T10:19:04.000Z",
      "updated_time": "2022-08-26T10:19:04.000Z",
      "updated": "2022-08-26T10:19:04.000Z",
      "categories": [
        "linux",
        "nodejs"
      ],
      "tags": null,
      "excerpt": "在Linux 上通过npm -g全局安装 pm2、yarn、pnpm 等命令找不到的解决方法修改 ~/.bash_profile vim ~/.bash_profile新增环境变量export PATH=$(npm prefix -g)/bin:$PATH在宝塔面板中export PATH=$PAT",
      "published": true,
      "content": "<p>在Linux 上通过<code>npm -g</code>全局安装 pm2、yarn、pnpm 等命令找不到的解决方法</p>\n<!-- more -->\n\n<h2 id=\"toc-58e525\">修改 ~/.bash_profile</h2>\n<pre><code class=\"hljs lang-bash\"> vim ~/.bash_profile\n</code></pre>\n<h2 id=\"toc-b6dff4\">新增环境变量</h2>\n<pre><code class=\"hljs lang-routeros\"><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">PATH</span>=$(npm<span class=\"hljs-built_in\"> prefix </span>-g)/bin:<span class=\"hljs-variable\">$PATH</span>\n</code></pre>\n<h3 id=\"toc-de21ab\">使用宝塔面板的服务器</h3>\n<pre><code class=\"hljs lang-elixir\">export <span class=\"hljs-title class_\">PATH</span>=<span class=\"hljs-variable\">$PATH</span><span class=\"hljs-symbol\">://usr/lib/node_modules/corepack/shims</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-variable\">$PATH</span>\nexport <span class=\"hljs-title class_\">PATH</span>=<span class=\"hljs-variable\">$(</span>npm prefix -g)/<span class=\"hljs-symbol\">bin:</span><span class=\"hljs-variable\">$PATH</span>\n</code></pre>\n<h2 id=\"toc-9a72cf\">生效</h2>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-built_in\">source</span> ~/.bash_profile\n</code></pre>\n",
      "mdContent": "\n在Linux 上通过`npm -g`全局安装 pm2、yarn、pnpm 等命令找不到的解决方法\n\n<!-- more -->\n\n## 修改 ~/.bash_profile\n\n```\n vim ~/.bash_profile\n```\n\n## 新增环境变量\n\n```\nexport PATH=$(npm prefix -g)/bin:$PATH\n```\n\n### 使用宝塔面板的服务器\n\n```\nexport PATH=$PATH://usr/lib/node_modules/corepack/shims:$PATH\nexport PATH=$(npm prefix -g)/bin:$PATH\n```\n\n## 生效\n\n```\nsource ~/.bash_profile\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-58e525\">修改 ~/.bash_profile</a></li>\n<li><a href=\"#toc-b6dff4\">新增环境变量</a><ul>\n<li><a href=\"#toc-de21ab\">使用宝塔面板的服务器</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-9a72cf\">生效</a></li>\n</ul>\n",
      "created_timestamp": 1661509144000,
      "updated_timestamp": 1661509144000,
      "url": "linux-npm-g-quan-ju-an-zhuang-de-ming-ling-zhao-bu-dao",
      "symbolsCount": 281,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 329,
      "readingTime": 2
    },
    {
      "id": "1ef3b5a7-26a0-61a0-aeca-5e11b525f15e",
      "title": "在Directive中获取组件DOM以及实例",
      "alias": null,
      "cover": null,
      "created_time": "2022-06-29T10:37:52.000Z",
      "date": "2022-06-29T10:37:52.000Z",
      "updated_time": "2022-06-29T10:37:52.000Z",
      "updated": "2022-06-29T10:37:52.000Z",
      "categories": [
        "angular"
      ],
      "tags": [
        "angular",
        "directive"
      ],
      "excerpt": "在Directive中获取组件DOM以及实例",
      "published": true,
      "content": "<h3 id=\"toc-291011\">获取DOM</h3>\n<p>从 <code>@angular/core</code> 导入 <code>ElementRef</code>。<code>ElementRef</code> 的 <code>nativeElement </code>属性会提供对宿主 DOM 元素的直接访问权限。</p>\n<!-- more -->\n\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Directive</span>, <span class=\"hljs-title class_\">ElementRef</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n\n@<span class=\"hljs-title class_\">Directive</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&#x27;[appTest]&#x27;</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestDirective</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    private el: ElementRef,\n  </span>) {\n    el.<span class=\"hljs-property\">nativeElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = <span class=\"hljs-string\">&#x27;yellow&#x27;</span>;\n  }\n}\n</code></pre>\n<h3 id=\"toc-fd30cc\">获取组件实例</h3>\n<blockquote>\n<p>组件已知的情况下，在自定义指令中获取组件实例</p>\n</blockquote>\n<p>直接在<code>constructor</code>中注入对应组件就可以</p>\n<p>如下面代码，通过 <code>this.com</code> 就可以调用组件的属性和事件</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Directive</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { comTest } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;comTest&#x27;</span>;\n@<span class=\"hljs-title class_\">Directive</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&#x27;[appTest]&#x27;</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestDirective</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    private com: comTest\n  </span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">com</span>)\n  }\n}\n</code></pre>\n",
      "mdContent": "\n### 获取DOM\n\n从 `@angular/core` 导入 `ElementRef`。`ElementRef` 的 `nativeElement `属性会提供对宿主 DOM 元素的直接访问权限。\n\n<!-- more -->\n\n```javascript\nimport { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appTest]'\n})\nexport class TestDirective {\n  constructor(\n    private el: ElementRef,\n  ) {\n    el.nativeElement.style.backgroundColor = 'yellow';\n  }\n}\n```\n\n### 获取组件实例\n\n> 组件已知的情况下，在自定义指令中获取组件实例\n\n直接在`constructor`中注入对应组件就可以\n\n如下面代码，通过 `this.com` 就可以调用组件的属性和事件\n\n```javascript\nimport { Directive } from '@angular/core';\nimport { comTest } from 'comTest';\n@Directive({\n  selector: '[appTest]'\n})\nexport class TestDirective {\n  constructor(\n    private com: comTest\n  ) {\n    console.log(this.com)\n  }\n}\n\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-291011\">获取DOM</a></li>\n<li><a href=\"#toc-fd30cc\">获取组件实例</a></li>\n</ul>\n",
      "created_timestamp": 1656499072000,
      "updated_timestamp": 1656499072000,
      "url": "zai-directive-zhong-huo-qu-zu-jian-dom-yi-ji-shi-li",
      "symbolsCount": 581,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 703,
      "readingTime": 4
    },
    {
      "id": "1ef3b5dd-e4d9-6b40-b309-a07bac6c751a",
      "title": "Yarn &amp;&amp; npm设置镜像源",
      "alias": null,
      "cover": null,
      "created_time": "2020-04-17T22:35:21.000Z",
      "date": "2020-04-17T22:35:21.000Z",
      "updated_time": "2020-04-17T22:35:21.000Z",
      "updated": "2020-04-17T22:35:21.000Z",
      "categories": [
        "nodejs"
      ],
      "tags": null,
      "excerpt": "安装yarnnpm i -g yarnyarnyarn config set registry https://registry.npm.taobao.org --global  &amp;&amp; \\yarn config set disturl https://npm.taobao.org/d",
      "published": true,
      "content": "<h3 id=\"toc-5a2a5b\">安装yarn</h3>\n<pre><code class=\"hljs lang-css\">npm <span class=\"hljs-selector-tag\">i</span> -<span class=\"hljs-selector-tag\">g</span> yarn\n</code></pre>\n<h3 id=\"yarn\">yarn</h3>\n<pre><code class=\"hljs lang-jboss-cli\">yarn config <span class=\"hljs-keyword\">set</span> registry https:<span class=\"hljs-string\">//registry.npm.taobao.org</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> disturl https:<span class=\"hljs-string\">//npm.taobao.org/dist</span> <span class=\"hljs-params\">--global</span> &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> sass_binary_site https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/node-sass</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> electron_mirror https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/electron/</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> puppeteer_download_host https:<span class=\"hljs-string\">//npm.taobao.org/mirrors</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> chromedriver_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/chromedriver</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> operadriver_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/operadriver</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> phantomjs_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/phantomjs</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> selenium_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/selenium</span> <span class=\"hljs-params\">--global</span>  &amp;&amp; \\\nyarn config <span class=\"hljs-keyword\">set</span> node_inspector_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/node-inspector</span> <span class=\"hljs-params\">--global</span>\n</code></pre>\n<h3 id=\"npm\">npm</h3>\n<pre><code class=\"hljs lang-jboss-cli\">npm <span class=\"hljs-keyword\">set</span> registry https:<span class=\"hljs-string\">//registry.npm.taobao.org</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> disturl https:<span class=\"hljs-string\">//npm.taobao.org/dist</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> sass_binary_site https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/node-sass</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> electron_mirror https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/electron</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> puppeteer_download_host https:<span class=\"hljs-string\">//npm.taobao.org/mirrors</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> chromedriver_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/chromedriver</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> operadriver_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/operadriver</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> phantomjs_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/phantomjs</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> selenium_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/selenium</span> &amp;&amp; \\\nnpm <span class=\"hljs-keyword\">set</span> node_inspector_cdnurl https:<span class=\"hljs-string\">//npm.taobao.org/mirrors/node-inspector</span> &amp;&amp; \\\nnpm cache clean <span class=\"hljs-params\">--force</span>\n</code></pre>\n",
      "mdContent": "\n### 安装yarn\n\n    npm i -g yarn\n\n### yarn\n\n    yarn config set registry https://registry.npm.taobao.org --global  && \\\n    yarn config set disturl https://npm.taobao.org/dist --global && \\\n    yarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass --global  && \\\n    yarn config set electron_mirror https://npm.taobao.org/mirrors/electron/ --global  && \\\n    yarn config set puppeteer_download_host https://npm.taobao.org/mirrors --global  && \\\n    yarn config set chromedriver_cdnurl https://npm.taobao.org/mirrors/chromedriver --global  && \\\n    yarn config set operadriver_cdnurl https://npm.taobao.org/mirrors/operadriver --global  && \\\n    yarn config set phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs --global  && \\\n    yarn config set selenium_cdnurl https://npm.taobao.org/mirrors/selenium --global  && \\\n    yarn config set node_inspector_cdnurl https://npm.taobao.org/mirrors/node-inspector --global\n\n### npm\n\n    npm set registry https://registry.npm.taobao.org && \\\n    npm set disturl https://npm.taobao.org/dist && \\\n    npm set sass_binary_site https://npm.taobao.org/mirrors/node-sass && \\\n    npm set electron_mirror https://npm.taobao.org/mirrors/electron && \\\n    npm set puppeteer_download_host https://npm.taobao.org/mirrors && \\\n    npm set chromedriver_cdnurl https://npm.taobao.org/mirrors/chromedriver && \\\n    npm set operadriver_cdnurl https://npm.taobao.org/mirrors/operadriver && \\\n    npm set phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs && \\\n    npm set selenium_cdnurl https://npm.taobao.org/mirrors/selenium && \\\n    npm set node_inspector_cdnurl https://npm.taobao.org/mirrors/node-inspector && \\\n    npm cache clean --force\n",
      "toc": "<ul>\n<li><a href=\"#toc-5a2a5b\">安装yarn</a></li>\n<li><a href=\"#yarn\">yarn</a></li>\n<li><a href=\"#npm\">npm</a></li>\n</ul>\n",
      "created_timestamp": 1587162921000,
      "updated_timestamp": 1587162921000,
      "url": "yarn-ampamp-npm-she-zhi-jing-xiang-yuan",
      "symbolsCount": 1448,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 1702,
      "readingTime": 9
    },
    {
      "id": "1ef3b5e1-c89c-6410-866c-c03a58533afa",
      "title": "通过视频url，获取缩略图",
      "alias": null,
      "cover": null,
      "created_time": "2019-06-20T14:22:06.000Z",
      "date": "2019-06-20T14:22:06.000Z",
      "updated_time": "2019-06-20T14:22:06.000Z",
      "updated": "2019-06-20T14:22:06.000Z",
      "categories": [
        "canvas"
      ],
      "tags": null,
      "excerpt": "通过视频url，获取缩略图  getVideoImg (url) {      let _this = this      // 创建视频对象      let video = document.createElement(&#39;video&#39;)      video.src = url      video.",
      "published": true,
      "content": "<h3 id=\"toc-44405d\">通过视频url，获取缩略图</h3>\n<!-- more -->\n\n<pre><code class=\"hljs lang-javascript\">    <span class=\"hljs-title function_\">getVideoImg</span> (url) {\n      <span class=\"hljs-keyword\">let</span> _this = <span class=\"hljs-variable language_\">this</span>\n      <span class=\"hljs-comment\">// 创建视频对象</span>\n      <span class=\"hljs-keyword\">let</span> video = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;video&#x27;</span>)\n      video.<span class=\"hljs-property\">src</span> = url\n      video.<span class=\"hljs-property\">width</span> = <span class=\"hljs-number\">503</span>\n      video.<span class=\"hljs-property\">height</span> = <span class=\"hljs-number\">295</span>\n      video.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;crossOrigin&#x27;</span>, <span class=\"hljs-string\">&#x27;Anonymous&#x27;</span>)\n      video.<span class=\"hljs-property\">autoplay</span> = <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-comment\">// video.play() // 开始播放</span>\n      video.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;loadeddata&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n          <span class=\"hljs-keyword\">let</span> canvas = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>)\n          canvas.<span class=\"hljs-property\">width</span> = <span class=\"hljs-number\">503</span>\n          canvas.<span class=\"hljs-property\">height</span> = <span class=\"hljs-number\">503</span>\n          <span class=\"hljs-keyword\">let</span> ctx = canvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&#x27;2d&#x27;</span>)\n          <span class=\"hljs-keyword\">let</span> imgHeight = video.<span class=\"hljs-property\">videoHeight</span>\n          <span class=\"hljs-keyword\">let</span> imgWidth = video.<span class=\"hljs-property\">videoWidth</span>\n          <span class=\"hljs-comment\">// canvas.width = imgWidth</span>\n          <span class=\"hljs-comment\">// canvas.height = imgHeight</span>\n          ctx.<span class=\"hljs-title function_\">drawImage</span>(video, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, imgWidth, imgHeight, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, video.<span class=\"hljs-property\">width</span>, video.<span class=\"hljs-property\">width</span>)\n          <span class=\"hljs-keyword\">let</span> img = canvas.<span class=\"hljs-title function_\">toDataURL</span>(<span class=\"hljs-string\">&#x27;image/png&#x27;</span>)\n          <span class=\"hljs-comment\">// img 为图片信息</span>\n          _this.$set(_this.<span class=\"hljs-property\">imgList</span>, url, img)\n        }, <span class=\"hljs-number\">10</span>)\n      }, <span class=\"hljs-literal\">false</span>)\n    },\n</code></pre>\n",
      "mdContent": "\n### 通过视频url，获取缩略图\n\n<!-- more -->\n\n```javascript\n    getVideoImg (url) {\n      let _this = this\n      // 创建视频对象\n      let video = document.createElement('video')\n      video.src = url\n      video.width = 503\n      video.height = 295\n      video.setAttribute('crossOrigin', 'Anonymous')\n      video.autoplay = true\n      // video.play() // 开始播放\n      video.addEventListener('loadeddata', () => {\n        setTimeout(() => {\n          let canvas = document.createElement('canvas')\n          canvas.width = 503\n          canvas.height = 503\n          let ctx = canvas.getContext('2d')\n          let imgHeight = video.videoHeight\n          let imgWidth = video.videoWidth\n          // canvas.width = imgWidth\n          // canvas.height = imgHeight\n          ctx.drawImage(video, 0, 0, imgWidth, imgHeight, 0, 0, video.width, video.width)\n          let img = canvas.toDataURL('image/png')\n          // img 为图片信息\n          _this.$set(_this.imgList, url, img)\n        }, 10)\n      }, false)\n    },\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-44405d\">通过视频url，获取缩略图</a></li>\n</ul>\n",
      "created_timestamp": 1561040526000,
      "updated_timestamp": 1561040526000,
      "url": "tong-guo-shi-pin-url-huo-qu-suo-lve-tu",
      "symbolsCount": 671,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 981,
      "readingTime": 5
    },
    {
      "id": "1ef3b5e7-6a16-6cf0-bda8-629a71b2a5d5",
      "title": "“被污染”的 canvas",
      "alias": null,
      "cover": null,
      "created_time": "2018-04-18T21:23:37.000Z",
      "date": "2018-04-18T21:23:37.000Z",
      "updated_time": "2018-04-18T21:23:37.000Z",
      "updated": "2018-04-18T21:23:37.000Z",
      "categories": [
        "canvas"
      ],
      "tags": null,
      "excerpt": "什么是“被污染”的 canvas?尽管不通过 CORS 就可以在画布中使用图片，但是这会污染画布。一旦画布被污染，你就无法读取其数据。例如，你不能再使用画布的 toBlob(), toDataURL() 或 getImageData() 方法，调用它们会抛出安全错误。这种机制可以避免未经许可拉取远程",
      "published": true,
      "content": "<h3 id=\"toc-e5fb87\">什么是“被污染”的 canvas?</h3>\n<p>尽管不通过 CORS 就可以在画布中使用图片，但是这会污染画布。一旦画布被污染，你就无法读取其数据。例如，你不能再使用画布的 <code>toBlob()</code>, <code>toDataURL()</code> 或 <code>getImageData()</code> 方法，调用它们会抛出安全错误。</p>\n<p>这种机制可以避免未经许可拉取远程网站信息而导致的用户隐私泄露。</p>\n<!-- more -->\n\n<h3 id=\"toc-020feb\">如何在canvas中使用跨越图片</h3>\n<p>HTML 规范中图片有一个 crossorigin 属性，结合合适的 CORS 响应头，就可以实现在画布中使用跨域 元素的图像。</p>\n<p>设置 Access-Control-Allow-Origin 为 &quot;*&quot;</p>\n<h3 id=\"toc-f4e9b1\">例如通过url获取base64图片，代码如下</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-title function_\">getImgBase64</span> (path, callback) {\n    <span class=\"hljs-keyword\">let</span> img = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Image</span>()\n    img.<span class=\"hljs-property\">crossOrigin</span> = <span class=\"hljs-string\">&#x27;anonymous&#x27;</span>\n    img.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">let</span> canvas = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>)\n        <span class=\"hljs-keyword\">let</span> ctx = canvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&#x27;2d&#x27;</span>)\n        <span class=\"hljs-comment\">// 获取图片宽高</span>\n        <span class=\"hljs-keyword\">let</span> imgWidth = img.<span class=\"hljs-property\">width</span>\n        <span class=\"hljs-keyword\">let</span> imgHeight = img.<span class=\"hljs-property\">height</span>\n        <span class=\"hljs-comment\">// 设置画布宽高与图片宽高相同</span>\n        canvas.<span class=\"hljs-property\">width</span> = imgWidth\n        canvas.<span class=\"hljs-property\">height</span> = imgHeight\n        <span class=\"hljs-comment\">// 绘制图片</span>\n        ctx.<span class=\"hljs-title function_\">drawImage</span>(img, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, imgWidth, imgHeight)\n\n        <span class=\"hljs-comment\">// 图片展示的 data URI</span>\n        <span class=\"hljs-keyword\">let</span> dataUrl = canvas.<span class=\"hljs-title function_\">toDataURL</span>(<span class=\"hljs-string\">&#x27;image/jpeg&#x27;</span>)\n        <span class=\"hljs-title function_\">callback</span>(dataUrl)\n    }\n\n    img.<span class=\"hljs-property\">onerror</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    }\n    img.<span class=\"hljs-property\">src</span> = path\n}\n</code></pre>\n<p>回调处理</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-title function_\">getImgBase64</span>(imgUrl, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">base64</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(base64)\n})\n</code></pre>\n",
      "mdContent": "\n### 什么是“被污染”的 canvas?\n\n尽管不通过 CORS 就可以在画布中使用图片，但是这会污染画布。一旦画布被污染，你就无法读取其数据。例如，你不能再使用画布的 `toBlob()`, `toDataURL()` 或 `getImageData()` 方法，调用它们会抛出安全错误。\n\n这种机制可以避免未经许可拉取远程网站信息而导致的用户隐私泄露。\n\n<!-- more -->\n\n### 如何在canvas中使用跨越图片\n\nHTML 规范中图片有一个 crossorigin 属性，结合合适的 CORS 响应头，就可以实现在画布中使用跨域 元素的图像。\n\n设置 Access-Control-Allow-Origin 为 \"\\*\"\n\n### 例如通过url获取base64图片，代码如下\n\n```javascript\ngetImgBase64 (path, callback) {\n\tlet img = new Image()\n\timg.crossOrigin = 'anonymous'\n\timg.onload = function () {\n\t\tlet canvas = document.createElement('canvas')\n\t\tlet ctx = canvas.getContext('2d')\n\t\t// 获取图片宽高\n\t\tlet imgWidth = img.width\n\t\tlet imgHeight = img.height\n\t\t// 设置画布宽高与图片宽高相同\n\t\tcanvas.width = imgWidth\n\t\tcanvas.height = imgHeight\n\t\t// 绘制图片\n\t\tctx.drawImage(img, 0, 0, imgWidth, imgHeight)\n\n\t\t// 图片展示的 data URI\n\t\tlet dataUrl = canvas.toDataURL('image/jpeg')\n\t\tcallback(dataUrl)\n\t}\n\n\timg.onerror = function () {\n\t}\n\timg.src = path\n}\n```\n\n回调处理\n\n```javascript\ngetImgBase64(imgUrl, function (base64) {\n  console.log(base64)\n})\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-e5fb87\">什么是“被污染”的 canvas?</a></li>\n<li><a href=\"#toc-020feb\">如何在canvas中使用跨越图片</a></li>\n<li><a href=\"#toc-f4e9b1\">例如通过url获取base64图片，代码如下</a></li>\n</ul>\n",
      "created_timestamp": 1524086617000,
      "updated_timestamp": 1524086617000,
      "url": "bei-wu-ran-de-canvas",
      "symbolsCount": 830,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 987,
      "readingTime": 5
    },
    {
      "id": "1ef3b5b5-5f66-6ad0-9846-ac1b4e440327",
      "title": "koa2 + redis使用笔记",
      "alias": null,
      "cover": null,
      "created_time": "2018-04-18T21:23:14.000Z",
      "date": "2018-04-18T21:23:14.000Z",
      "updated_time": "2018-04-18T21:23:14.000Z",
      "updated": "2018-04-18T21:23:14.000Z",
      "categories": [
        "nodejs"
      ],
      "tags": null,
      "excerpt": "安装redisyum install redis启动服务systemctl start redis添加开机启动项systemctl enable redisredis配置修改配置文件 /etc/redis.conf注释掉 bind 127.0.0.1去掉#requirepass foobared的注",
      "published": true,
      "content": "<h3 id=\"toc-4f9b67\">安装redis</h3>\n<pre><code class=\"hljs lang-text\">yum install redis\n</code></pre>\n<h3 id=\"toc-33d81c\">启动服务</h3>\n<pre><code class=\"hljs lang-text\">systemctl start redis\n</code></pre>\n<h3 id=\"toc-83b1df\">添加开机启动项</h3>\n<pre><code class=\"hljs lang-bash\">systemctl <span class=\"hljs-built_in\">enable</span> redis\n</code></pre>\n<!-- more -->\n\n<h3 id=\"toc-a7948a\">redis配置</h3>\n<p>修改配置文件 /etc/redis.conf</p>\n<ul>\n<li>注释掉 bind 127.0.0.1</li>\n<li>去掉#requirepass foobared的注释并设置密码</li>\n</ul>\n<p>未完</p>\n",
      "mdContent": "\n### 安装redis\n\n```bash\nyum install redis\n```\n\n### 启动服务\n\n```bash\nsystemctl start redis\n```\n\n### 添加开机启动项\n\n```bash\nsystemctl enable redis\n```\n\n<!-- more -->\n\n### redis配置\n\n修改配置文件 /etc/redis.conf\n\n- 注释掉 bind 127.0.0.1\n- 去掉#requirepass foobared的注释并设置密码\n\n未完\n",
      "toc": "<ul>\n<li><a href=\"#toc-4f9b67\">安装redis</a></li>\n<li><a href=\"#toc-33d81c\">启动服务</a></li>\n<li><a href=\"#toc-83b1df\">添加开机启动项</a></li>\n<li><a href=\"#toc-a7948a\">redis配置</a></li>\n</ul>\n",
      "created_timestamp": 1524086594000,
      "updated_timestamp": 1524086594000,
      "url": "koa2-redis-shi-yong-bi-ji",
      "symbolsCount": 192,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 237,
      "readingTime": 2
    },
    {
      "id": "1ef3b5ed-f869-6b00-8f14-0e29fe3fa024",
      "title": "javascript观察者模式的简单实现",
      "alias": null,
      "cover": null,
      "created_time": "2018-03-14T15:15:33.000Z",
      "date": "2018-03-14T15:15:33.000Z",
      "updated_time": "2018-03-14T15:15:33.000Z",
      "updated": "2018-03-14T15:15:33.000Z",
      "categories": [
        "javascript"
      ],
      "tags": null,
      "excerpt": "观察者模式当一个对象的状态发生改变，所有依赖于它的对象都将得到通知，也叫做发布-订阅模式基本的代码框架function PubSub() {    this.handlers = {};}PubSub.prototype = {",
      "published": true,
      "content": "<h3 id=\"toc-ed69b1\">观察者模式</h3>\n<p>当一个对象的状态发生改变，所有依赖于它的对象都将得到通知，也叫做发布-订阅模式</p>\n<!-- more -->\n\n<h3 id=\"toc-8627bc\">基本的代码框架</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PubSub</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handlers</span> = {}\n}\n<span class=\"hljs-title class_\">PubSub</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = {\n  <span class=\"hljs-comment\">// 订阅事件</span>\n  <span class=\"hljs-attr\">on</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">eventType, handler</span>) {},\n  <span class=\"hljs-comment\">// 触发事件(发布事件)</span>\n  <span class=\"hljs-attr\">emit</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">eventType</span>) {},\n  <span class=\"hljs-comment\">// 删除订阅事件</span>\n  <span class=\"hljs-attr\">off</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">eventType, handler</span>) {},\n}\n</code></pre>\n<p><code>this.handlers</code>保存了所有的事件名称和对应的操作</p>\n<ul>\n<li>事件的绑定</li>\n</ul>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">//订阅事件</span>\n<span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-variable language_\">this</span>\n<span class=\"hljs-keyword\">if</span> (!(eventType <span class=\"hljs-keyword\">in</span> self.<span class=\"hljs-property\">handlers</span>)) {\n  self.<span class=\"hljs-property\">handlers</span>[eventType] = []\n}\nself.<span class=\"hljs-property\">handlers</span>[eventType].<span class=\"hljs-title function_\">push</span>(handler)\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>\n</code></pre>\n<p>在绑定事件的时候先判断，当前事件名称是否已存在，如果不存在则创建事件名称的数组，再将事件加入</p>\n<ul>\n<li>触发事件(发布事件)</li>\n</ul>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">// 触发事件(发布事件)</span>\n<span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-variable language_\">this</span>\n<span class=\"hljs-keyword\">var</span> handlerArgs = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">slice</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>, <span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; self.<span class=\"hljs-property\">handlers</span>[eventType].<span class=\"hljs-property\">length</span>; i++) {\n  self.<span class=\"hljs-property\">handlers</span>[eventType][i].<span class=\"hljs-title function_\">apply</span>(self, handlerArgs)\n}\n<span class=\"hljs-keyword\">return</span> self\n</code></pre>\n<p>触发事件时，通过通过事件名称获取绑定在这个事件名上的所有事件，循环调用事件</p>\n<ul>\n<li>事件删除</li>\n</ul>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">var</span> currentEvent = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handlers</span>[eventType]\n<span class=\"hljs-keyword\">var</span> len = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> (currentEvent) {\n  len = currentEvent.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = len - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n    <span class=\"hljs-keyword\">if</span> (currentEvent[i] === handler) {\n      currentEvent.<span class=\"hljs-title function_\">splice</span>(i, <span class=\"hljs-number\">1</span>)\n    }\n  }\n}\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>\n</code></pre>\n<blockquote>\n<p>上面的代码中最后都有一个return this;是为了实现方法的链式操作</p>\n</blockquote>\n<h3 id=\"toc-480c21\">实例</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">var</span> pubsub = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PubSub</span>()\n<span class=\"hljs-keyword\">var</span> callback = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data)\n}\n<span class=\"hljs-comment\">//订阅事件A</span>\npubsub\n  .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">1</span> + data)\n  })\n  .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">2</span> + data)\n  })\n  .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, callback)\n  .<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;我是参数&#x27;</span>)\n<span class=\"hljs-comment\">//控制台将输出</span>\n<span class=\"hljs-comment\">//1我是参数</span>\n<span class=\"hljs-comment\">//2我是参数</span>\n<span class=\"hljs-comment\">//我是参数</span>\n</code></pre>\n<h3 id=\"toc-a88cff\">完整的代码</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PubSub</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handlers</span> = {}\n}\n<span class=\"hljs-title class_\">PubSub</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = {\n  <span class=\"hljs-comment\">// 订阅事件</span>\n  <span class=\"hljs-attr\">on</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">eventType, handler</span>) {\n    <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-variable language_\">this</span>\n    <span class=\"hljs-keyword\">if</span> (!(eventType <span class=\"hljs-keyword\">in</span> self.<span class=\"hljs-property\">handlers</span>)) {\n      self.<span class=\"hljs-property\">handlers</span>[eventType] = []\n    }\n    self.<span class=\"hljs-property\">handlers</span>[eventType].<span class=\"hljs-title function_\">push</span>(handler)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>\n  },\n  <span class=\"hljs-comment\">// 触发事件(发布事件)</span>\n  <span class=\"hljs-attr\">emit</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">eventType</span>) {\n    <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-variable language_\">this</span>\n    <span class=\"hljs-keyword\">var</span> handlerArgs = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">slice</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>, <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; self.<span class=\"hljs-property\">handlers</span>[eventType].<span class=\"hljs-property\">length</span>; i++) {\n      self.<span class=\"hljs-property\">handlers</span>[eventType][i].<span class=\"hljs-title function_\">apply</span>(self, handlerArgs)\n    }\n    <span class=\"hljs-keyword\">return</span> self\n  },\n  <span class=\"hljs-comment\">// 删除订阅事件</span>\n  <span class=\"hljs-attr\">off</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">eventType, handler</span>) {\n    <span class=\"hljs-keyword\">var</span> currentEvent = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handlers</span>[eventType]\n    <span class=\"hljs-keyword\">var</span> len = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span> (currentEvent) {\n      len = currentEvent.<span class=\"hljs-property\">length</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = len - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n        <span class=\"hljs-keyword\">if</span> (currentEvent[i] === handler) {\n          currentEvent.<span class=\"hljs-title function_\">splice</span>(i, <span class=\"hljs-number\">1</span>)\n        }\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>\n  },\n}\n\n<span class=\"hljs-keyword\">var</span> pubsub = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PubSub</span>()\n<span class=\"hljs-keyword\">var</span> callback = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data)\n}\n<span class=\"hljs-comment\">//订阅事件A</span>\npubsub\n  .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">1</span> + data)\n  })\n  .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">2</span> + data)\n  })\n  .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, callback)\n  .<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;我是参数&#x27;</span>)\n</code></pre>\n",
      "mdContent": "\n### 观察者模式\n\n当一个对象的状态发生改变，所有依赖于它的对象都将得到通知，也叫做发布-订阅模式\n\n<!-- more -->\n\n### 基本的代码框架\n\n```javascript\nfunction PubSub() {\n  this.handlers = {}\n}\nPubSub.prototype = {\n  // 订阅事件\n  on: function (eventType, handler) {},\n  // 触发事件(发布事件)\n  emit: function (eventType) {},\n  // 删除订阅事件\n  off: function (eventType, handler) {},\n}\n```\n\n`this.handlers`保存了所有的事件名称和对应的操作\n\n- 事件的绑定\n\n```javascript\n//订阅事件\nvar self = this\nif (!(eventType in self.handlers)) {\n  self.handlers[eventType] = []\n}\nself.handlers[eventType].push(handler)\nreturn this\n```\n\n在绑定事件的时候先判断，当前事件名称是否已存在，如果不存在则创建事件名称的数组，再将事件加入\n\n- 触发事件(发布事件)\n\n```javascript\n// 触发事件(发布事件)\nvar self = this\nvar handlerArgs = Array.prototype.slice.call(arguments, 1)\nfor (var i = 0; i < self.handlers[eventType].length; i++) {\n  self.handlers[eventType][i].apply(self, handlerArgs)\n}\nreturn self\n```\n\n触发事件时，通过通过事件名称获取绑定在这个事件名上的所有事件，循环调用事件\n\n- 事件删除\n\n```javascript\nvar currentEvent = this.handlers[eventType]\nvar len = 0\nif (currentEvent) {\n  len = currentEvent.length\n  for (var i = len - 1; i >= 0; i--) {\n    if (currentEvent[i] === handler) {\n      currentEvent.splice(i, 1)\n    }\n  }\n}\nreturn this\n```\n\n> 上面的代码中最后都有一个return this;是为了实现方法的链式操作\n\n### 实例\n\n```javascript\nvar pubsub = new PubSub()\nvar callback = function (data) {\n  console.log(data)\n}\n//订阅事件A\npubsub\n  .on('A', function (data) {\n    console.log(1 + data)\n  })\n  .on('A', function (data) {\n    console.log(2 + data)\n  })\n  .on('A', callback)\n  .emit('A', '我是参数')\n//控制台将输出\n//1我是参数\n//2我是参数\n//我是参数\n```\n\n### 完整的代码\n\n```javascript\nfunction PubSub() {\n  this.handlers = {}\n}\nPubSub.prototype = {\n  // 订阅事件\n  on: function (eventType, handler) {\n    var self = this\n    if (!(eventType in self.handlers)) {\n      self.handlers[eventType] = []\n    }\n    self.handlers[eventType].push(handler)\n    return this\n  },\n  // 触发事件(发布事件)\n  emit: function (eventType) {\n    var self = this\n    var handlerArgs = Array.prototype.slice.call(arguments, 1)\n    for (var i = 0; i < self.handlers[eventType].length; i++) {\n      self.handlers[eventType][i].apply(self, handlerArgs)\n    }\n    return self\n  },\n  // 删除订阅事件\n  off: function (eventType, handler) {\n    var currentEvent = this.handlers[eventType]\n    var len = 0\n    if (currentEvent) {\n      len = currentEvent.length\n      for (var i = len - 1; i >= 0; i--) {\n        if (currentEvent[i] === handler) {\n          currentEvent.splice(i, 1)\n        }\n      }\n    }\n    return this\n  },\n}\n\nvar pubsub = new PubSub()\nvar callback = function (data) {\n  console.log(data)\n}\n//订阅事件A\npubsub\n  .on('A', function (data) {\n    console.log(1 + data)\n  })\n  .on('A', function (data) {\n    console.log(2 + data)\n  })\n  .on('A', callback)\n  .emit('A', '我是参数')\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-ed69b1\">观察者模式</a></li>\n<li><a href=\"#toc-8627bc\">基本的代码框架</a></li>\n<li><a href=\"#toc-480c21\">实例</a></li>\n<li><a href=\"#toc-a88cff\">完整的代码</a></li>\n</ul>\n",
      "created_timestamp": 1521040533000,
      "updated_timestamp": 1521040533000,
      "url": "javascript-guan-cha-zhe-mo-shi-de-jian-dan-shi-xian",
      "symbolsCount": 1578,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 2020,
      "readingTime": 11
    },
    {
      "id": "1ef3b5bb-0805-6d80-9432-553b597926f2",
      "title": "javascript 函数式编程之柯里化(currying)",
      "alias": null,
      "cover": null,
      "created_time": "2018-03-14T14:45:46.000Z",
      "date": "2018-03-14T14:45:46.000Z",
      "updated_time": "2018-03-14T14:45:46.000Z",
      "updated": "2018-03-14T14:45:46.000Z",
      "categories": [
        "javascript"
      ],
      "tags": null,
      "excerpt": null,
      "published": true,
      "content": "<h3 id=\"toc-b541c6\">什么是柯里化</h3>\n<p>函数柯里化（curry）的定义很简单：传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>\n<!-- more -->\n\n<h3 id=\"toc-e2fb44\">js中柯里化的基本实现</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">// 柯里化通用实现</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">currying</span>(<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">var</span> slice = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">slice</span>\n  <span class=\"hljs-keyword\">var</span> args = slice.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>, <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">var</span> innerArgs = slice.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>)\n    <span class=\"hljs-keyword\">var</span> finalArgs = args.<span class=\"hljs-title function_\">concat</span>(innerArgs)\n    <span class=\"hljs-keyword\">return</span> fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-literal\">null</span>, finalArgs)\n  }\n}\n</code></pre>\n<h3 id=\"toc-f50a54\">通过柯里化实现阶乘的函数</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">//乘积</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">tailFactorial</span>(<span class=\"hljs-params\">total, n</span>) {\n  <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> total\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">tailFactorial</span>(n * total, n - <span class=\"hljs-number\">1</span>)\n}\n<span class=\"hljs-keyword\">const</span> factorial = <span class=\"hljs-title function_\">currying</span>(tailFactorial, <span class=\"hljs-number\">1</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">factorial</span>(<span class=\"hljs-number\">5</span>)) <span class=\"hljs-comment\">//120</span>\n</code></pre>\n<p><code>tailFactorial</code>传入了两个参数，最后返回一个函数</p>\n<h3 id=\"toc-1b7d1d\">上面的柯里化函数只能调用一次，下面对他进行改造可以调用多次</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">currying2</span>(<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">var</span> _args = []\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">cb</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, _args)\n    }\n    <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">push</span>.<span class=\"hljs-title function_\">apply</span>(_args, <span class=\"hljs-variable language_\">arguments</span>)\n    <span class=\"hljs-keyword\">return</span> cb\n  }\n}\n</code></pre>\n<p>在这个函数中，我们定义了一个_args变量，用于记录多次调用的参数，当最后一次调用没有传入参数时才最后处理</p>\n<ul>\n<li>下面定义一个累加函数，在这个例子中我们可以看到柯里化的一个特性--延迟求值</li>\n</ul>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">//逐步求值 (延迟执行)</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>,\n    i,\n    len\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>, len = <span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span>; i &lt; len; i++) {\n    sum += <span class=\"hljs-variable language_\">arguments</span>[i]\n  }\n  <span class=\"hljs-keyword\">return</span> sum\n}\n<span class=\"hljs-keyword\">const</span> addCurry = <span class=\"hljs-title function_\">currying2</span>(add)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">addCurry</span>(<span class=\"hljs-number\">3</span>)(<span class=\"hljs-number\">3</span>)(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)())\n</code></pre>\n",
      "mdContent": "\n### 什么是柯里化\n\n函数柯里化（curry）的定义很简单：传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。\n\n<!-- more -->\n\n### js中柯里化的基本实现\n\n```javascript\n// 柯里化通用实现\nfunction currying(fn) {\n  var slice = Array.prototype.slice\n  var args = slice.call(arguments, 1)\n  return function () {\n    var innerArgs = slice.call(arguments)\n    var finalArgs = args.concat(innerArgs)\n    return fn.apply(null, finalArgs)\n  }\n}\n```\n\n### 通过柯里化实现阶乘的函数\n\n```javascript\n//乘积\nfunction tailFactorial(total, n) {\n  if (n == 1) return total\n  return tailFactorial(n * total, n - 1)\n}\nconst factorial = currying(tailFactorial, 1)\nconsole.log(factorial(5)) //120\n```\n\n`tailFactorial`传入了两个参数，最后返回一个函数\n\n### 上面的柯里化函数只能调用一次，下面对他进行改造可以调用多次\n\n```javascript\nfunction currying2(fn) {\n  var _args = []\n  return function cb() {\n    if (arguments.length === 0) {\n      return fn.apply(this, _args)\n    }\n    Array.prototype.push.apply(_args, arguments)\n    return cb\n  }\n}\n```\n\n在这个函数中，我们定义了一个\\_args变量，用于记录多次调用的参数，当最后一次调用没有传入参数时才最后处理\n\n- 下面定义一个累加函数，在这个例子中我们可以看到柯里化的一个特性--延迟求值\n\n```javascript\n//逐步求值 (延迟执行)\nfunction add() {\n  var sum = 0,\n    i,\n    len\n  for (i = 0, len = arguments.length; i < len; i++) {\n    sum += arguments[i]\n  }\n  return sum\n}\nconst addCurry = currying2(add)\nconsole.log(addCurry(3)(3)(2)(1, 1, 1)())\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-b541c6\">什么是柯里化</a></li>\n<li><a href=\"#toc-e2fb44\">js中柯里化的基本实现</a></li>\n<li><a href=\"#toc-f50a54\">通过柯里化实现阶乘的函数</a></li>\n<li><a href=\"#toc-1b7d1d\">上面的柯里化函数只能调用一次，下面对他进行改造可以调用多次</a></li>\n</ul>\n",
      "created_timestamp": 1521038746000,
      "updated_timestamp": 1521038746000,
      "url": "javascript-han-shu-shi-bian-cheng-zhi-ke-li-hua-currying",
      "symbolsCount": 1006,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 1233,
      "readingTime": 7
    },
    {
      "id": "1ef3b5cb-5325-6760-803d-418bab754735",
      "title": "HTML5 Canvas手机九宫格手势密码解锁 ，支持N*N个点",
      "alias": null,
      "cover": null,
      "created_time": "2018-03-10T11:22:03.000Z",
      "date": "2018-03-10T11:22:03.000Z",
      "updated_time": "2018-03-10T11:22:03.000Z",
      "updated": "2018-03-10T11:22:03.000Z",
      "categories": [
        "canvas"
      ],
      "tags": null,
      "excerpt": "对于canvas不熟悉的可以查看 MDN 上的canvas教程在开始之前，先介绍一个数学知识，怎么判断一个点是否在圆内通过判断一个点到圆心的距离是否大于半径。例如：半径是R  如O(x,y)点圆心，任意一点P（x1,y1） （x-x1）*(x-x1)+(y-y1)*(y-y1)&gt;R*R 那么在",
      "published": true,
      "content": "<blockquote>\n<p>对于canvas不熟悉的可以查看 MDN 上的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial\" target=\"_blank\">canvas教程</a></p>\n</blockquote>\n<p>在开始之前，先介绍一个数学知识，怎么判断一个点是否在圆内\n通过判断一个点到圆心的距离是否大于半径。\n例如：半径是R 如O(x,y)点圆心，任意一点P（x1,y1） <code>（x-x1）*(x-x1)+(y-y1)*(y-y1)&gt;R*R</code> 那么在圆外 反之在圆内</p>\n<!-- more -->\n\n<h3 id=\"toc-e6969a\">准备及布局设置</h3>\n<p>本例引入了jQuery，写成了jQuery插件的形式，真实使用的时候，可以去掉jQuery，用原生的js写。</p>\n<p>jQuery插件的写法</p>\n<pre><code class=\"hljs lang-javascript\">;(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) {\n  $.fn.<span class=\"hljs-property\">locked</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">settings</span>) {\n    settings = $.<span class=\"hljs-title function_\">extend</span>({}, defaultSettings, settings)\n  }\n})(jQuery)\n\n$(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  $(<span class=\"hljs-string\">&#x27;#canvas&#x27;</span>).<span class=\"hljs-title function_\">locked</span>({\n    <span class=\"hljs-attr\">n</span>: <span class=\"hljs-number\">4</span>,\n  })\n})\n</code></pre>\n<p>默认配置\njQuery插件调用时传入的配置会覆盖defaultSettings\n其中<code>document.body.offsetWidth</code>获取的是网页可见区域宽，没特殊需要可以不改</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">//两个变量记录，所有的点以及选中的点</span>\n<span class=\"hljs-keyword\">var</span> pointArr = [] <span class=\"hljs-comment\">//点数组</span>\n<span class=\"hljs-keyword\">var</span> pointActiveArr = [] <span class=\"hljs-comment\">//已激活点数组</span>\n\n<span class=\"hljs-comment\">//默认配置</span>\n<span class=\"hljs-keyword\">var</span> defaultSettings = {\n  <span class=\"hljs-attr\">r</span>: <span class=\"hljs-number\">25</span>, <span class=\"hljs-comment\">//大圆半径</span>\n  <span class=\"hljs-attr\">sr</span>: <span class=\"hljs-number\">8</span>, <span class=\"hljs-comment\">//小圆半径，小圆既选中状态，内部的小圆</span>\n  <span class=\"hljs-attr\">w</span>: <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">offsetWidth</span>, <span class=\"hljs-comment\">//canvas宽度</span>\n  <span class=\"hljs-attr\">h</span>: <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">offsetWidth</span>, <span class=\"hljs-comment\">//canvas高度</span>\n  <span class=\"hljs-attr\">n</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-comment\">//数量n*n</span>\n  <span class=\"hljs-attr\">pointColor</span>: <span class=\"hljs-string\">&#x27;#ff0000&#x27;</span>, <span class=\"hljs-comment\">//选中状态点线颜色</span>\n  <span class=\"hljs-attr\">pointDefault</span>: <span class=\"hljs-string\">&#x27;#686868&#x27;</span>, <span class=\"hljs-comment\">//默认点颜色</span>\n}\n</code></pre>\n<p>获取到canvas对象，并根据设备<code>dpi</code>对settings配置进行修改</p>\n<blockquote>\n<p>根据<code>dpi</code>处理，主要是为了防止手机端访问的时候，canvas变模糊</p>\n</blockquote>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">var</span> canvas = $(<span class=\"hljs-variable language_\">this</span>)[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">//jQuery对象转成js对象</span>\n<span class=\"hljs-keyword\">var</span> ctx = canvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&#x27;2d&#x27;</span>)\n\n<span class=\"hljs-comment\">//防止手机端canvas模糊，计算dpi</span>\n<span class=\"hljs-keyword\">var</span> dpi = <span class=\"hljs-title function_\">getPixelRatio</span>(ctx)\nsettings.<span class=\"hljs-property\">r</span> *= dpi\nsettings.<span class=\"hljs-property\">sr</span> *= dpi\nsettings.<span class=\"hljs-property\">w</span> *= dpi\nsettings.<span class=\"hljs-property\">h</span> *= dpi\n\n<span class=\"hljs-comment\">//设置canvas宽度高度</span>\ncanvas.<span class=\"hljs-property\">width</span> = settings.<span class=\"hljs-property\">w</span>\ncanvas.<span class=\"hljs-property\">height</span> = settings.<span class=\"hljs-property\">h</span>\n</code></pre>\n<p>获取<code>dpi</code>的方式</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">//获取dpi</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getPixelRatio</span>(<span class=\"hljs-params\">context</span>) {\n  <span class=\"hljs-keyword\">var</span> backingStore =\n    context.<span class=\"hljs-property\">backingStorePixelRatio</span> ||\n    context.<span class=\"hljs-property\">webkitBackingStorePixelRatio</span> ||\n    context.<span class=\"hljs-property\">mozBackingStorePixelRatio</span> ||\n    context.<span class=\"hljs-property\">msBackingStorePixelRatio</span> ||\n    context.<span class=\"hljs-property\">oBackingStorePixelRatio</span> ||\n    context.<span class=\"hljs-property\">backingStorePixelRatio</span> ||\n    <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">devicePixelRatio</span> || <span class=\"hljs-number\">1</span>) / backingStore\n}\n</code></pre>\n<p>创建N*N个点并将x,y点的坐标记录到pointArr数组中，点的位置根据canvas宽高平均分配</p>\n<pre><code class=\"hljs lang-javascript\">pointArr = <span class=\"hljs-title function_\">creatPoint</span>()\n\n<span class=\"hljs-comment\">//创建n*n个点</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">creatPoint</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">var</span> points = []\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> row = <span class=\"hljs-number\">0</span>; row &lt; settings.<span class=\"hljs-property\">n</span>; row++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> col = <span class=\"hljs-number\">0</span>; col &lt; settings.<span class=\"hljs-property\">n</span>; col++) {\n      points.<span class=\"hljs-title function_\">push</span>({\n        <span class=\"hljs-attr\">x</span>: (settings.<span class=\"hljs-property\">w</span> / (settings.<span class=\"hljs-property\">n</span> + <span class=\"hljs-number\">1</span>)) * (col + <span class=\"hljs-number\">1</span>),\n        <span class=\"hljs-attr\">y</span>: (settings.<span class=\"hljs-property\">h</span> / (settings.<span class=\"hljs-property\">n</span> + <span class=\"hljs-number\">1</span>)) * (row + <span class=\"hljs-number\">1</span>),\n      })\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> points\n}\n</code></pre>\n<p>添加事件监听</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">//事件监听</span>\ncanvas.<span class=\"hljs-title function_\">addEventListener</span>(\n  <span class=\"hljs-string\">&#x27;touchstart&#x27;</span>,\n  <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) {\n    <span class=\"hljs-title function_\">touch</span>(e)\n  },\n  <span class=\"hljs-literal\">false</span>\n)\ncanvas.<span class=\"hljs-title function_\">addEventListener</span>(\n  <span class=\"hljs-string\">&#x27;touchmove&#x27;</span>,\n  <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) {\n    <span class=\"hljs-title function_\">touch</span>(e)\n  },\n  <span class=\"hljs-literal\">false</span>\n)\ncanvas.<span class=\"hljs-title function_\">addEventListener</span>(\n  <span class=\"hljs-string\">&#x27;touchend&#x27;</span>,\n  <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) {\n    <span class=\"hljs-title function_\">touch</span>(e)\n  },\n  <span class=\"hljs-literal\">false</span>\n)\n</code></pre>\n<p>touch函数统一处理滑动事件</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">//事件监听处理</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">touch</span>(<span class=\"hljs-params\">e</span>) {\n  <span class=\"hljs-keyword\">var</span> e = e || <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">event</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">type</span>)\n  <span class=\"hljs-keyword\">switch</span> (e.<span class=\"hljs-property\">type</span>) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;touchstart&#x27;</span>:\n      <span class=\"hljs-title function_\">isSelect</span>(e.<span class=\"hljs-property\">touches</span>[<span class=\"hljs-number\">0</span>])\n      <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;touchend&#x27;</span>:\n      <span class=\"hljs-title function_\">draw</span>()\n      <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;密码结果是：&#x27;</span> + pointActiveArr.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;-&#x27;</span>))\n      pointActiveArr = []\n      <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;touchmove&#x27;</span>:\n      <span class=\"hljs-title function_\">isSelect</span>(e.<span class=\"hljs-property\">touches</span>[<span class=\"hljs-number\">0</span>])\n      <span class=\"hljs-title function_\">draw</span>(e.<span class=\"hljs-property\">touches</span>[<span class=\"hljs-number\">0</span>])\n      e.<span class=\"hljs-title function_\">preventDefault</span>()\n      <span class=\"hljs-keyword\">break</span>\n  }\n}\n</code></pre>\n<p>滑动开始和滑动过程中通过isSelect判断当前的点是否进入了某个圆内，如果进入了某个圆且这个点没有添加到pointActiveArr数组中，则添加。</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">//判断是否在圆内</span>\n<span class=\"hljs-comment\">//通过数学计算来判断</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isSelect</span>(<span class=\"hljs-params\">touche</span>) {\n  <span class=\"hljs-comment\">//遍历所有点，查看当前位置是否在圆内</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; pointArr.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">var</span> point = pointArr[i]\n    <span class=\"hljs-keyword\">var</span> x_diff = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(point.<span class=\"hljs-property\">x</span> - touche.<span class=\"hljs-property\">pageX</span> * dpi)\n    <span class=\"hljs-keyword\">var</span> y_diff = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(point.<span class=\"hljs-property\">y</span> - touche.<span class=\"hljs-property\">pageY</span> * dpi)\n\n    <span class=\"hljs-comment\">//如果 (x_diff*x_diff + y_diff*y_diff) &gt; settings.r*settings.r  则在圆外</span>\n    <span class=\"hljs-keyword\">if</span> (x_diff * x_diff + y_diff * y_diff &lt; settings.<span class=\"hljs-property\">r</span> * settings.<span class=\"hljs-property\">r</span>) {\n      <span class=\"hljs-keyword\">if</span> (pointActiveArr.<span class=\"hljs-title function_\">indexOf</span>(i) &lt; <span class=\"hljs-number\">0</span>) {\n        pointActiveArr.<span class=\"hljs-title function_\">push</span>(i)\n      }\n      <span class=\"hljs-keyword\">break</span>\n    }\n  }\n}\n</code></pre>\n<p>滑动结束以后输出当前pointActiveArr中的内容，作为密码进行判断，具体判断的逻辑可以自己实现</p>\n<p>接下来就是最主要的，绘制canvas，先上代码</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">//绘制canvas</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">draw</span>(<span class=\"hljs-params\">touch</span>) {\n  ctx.<span class=\"hljs-title function_\">clearRect</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, settings.<span class=\"hljs-property\">w</span>, settings.<span class=\"hljs-property\">h</span>)\n  <span class=\"hljs-comment\">//绘制n*n个圈</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; pointArr.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">var</span> point = pointArr[i]\n    ctx.<span class=\"hljs-property\">fillStyle</span> = settings.<span class=\"hljs-property\">pointDefault</span>\n    ctx.<span class=\"hljs-title function_\">beginPath</span>()\n    ctx.<span class=\"hljs-title function_\">arc</span>(point.<span class=\"hljs-property\">x</span>, point.<span class=\"hljs-property\">y</span>, settings.<span class=\"hljs-property\">r</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">true</span>)\n    ctx.<span class=\"hljs-title function_\">closePath</span>()\n    ctx.<span class=\"hljs-title function_\">fill</span>()\n    ctx.<span class=\"hljs-property\">fillStyle</span> = <span class=\"hljs-string\">&#x27;#ffffff&#x27;</span>\n    ctx.<span class=\"hljs-title function_\">beginPath</span>()\n    ctx.<span class=\"hljs-title function_\">arc</span>(point.<span class=\"hljs-property\">x</span>, point.<span class=\"hljs-property\">y</span>, settings.<span class=\"hljs-property\">r</span> - <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">true</span>)\n    ctx.<span class=\"hljs-title function_\">closePath</span>()\n    ctx.<span class=\"hljs-title function_\">fill</span>()\n\n    <span class=\"hljs-comment\">//如果当前点已被选中，这中间添加一个小的圆</span>\n    <span class=\"hljs-keyword\">if</span> (pointActiveArr.<span class=\"hljs-title function_\">indexOf</span>(i) &gt;= <span class=\"hljs-number\">0</span>) {\n      ctx.<span class=\"hljs-property\">fillStyle</span> = settings.<span class=\"hljs-property\">pointColor</span>\n      ctx.<span class=\"hljs-title function_\">beginPath</span>()\n      ctx.<span class=\"hljs-title function_\">arc</span>(point.<span class=\"hljs-property\">x</span>, point.<span class=\"hljs-property\">y</span>, settings.<span class=\"hljs-property\">sr</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">true</span>)\n      ctx.<span class=\"hljs-title function_\">closePath</span>()\n      ctx.<span class=\"hljs-title function_\">fill</span>()\n    }\n  }\n\n  <span class=\"hljs-comment\">//如果有传当前移动位置，则添加和最后一个选中点的连线</span>\n  <span class=\"hljs-keyword\">if</span> (touch != <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">var</span> lastPoint = pointArr[pointActiveArr[pointActiveArr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>]]\n    ctx.<span class=\"hljs-title function_\">beginPath</span>()\n    ctx.<span class=\"hljs-title function_\">moveTo</span>(lastPoint.<span class=\"hljs-property\">x</span>, lastPoint.<span class=\"hljs-property\">y</span>)\n    ctx.<span class=\"hljs-title function_\">lineTo</span>(touch.<span class=\"hljs-property\">pageX</span> * dpi, touch.<span class=\"hljs-property\">pageY</span> * dpi)\n    ctx.<span class=\"hljs-title function_\">stroke</span>()\n    ctx.<span class=\"hljs-title function_\">closePath</span>()\n  }\n\n  <span class=\"hljs-comment\">//绘制选中的线</span>\n  <span class=\"hljs-keyword\">if</span> (pointActiveArr.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) {\n    ctx.<span class=\"hljs-title function_\">beginPath</span>()\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; pointActiveArr.<span class=\"hljs-property\">length</span>; i++) {\n      <span class=\"hljs-keyword\">var</span> index = pointActiveArr[i]\n      ctx.<span class=\"hljs-title function_\">lineTo</span>(pointArr[index].<span class=\"hljs-property\">x</span>, pointArr[index].<span class=\"hljs-property\">y</span>)\n    }\n    ctx.<span class=\"hljs-property\">lineWidth</span> = <span class=\"hljs-number\">10</span>\n    ctx.<span class=\"hljs-property\">strokeStyle</span> = settings.<span class=\"hljs-property\">pointColor</span>\n    ctx.<span class=\"hljs-title function_\">stroke</span>()\n    ctx.<span class=\"hljs-title function_\">closePath</span>()\n  }\n}\n</code></pre>\n<p>绘制的时候先画了我们<code>pointArr</code>中定义的点，画<code>N*N</code>个圆。如果当前点在<code>pointActiveArr</code>中存在，则在圆内部画一个小圆。\n根据<code>pointActiveArr</code>，在相邻的两个点中间，画直线。\n<code>touch</code>传入的是当前滑动到的位置，将其与 <code>pointActiveArr</code>中的最后一个相连。</p>\n<p>到此位置基本的功能就实现完了。</p>\n<h3 id=\"toc-19b223\">本例可以做一些进一步的优化</h3>\n<ul>\n<li><p>可以去除jQuery，用原生js来，因为页面本身引入了jQuery，就直接拿来用了</p>\n</li>\n<li><p>canvas底部的N*N的点不需要每次都重绘，可以用两个canvas进行叠加</p>\n</li>\n<li><p>本例只是实现了绘制的部分，并没有进行具体的解锁逻辑处理。</p>\n<p>可以将密码保存到 localStorage 里，页面打开的时候从本地读取密码，如果没有设置就让用户设置密码，具体的密码规则自己定制。</p>\n</li>\n<li><p>没有添加密码错误/正确的样式，可以在配置中添加相应的颜色，再绘制canvas的时候选择对象的颜色。</p>\n</li>\n</ul>\n",
      "mdContent": "\n> 对于canvas不熟悉的可以查看 MDN 上的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial\" target=\"_blank\">canvas教程</a>\n\n在开始之前，先介绍一个数学知识，怎么判断一个点是否在圆内\n通过判断一个点到圆心的距离是否大于半径。\n例如：半径是R 如O(x,y)点圆心，任意一点P（x1,y1） `（x-x1）*(x-x1)+(y-y1)*(y-y1)>R*R` 那么在圆外 反之在圆内\n\n<!-- more -->\n\n### 准备及布局设置\n\n本例引入了jQuery，写成了jQuery插件的形式，真实使用的时候，可以去掉jQuery，用原生的js写。\n\njQuery插件的写法\n\n```javascript\n;(function ($) {\n  $.fn.locked = function (settings) {\n    settings = $.extend({}, defaultSettings, settings)\n  }\n})(jQuery)\n\n$(function () {\n  $('#canvas').locked({\n    n: 4,\n  })\n})\n```\n\n默认配置\njQuery插件调用时传入的配置会覆盖defaultSettings\n其中`document.body.offsetWidth`获取的是网页可见区域宽，没特殊需要可以不改\n\n```javascript\n//两个变量记录，所有的点以及选中的点\nvar pointArr = [] //点数组\nvar pointActiveArr = [] //已激活点数组\n\n//默认配置\nvar defaultSettings = {\n  r: 25, //大圆半径\n  sr: 8, //小圆半径，小圆既选中状态，内部的小圆\n  w: document.body.offsetWidth, //canvas宽度\n  h: document.body.offsetWidth, //canvas高度\n  n: 3, //数量n*n\n  pointColor: '#ff0000', //选中状态点线颜色\n  pointDefault: '#686868', //默认点颜色\n}\n```\n\n获取到canvas对象，并根据设备`dpi`对settings配置进行修改\n\n> 根据`dpi`处理，主要是为了防止手机端访问的时候，canvas变模糊\n\n```javascript\nvar canvas = $(this)[0] //jQuery对象转成js对象\nvar ctx = canvas.getContext('2d')\n\n//防止手机端canvas模糊，计算dpi\nvar dpi = getPixelRatio(ctx)\nsettings.r *= dpi\nsettings.sr *= dpi\nsettings.w *= dpi\nsettings.h *= dpi\n\n//设置canvas宽度高度\ncanvas.width = settings.w\ncanvas.height = settings.h\n```\n\n获取`dpi`的方式\n\n```javascript\n//获取dpi\nfunction getPixelRatio(context) {\n  var backingStore =\n    context.backingStorePixelRatio ||\n    context.webkitBackingStorePixelRatio ||\n    context.mozBackingStorePixelRatio ||\n    context.msBackingStorePixelRatio ||\n    context.oBackingStorePixelRatio ||\n    context.backingStorePixelRatio ||\n    1\n\n  return (window.devicePixelRatio || 1) / backingStore\n}\n```\n\n创建N\\*N个点并将x,y点的坐标记录到pointArr数组中，点的位置根据canvas宽高平均分配\n\n```javascript\npointArr = creatPoint()\n\n//创建n*n个点\nfunction creatPoint() {\n  var points = []\n  for (var row = 0; row < settings.n; row++) {\n    for (var col = 0; col < settings.n; col++) {\n      points.push({\n        x: (settings.w / (settings.n + 1)) * (col + 1),\n        y: (settings.h / (settings.n + 1)) * (row + 1),\n      })\n    }\n  }\n  return points\n}\n```\n\n添加事件监听\n\n```javascript\n//事件监听\ncanvas.addEventListener(\n  'touchstart',\n  function (e) {\n    touch(e)\n  },\n  false\n)\ncanvas.addEventListener(\n  'touchmove',\n  function (e) {\n    touch(e)\n  },\n  false\n)\ncanvas.addEventListener(\n  'touchend',\n  function (e) {\n    touch(e)\n  },\n  false\n)\n```\n\ntouch函数统一处理滑动事件\n\n```javascript\n//事件监听处理\nfunction touch(e) {\n  var e = e || window.event\n  console.log(e.type)\n  switch (e.type) {\n    case 'touchstart':\n      isSelect(e.touches[0])\n      break\n    case 'touchend':\n      draw()\n      alert('密码结果是：' + pointActiveArr.join('-'))\n      pointActiveArr = []\n      break\n    case 'touchmove':\n      isSelect(e.touches[0])\n      draw(e.touches[0])\n      e.preventDefault()\n      break\n  }\n}\n```\n\n滑动开始和滑动过程中通过isSelect判断当前的点是否进入了某个圆内，如果进入了某个圆且这个点没有添加到pointActiveArr数组中，则添加。\n\n```javascript\n//判断是否在圆内\n//通过数学计算来判断\nfunction isSelect(touche) {\n  //遍历所有点，查看当前位置是否在圆内\n  for (var i = 0; i < pointArr.length; i++) {\n    var point = pointArr[i]\n    var x_diff = Math.abs(point.x - touche.pageX * dpi)\n    var y_diff = Math.abs(point.y - touche.pageY * dpi)\n\n    //如果 (x_diff*x_diff + y_diff*y_diff) > settings.r*settings.r  则在圆外\n    if (x_diff * x_diff + y_diff * y_diff < settings.r * settings.r) {\n      if (pointActiveArr.indexOf(i) < 0) {\n        pointActiveArr.push(i)\n      }\n      break\n    }\n  }\n}\n```\n\n滑动结束以后输出当前pointActiveArr中的内容，作为密码进行判断，具体判断的逻辑可以自己实现\n\n接下来就是最主要的，绘制canvas，先上代码\n\n```javascript\n//绘制canvas\nfunction draw(touch) {\n  ctx.clearRect(0, 0, settings.w, settings.h)\n  //绘制n*n个圈\n  for (var i = 0; i < pointArr.length; i++) {\n    var point = pointArr[i]\n    ctx.fillStyle = settings.pointDefault\n    ctx.beginPath()\n    ctx.arc(point.x, point.y, settings.r, 0, Math.PI * 2, true)\n    ctx.closePath()\n    ctx.fill()\n    ctx.fillStyle = '#ffffff'\n    ctx.beginPath()\n    ctx.arc(point.x, point.y, settings.r - 6, 0, Math.PI * 2, true)\n    ctx.closePath()\n    ctx.fill()\n\n    //如果当前点已被选中，这中间添加一个小的圆\n    if (pointActiveArr.indexOf(i) >= 0) {\n      ctx.fillStyle = settings.pointColor\n      ctx.beginPath()\n      ctx.arc(point.x, point.y, settings.sr, 0, Math.PI * 2, true)\n      ctx.closePath()\n      ctx.fill()\n    }\n  }\n\n  //如果有传当前移动位置，则添加和最后一个选中点的连线\n  if (touch != null) {\n    var lastPoint = pointArr[pointActiveArr[pointActiveArr.length - 1]]\n    ctx.beginPath()\n    ctx.moveTo(lastPoint.x, lastPoint.y)\n    ctx.lineTo(touch.pageX * dpi, touch.pageY * dpi)\n    ctx.stroke()\n    ctx.closePath()\n  }\n\n  //绘制选中的线\n  if (pointActiveArr.length > 0) {\n    ctx.beginPath()\n    for (var i = 0; i < pointActiveArr.length; i++) {\n      var index = pointActiveArr[i]\n      ctx.lineTo(pointArr[index].x, pointArr[index].y)\n    }\n    ctx.lineWidth = 10\n    ctx.strokeStyle = settings.pointColor\n    ctx.stroke()\n    ctx.closePath()\n  }\n}\n```\n\n绘制的时候先画了我们`pointArr`中定义的点，画`N*N`个圆。如果当前点在`pointActiveArr`中存在，则在圆内部画一个小圆。\n根据`pointActiveArr`，在相邻的两个点中间，画直线。\n`touch`传入的是当前滑动到的位置，将其与 `pointActiveArr`中的最后一个相连。\n\n到此位置基本的功能就实现完了。\n\n### 本例可以做一些进一步的优化\n\n- 可以去除jQuery，用原生js来，因为页面本身引入了jQuery，就直接拿来用了\n- canvas底部的N\\*N的点不需要每次都重绘，可以用两个canvas进行叠加\n- 本例只是实现了绘制的部分，并没有进行具体的解锁逻辑处理。\n\n  可以将密码保存到 localStorage 里，页面打开的时候从本地读取密码，如果没有设置就让用户设置密码，具体的密码规则自己定制。\n\n- 没有添加密码错误/正确的样式，可以在配置中添加相应的颜色，再绘制canvas的时候选择对象的颜色。\n",
      "toc": "<ul>\n<li><a href=\"#toc-e6969a\">准备及布局设置</a></li>\n<li><a href=\"#toc-19b223\">本例可以做一些进一步的优化</a></li>\n</ul>\n",
      "created_timestamp": 1520680923000,
      "updated_timestamp": 1520680923000,
      "url": "html5-canvas-shou-ji-jiu-gong-ge-shou-shi-mi-ma-jie-suo-zhi-chi-nn-ge-dian",
      "symbolsCount": 2635,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 3128,
      "readingTime": 16
    },
    {
      "id": "1ef3b5be-561c-6f70-a98e-1d4fbfc5d1c2",
      "title": "X-Frame-Options 响应头",
      "alias": null,
      "cover": null,
      "created_time": "2017-06-06T16:00:14.000Z",
      "date": "2017-06-06T16:00:14.000Z",
      "updated_time": "2017-06-06T16:00:14.000Z",
      "updated": "2017-06-06T16:00:14.000Z",
      "categories": [
        "notes",
        "http"
      ],
      "tags": null,
      "excerpt": "做了一个页面，需要加载一个带分页列表，原本代码中没有ajax分页组件，所以就直接用iframe加载了一个页面进来，结果发现页面无法加载。控制台提示：Refused to display ‘XXXX’ in a frame because it set ‘X-Frame-Options’ to ‘de",
      "published": true,
      "content": "<p>做了一个页面，需要加载一个带分页列表，原本代码中没有ajax分页组件，所以就直接用iframe加载了一个页面进来，结果发现页面无法加载。控制台提示：Refused to display &#39;XXXX&#39; in a frame because it set &#39;X-Frame-Options&#39; to &#39;deny&#39;. 查询了MDN，具体原因如下(MDN上摘录)</p>\n<!-- more -->\n\n<h3 id=\"toc-00452a\">X-Frame-Options是什么？</h3>\n<p>X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 <code>&lt;frame&gt;</code>, <code>&lt;iframe&gt;</code> 或者 <code>&lt;object&gt;</code> 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。</p>\n<h3 id=\"toc-3c05a1\">使用X-Frame-Options</h3>\n<p>X-Frame-Options 有三个值:</p>\n<ul>\n<li>DENY\n表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</li>\n<li>SAMEORIGIN\n表示该页面可以在相同域名页面的 frame 中展示。</li>\n<li>ALLOW-FROM uri\n表示该页面可以在指定来源的 frame 中展示。\n换一句话说，如果设置为 DENY，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载。另一方面，如果设置为 SAMEORIGIN，那么页面就可以在同域名页面的 frame 中嵌套。</li>\n</ul>\n<h3 id=\"toc-171f7b\">服务器配置</h3>\n<ul>\n<li>配置 Apache\n配置 Apache 在所有页面上发送 X-Frame-Options 响应头，需要把下面这行添加到 &#39;site&#39; 的配置中:</li>\n</ul>\n<pre><code class=\"hljs lang-pgsql\"><span class=\"hljs-keyword\">Header</span> <span class=\"hljs-keyword\">always</span> append X-Frame-<span class=\"hljs-keyword\">Options</span> SAMEORIGIN\n</code></pre>\n<h3 id=\"toc-5f33f1\">配置 nginx</h3>\n<ul>\n<li>配置 nginx\n发送 X-Frame-Options 响应头，把下面这行添加到 &#39;http&#39;, &#39;server&#39; 或者 &#39;location&#39; 的配置中:</li>\n</ul>\n<pre><code class=\"hljs lang-mathematica\"><span class=\"hljs-type\">add_header</span> <span class=\"hljs-variable\">X</span><span class=\"hljs-operator\">-</span><span class=\"hljs-built_in\">Frame</span><span class=\"hljs-operator\">-</span><span class=\"hljs-built_in\">Options</span> <span class=\"hljs-variable\">SAMEORIGIN</span><span class=\"hljs-operator\">;</span>\n</code></pre>\n<h3 id=\"toc-170914\">配置 IIS</h3>\n<ul>\n<li>配置 IIS</li>\n</ul>\n<p>发送 X-Frame-Options 响应头，添加下面的配置到 Web.config 文件中:</p>\n<pre><code class=\"hljs lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system.webServer</span>&gt;</span>\n  ...\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">httpProtocol</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">customHeaders</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;X-Frame-Options&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;SAMEORIGIN&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">customHeaders</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">httpProtocol</span>&gt;</span>\n\n  ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">system.webServer</span>&gt;</span>\n</code></pre>\n<h3 id=\"toc-0d98c7\">其他</h3>\n<p>可以直接通过meta标签来设置，不需要放在http头部请求中了。</p>\n<pre><code class=\"hljs lang-routeros\">&lt;meta <span class=\"hljs-attribute\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-Frame-Options&quot;</span> <span class=\"hljs-attribute\">content</span>=<span class=\"hljs-string\">&quot;deny&quot;</span>&gt;\n</code></pre>\n",
      "mdContent": "\n做了一个页面，需要加载一个带分页列表，原本代码中没有ajax分页组件，所以就直接用iframe加载了一个页面进来，结果发现页面无法加载。控制台提示：Refused to display 'XXXX' in a frame because it set 'X-Frame-Options' to 'deny'. 查询了MDN，具体原因如下(MDN上摘录)\n\n<!-- more -->\n\n### X-Frame-Options是什么？\n\nX-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 `<frame>`, `<iframe>` 或者 `<object>` 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。\n\n### 使用X-Frame-Options\n\nX-Frame-Options 有三个值:\n\n- DENY\n  表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。\n- SAMEORIGIN\n  表示该页面可以在相同域名页面的 frame 中展示。\n- ALLOW-FROM uri\n  表示该页面可以在指定来源的 frame 中展示。\n  换一句话说，如果设置为 DENY，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载。另一方面，如果设置为 SAMEORIGIN，那么页面就可以在同域名页面的 frame 中嵌套。\n\n### 服务器配置\n\n- 配置 Apache\n  配置 Apache 在所有页面上发送 X-Frame-Options 响应头，需要把下面这行添加到 'site' 的配置中:\n\n```\nHeader always append X-Frame-Options SAMEORIGIN\n```\n\n### 配置 nginx\n\n- 配置 nginx\n  发送 X-Frame-Options 响应头，把下面这行添加到 'http', 'server' 或者 'location' 的配置中:\n\n```\nadd_header X-Frame-Options SAMEORIGIN;\n```\n\n### 配置 IIS\n\n- 配置 IIS\n\n发送 X-Frame-Options 响应头，添加下面的配置到 Web.config 文件中:\n\n```\n<system.webServer>\n  ...\n\n  <httpProtocol>\n    <customHeaders>\n      <add name=\"X-Frame-Options\" value=\"SAMEORIGIN\" />\n    </customHeaders>\n  </httpProtocol>\n\n  ...\n</system.webServer>\n```\n\n### 其他\n\n可以直接通过meta标签来设置，不需要放在http头部请求中了。\n\n```\n<meta http-equiv=\"X-Frame-Options\" content=\"deny\">\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-00452a\">X-Frame-Options是什么？</a></li>\n<li><a href=\"#toc-3c05a1\">使用X-Frame-Options</a></li>\n<li><a href=\"#toc-171f7b\">服务器配置</a></li>\n<li><a href=\"#toc-5f33f1\">配置 nginx</a></li>\n<li><a href=\"#toc-170914\">配置 IIS</a></li>\n<li><a href=\"#toc-0d98c7\">其他</a></li>\n</ul>\n",
      "created_timestamp": 1496764814000,
      "updated_timestamp": 1496764814000,
      "url": "x-frame-options-xiang-ying-tou",
      "symbolsCount": 907,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 1083,
      "readingTime": 6
    },
    {
      "id": "1ef3b5c3-e152-6d60-94dd-7da5eda79cf5",
      "title": "NODE.JS采集练手",
      "alias": null,
      "cover": null,
      "created_time": "2017-05-03T14:05:43.000Z",
      "date": "2017-05-03T14:05:43.000Z",
      "updated_time": "2017-05-03T14:05:43.000Z",
      "updated": "2017-05-03T14:05:43.000Z",
      "categories": [
        "nodejs"
      ],
      "tags": null,
      "excerpt": "使用类库request发送请求获取网页内容co执行Generator函数cheerio解析html，和jQuery一样通过选择器获取node-xlsx生成excel文档代码如下&quot;use strict&quot;;const request = require(&#39;request&#3",
      "published": true,
      "content": "<h3 id=\"toc-4843fb\">使用类库</h3>\n<ul>\n<li>request\n发送请求获取网页内容</li>\n<li>co\n执行Generator函数</li>\n<li>cheerio\n解析html，和jQuery一样通过选择器获取</li>\n<li>node-xlsx\n生成excel文档</li>\n</ul>\n<!-- more -->\n\n<p>代码如下</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-meta\">&#x27;use strict&#x27;</span>\n<span class=\"hljs-keyword\">const</span> request = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;request&#x27;</span>)\n<span class=\"hljs-keyword\">const</span> co = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;co&#x27;</span>)\n<span class=\"hljs-keyword\">const</span> cheerio = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;cheerio&#x27;</span>)\n<span class=\"hljs-keyword\">const</span> xlsx = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;node-xlsx&#x27;</span>)\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>)\n<span class=\"hljs-keyword\">let</span> base = <span class=\"hljs-string\">&#x27;https://aso100.com/app/rank/appid/1188599882/country/cn&#x27;</span>\n<span class=\"hljs-keyword\">let</span> base_url = <span class=\"hljs-string\">&#x27;https://aso100.com/app/rank/appid/1188599882/country/&#x27;</span>\n<span class=\"hljs-keyword\">let</span> urls = []\n<span class=\"hljs-keyword\">let</span> dataArray = []\n\n<span class=\"hljs-comment\">//通过url，获取网页内容</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">getUrl</span> = (<span class=\"hljs-params\">url</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">request</span>(url, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, response, body</span>) {\n      <span class=\"hljs-keyword\">if</span> (err) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">reject</span>(err)\n      }\n      <span class=\"hljs-keyword\">return</span> err ? <span class=\"hljs-title function_\">reject</span>(err) : <span class=\"hljs-title function_\">resolve</span>(body)\n    })\n  })\n}\n\n<span class=\"hljs-comment\">//通过url获取需要的字段内容，并存入dataArray</span>\n<span class=\"hljs-keyword\">let</span> getDetail = <span class=\"hljs-keyword\">function</span>* (url) {\n  <span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">getUrl</span>(url)\n  <span class=\"hljs-keyword\">let</span> $ = cheerio.<span class=\"hljs-title function_\">load</span>(data)\n  <span class=\"hljs-keyword\">let</span> title = $(<span class=\"hljs-string\">&#x27;.appinfo-title&#x27;</span>).<span class=\"hljs-title function_\">text</span>()\n  <span class=\"hljs-keyword\">let</span> name = $(<span class=\"hljs-string\">&#x27;.appinfo-country .name&#x27;</span>).<span class=\"hljs-title function_\">text</span>()\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(title + name)\n\n  dataArray.<span class=\"hljs-title function_\">push</span>([title, name])\n}\n\n<span class=\"hljs-comment\">//休眠函数，避免速度太快</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">sleep</span> = (<span class=\"hljs-params\">t</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-title function_\">resolve</span>()\n    }, t)\n  })\n}\n\n<span class=\"hljs-comment\">//获取base目录中所有需要采集的url地址，并执行采集，最后导出excel</span>\n<span class=\"hljs-keyword\">let</span> getUrlArray = <span class=\"hljs-keyword\">function</span>* () {\n  <span class=\"hljs-keyword\">let</span> html = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">getUrl</span>(base)\n  <span class=\"hljs-keyword\">let</span> $ = cheerio.<span class=\"hljs-title function_\">load</span>(html)\n  <span class=\"hljs-keyword\">let</span> ele = $(<span class=\"hljs-string\">&#x27;.select-container&#x27;</span>).<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>)\n  ele.<span class=\"hljs-title function_\">each</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> ($(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-country&#x27;</span>)) {\n      urls.<span class=\"hljs-title function_\">push</span>(base_url + $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-country&#x27;</span>))\n    }\n  })\n\n  <span class=\"hljs-comment\">//获取内容</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; urls.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">sleep</span>(<span class=\"hljs-number\">20000</span>)\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">getDetail</span>(urls[i])\n  }\n\n  <span class=\"hljs-comment\">//导出excel</span>\n  <span class=\"hljs-keyword\">let</span> buffer = xlsx.<span class=\"hljs-title function_\">build</span>([{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;mySheetName&#x27;</span>, <span class=\"hljs-attr\">data</span>: dataArray }])\n  fs.<span class=\"hljs-title function_\">writeFileSync</span>(<span class=\"hljs-string\">&#x27;test.csv&#x27;</span>, buffer, <span class=\"hljs-string\">&#x27;binary&#x27;</span>)\n}\n\n<span class=\"hljs-comment\">//通过co执行Generator</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">run</span> = (<span class=\"hljs-params\">fn</span>) =&gt; {\n  <span class=\"hljs-title function_\">co</span>(fn).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err)\n  })\n}\n\n<span class=\"hljs-comment\">//开始采集</span>\n<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-title function_\">getUrlArray</span>())\n</code></pre>\n",
      "mdContent": "\n### 使用类库\n\n- request\n  发送请求获取网页内容\n- co\n  执行Generator函数\n- cheerio\n  解析html，和jQuery一样通过选择器获取\n- node-xlsx\n  生成excel文档\n\n<!-- more -->\n\n代码如下\n\n```javascript\n'use strict'\nconst request = require('request')\nconst co = require('co')\nconst cheerio = require('cheerio')\nconst xlsx = require('node-xlsx')\nconst fs = require('fs')\nlet base = 'https://aso100.com/app/rank/appid/1188599882/country/cn'\nlet base_url = 'https://aso100.com/app/rank/appid/1188599882/country/'\nlet urls = []\nlet dataArray = []\n\n//通过url，获取网页内容\nlet getUrl = (url) => {\n  return new Promise((resolve, reject) => {\n    request(url, function (err, response, body) {\n      if (err) {\n        return reject(err)\n      }\n      return err ? reject(err) : resolve(body)\n    })\n  })\n}\n\n//通过url获取需要的字段内容，并存入dataArray\nlet getDetail = function* (url) {\n  let data = yield getUrl(url)\n  let $ = cheerio.load(data)\n  let title = $('.appinfo-title').text()\n  let name = $('.appinfo-country .name').text()\n  console.log(title + name)\n\n  dataArray.push([title, name])\n}\n\n//休眠函数，避免速度太快\nlet sleep = (t) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(function () {\n      resolve()\n    }, t)\n  })\n}\n\n//获取base目录中所有需要采集的url地址，并执行采集，最后导出excel\nlet getUrlArray = function* () {\n  let html = yield getUrl(base)\n  let $ = cheerio.load(html)\n  let ele = $('.select-container').find('a')\n  ele.each(function () {\n    if ($(this).attr('data-country')) {\n      urls.push(base_url + $(this).attr('data-country'))\n    }\n  })\n\n  //获取内容\n  for (let i = 0; i < urls.length; i++) {\n    yield sleep(20000)\n    yield getDetail(urls[i])\n  }\n\n  //导出excel\n  let buffer = xlsx.build([{ name: 'mySheetName', data: dataArray }])\n  fs.writeFileSync('test.csv', buffer, 'binary')\n}\n\n//通过co执行Generator\nlet run = (fn) => {\n  co(fn).catch((err) => {\n    console.log(err)\n  })\n}\n\n//开始采集\nrun(getUrlArray())\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-4843fb\">使用类库</a></li>\n</ul>\n",
      "created_timestamp": 1493820343000,
      "updated_timestamp": 1493820343000,
      "url": "nodejs-cai-ji-lian-shou",
      "symbolsCount": 1261,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 1575,
      "readingTime": 8
    },
    {
      "id": "1ef3b5cf-0201-6880-9695-c8862c624a56",
      "title": "Web动画优化--requestAnimationFrame",
      "alias": null,
      "cover": null,
      "created_time": "2017-05-03T10:06:42.000Z",
      "date": "2017-05-03T10:06:42.000Z",
      "updated_time": "2017-05-03T10:06:42.000Z",
      "updated": "2017-05-03T10:06:42.000Z",
      "categories": [
        "canvas"
      ],
      "tags": null,
      "excerpt": "什么是requestAnimationFramewindow.requestAnimationFrame（callback）方法告诉浏览器您希望执行动画，并请求在下一次重新绘制之前,浏览器调用指定的函数更新。 callback该方法作为参数，在重绘之前调用回调。注意：如果您要在下一次重新绘制时进行别",
      "published": true,
      "content": "<h3 id=\"toc-ecace5\">什么是requestAnimationFrame</h3>\n<p><code>window.requestAnimationFrame（callback）</code>方法告诉浏览器您希望执行动画，并请求在下一次重新绘制之前,浏览器调用指定的函数更新。 <code>callback</code>该方法作为参数，在重绘之前调用回调。</p>\n<blockquote>\n<p>注意：如果您要在下一次重新绘制时进行别的动画处理，则您的回调本身必须调用requestAnimationFrame（）。</p>\n</blockquote>\n<!-- more -->\n\n<h3 id=\"toc-ddcf3f\">例如：</h3>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">step</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i++)\n  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">requestAnimationFrame</span>(step) <span class=\"hljs-comment\">//调用step自身</span>\n}\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">requestAnimationFrame</span>(step)\n</code></pre>\n<p>此例中<code>step</code>方法中必须调用<code>requestAnimationFrame</code>，才能循环输出</p>\n<h3 id=\"toc-52b8c1\">优点</h3>\n<p>该方法通过在系统准备好绘制动画帧时调用该帧，从而为创建动画网页提供了一种更平滑更高效的方法。在此 API 之前，使用 <code>setTimeout</code> 和 <code>setInterval</code> 绘制的动画并没有为 Web 开发人员提供有效的方法来规划动画的图形计时器。这导致了动画过度绘制，浪费 CPU 周期以及消耗额外的电能等问题。而且，即使看不到网站，特别是当网站使用背景选项卡中的页面或浏览器已最小化时，动画都会频繁出现。</p>\n<p>具体可以查看<a href=\"https://msdn.microsoft.com/library/hh920765(v=vs.85).aspx\" target=\"_blank\">MSDN</a></p>\n<h3 id=\"toc-ec0964\">使用方法</h3>\n<p><code>requestAnimationFrame</code>的用法与<code>settimeout</code>很相似，只是不需要设置时间间隔而已。<code>requestAnimationFrame</code>使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。它返回一个整数，表示定时器的编号，这个值可以传递给<code>cancelAnimationFrame</code>用于取消这个函数的执行</p>\n<p>对上面的方法进行修改</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">var</span> time\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">step</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i++)\n  time = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">requestAnimationFrame</span>(step)\n  <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">10</span>) {\n    <span class=\"hljs-title function_\">cancelAnimationFrame</span>(time) <span class=\"hljs-comment\">//取消动画</span>\n  }\n}\ntime = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">requestAnimationFrame</span>(step)\n</code></pre>\n<h3 id=\"toc-c11b90\">兼容性</h3>\n<p>在老的浏览器中，requestAnimationFrame的方法名是带浏览器前缀的。以下是张鑫旭为在各个浏览器中能统一的调用requestAnimationFrame做的处理。不支持requestAnimationFrame的用setTimeout来代替。</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">/* requestAnimationFrame.js\n * by zhangxinxu 2013-09-30\n */</span>\n;(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">var</span> lastTime = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">var</span> vendors = [<span class=\"hljs-string\">&#x27;webkit&#x27;</span>, <span class=\"hljs-string\">&#x27;moz&#x27;</span>]\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">0</span>; x &lt; vendors.<span class=\"hljs-property\">length</span> &amp;&amp; !<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">requestAnimationFrame</span>; ++x) {\n    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">requestAnimationFrame</span> = <span class=\"hljs-variable language_\">window</span>[vendors[x] + <span class=\"hljs-string\">&#x27;RequestAnimationFrame&#x27;</span>]\n    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">cancelAnimationFrame</span> =\n      <span class=\"hljs-variable language_\">window</span>[vendors[x] + <span class=\"hljs-string\">&#x27;CancelAnimationFrame&#x27;</span>] || <span class=\"hljs-comment\">// Webkit中此取消方法的名字变了</span>\n      <span class=\"hljs-variable language_\">window</span>[vendors[x] + <span class=\"hljs-string\">&#x27;CancelRequestAnimationFrame&#x27;</span>]\n  }\n\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">requestAnimationFrame</span>) {\n    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">requestAnimationFrame</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">callback, element</span>) {\n      <span class=\"hljs-keyword\">var</span> currTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getTime</span>()\n      <span class=\"hljs-keyword\">var</span> timeToCall = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">16.7</span> - (currTime - lastTime))\n      <span class=\"hljs-keyword\">var</span> id = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-title function_\">callback</span>(currTime + timeToCall)\n      }, timeToCall)\n      lastTime = currTime + timeToCall\n      <span class=\"hljs-keyword\">return</span> id\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">cancelAnimationFrame</span>) {\n    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">cancelAnimationFrame</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">id</span>) {\n      <span class=\"hljs-built_in\">clearTimeout</span>(id)\n    }\n  }\n})()\n</code></pre>\n",
      "mdContent": "\n### 什么是requestAnimationFrame\n\n`window.requestAnimationFrame（callback）`方法告诉浏览器您希望执行动画，并请求在下一次重新绘制之前,浏览器调用指定的函数更新。 `callback`该方法作为参数，在重绘之前调用回调。\n\n> 注意：如果您要在下一次重新绘制时进行别的动画处理，则您的回调本身必须调用requestAnimationFrame（）。\n\n<!-- more -->\n\n### 例如：\n\n```javascript\nvar i = 0\nfunction step() {\n  console.log(i++)\n  window.requestAnimationFrame(step) //调用step自身\n}\nwindow.requestAnimationFrame(step)\n```\n\n此例中`step`方法中必须调用`requestAnimationFrame`，才能循环输出\n\n### 优点\n\n该方法通过在系统准备好绘制动画帧时调用该帧，从而为创建动画网页提供了一种更平滑更高效的方法。在此 API 之前，使用 `setTimeout` 和 `setInterval` 绘制的动画并没有为 Web 开发人员提供有效的方法来规划动画的图形计时器。这导致了动画过度绘制，浪费 CPU 周期以及消耗额外的电能等问题。而且，即使看不到网站，特别是当网站使用背景选项卡中的页面或浏览器已最小化时，动画都会频繁出现。\n\n具体可以查看<a href=\"https://msdn.microsoft.com/library/hh920765(v=vs.85).aspx\" target=\"_blank\">MSDN</a>\n\n### 使用方法\n\n`requestAnimationFrame`的用法与`settimeout`很相似，只是不需要设置时间间隔而已。`requestAnimationFrame`使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。它返回一个整数，表示定时器的编号，这个值可以传递给`cancelAnimationFrame`用于取消这个函数的执行\n\n对上面的方法进行修改\n\n```javascript\nvar i = 0\nvar time\nfunction step() {\n  console.log(i++)\n  time = window.requestAnimationFrame(step)\n  if (i > 10) {\n    cancelAnimationFrame(time) //取消动画\n  }\n}\ntime = window.requestAnimationFrame(step)\n```\n\n### 兼容性\n\n在老的浏览器中，requestAnimationFrame的方法名是带浏览器前缀的。以下是张鑫旭为在各个浏览器中能统一的调用requestAnimationFrame做的处理。不支持requestAnimationFrame的用setTimeout来代替。\n\n```javascript\n/* requestAnimationFrame.js\n * by zhangxinxu 2013-09-30\n */\n;(function () {\n  var lastTime = 0\n  var vendors = ['webkit', 'moz']\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame']\n    window.cancelAnimationFrame =\n      window[vendors[x] + 'CancelAnimationFrame'] || // Webkit中此取消方法的名字变了\n      window[vendors[x] + 'CancelRequestAnimationFrame']\n  }\n\n  if (!window.requestAnimationFrame) {\n    window.requestAnimationFrame = function (callback, element) {\n      var currTime = new Date().getTime()\n      var timeToCall = Math.max(0, 16.7 - (currTime - lastTime))\n      var id = window.setTimeout(function () {\n        callback(currTime + timeToCall)\n      }, timeToCall)\n      lastTime = currTime + timeToCall\n      return id\n    }\n  }\n  if (!window.cancelAnimationFrame) {\n    window.cancelAnimationFrame = function (id) {\n      clearTimeout(id)\n    }\n  }\n})()\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-ecace5\">什么是requestAnimationFrame</a></li>\n<li><a href=\"#toc-ddcf3f\">例如：</a></li>\n<li><a href=\"#toc-52b8c1\">优点</a></li>\n<li><a href=\"#toc-ec0964\">使用方法</a></li>\n<li><a href=\"#toc-c11b90\">兼容性</a></li>\n</ul>\n",
      "created_timestamp": 1493806002000,
      "updated_timestamp": 1493806002000,
      "url": "web-dong-hua-you-hua-requestanimationframe",
      "symbolsCount": 1869,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 2184,
      "readingTime": 11
    },
    {
      "id": "1ef3b5b1-f8de-63b0-8838-ac54a1c91482",
      "title": "canvas实现圆形进度条",
      "alias": null,
      "cover": null,
      "created_time": "2017-04-29T22:16:42.000Z",
      "date": "2017-04-29T22:16:42.000Z",
      "updated_time": "2017-04-29T22:16:42.000Z",
      "updated": "2017-04-29T22:16:42.000Z",
      "categories": [
        "canvas"
      ],
      "tags": null,
      "excerpt": null,
      "published": true,
      "content": "<h3 id=\"toc-450c58\">需要关注的几个点</h3>\n<ul>\n<li>弧形的圆角\n通过定义<code>ctx.lineCap = &#39;round&#39;;</code>来实现</li>\n<li>避免移动端canvas模糊，需要先计算<code>dpi</code>来进行适配，通过<code>getPixelRatio</code>方法。也可以直接计算为2倍或3倍（偷懒的做法）</li>\n<li>可以通过requestAnimationFrame来对canvas动画进行优化，本例未做处理。有兴趣的可以自行查看相关信息。</li>\n</ul>\n<!-- more -->\n\n<h3 id=\"toc-72aa4d\">代码如下</h3>\n<p>html</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;canvas_box&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;canvas&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;420&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;420&quot;</span> <span class=\"hljs-attr\">data-val</span>=<span class=\"hljs-string\">&quot;90&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;canvas_text&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;s_title&quot;</span>&gt;</span>预期年化利率<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;s_value&quot;</span>&gt;</span>\n      6<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">em</span>&gt;</span>%<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">em</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>+9%<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>css</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.canvas_box</span> {\n  <span class=\"hljs-attribute\">position</span>: relative;\n  <span class=\"hljs-attribute\">display</span>: block;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">210px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">15px</span> auto <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-attribute\">overflow</span>: hidden;\n}\n\n<span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas</span>,\n<span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas_text</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">210px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">210px</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;\n  <span class=\"hljs-attribute\">position</span>: relative;\n  <span class=\"hljs-attribute\">display</span>: block;\n}\n\n<span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas_text</span> {\n  <span class=\"hljs-attribute\">top</span>: -<span class=\"hljs-number\">210px</span>;\n}\n\n<span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas_text</span> <span class=\"hljs-selector-class\">.s_title</span> {\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">65px</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#6b6d7c</span>;\n  <span class=\"hljs-attribute\">text-align</span>: center;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>;\n}\n\n<span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas_text</span> <span class=\"hljs-selector-class\">.s_value</span> {\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">text-align</span>: center;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#ff5971</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">40px</span>;\n  <span class=\"hljs-attribute\">font-weight</span>: <span class=\"hljs-number\">700</span>;\n  <span class=\"hljs-attribute\">position</span>: relative;\n}\n\n<span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas_text</span> <span class=\"hljs-selector-class\">.s_value</span> <span class=\"hljs-selector-tag\">em</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>;\n  <span class=\"hljs-attribute\">font-style</span>: normal;\n}\n\n<span class=\"hljs-selector-class\">.canvas_box</span> <span class=\"hljs-selector-id\">#canvas_text</span> <span class=\"hljs-selector-class\">.s_value</span> <span class=\"hljs-selector-tag\">i</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">42px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">22px</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>;\n  <span class=\"hljs-attribute\">font-style</span>: normal;\n  <span class=\"hljs-attribute\">position</span>: absolute;\n  <span class=\"hljs-attribute\">top</span>: -<span class=\"hljs-number\">15px</span>;\n  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">45%</span>;\n  <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">35px</span>;\n  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">18px</span>;\n  <span class=\"hljs-attribute\">text-align</span>: center;\n  -webkit-<span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;\n  -moz-<span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;\n  -o-<span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">background-size</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#7ac6f5</span>;\n}\n</code></pre>\n<p>js</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">requestAnimationFrame</span> =\n  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">requestAnimationFrame</span> ||\n  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">mozRequestAnimationFrame</span> ||\n  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">webkitRequestAnimationFrame</span> ||\n  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">msRequestAnimationFrame</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">draw</span>(<span class=\"hljs-params\">degrees</span>) {\n  <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>)\n  <span class=\"hljs-keyword\">var</span> ctx = canvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&#x27;2d&#x27;</span>)\n  <span class=\"hljs-keyword\">var</span> dpi = <span class=\"hljs-title function_\">getPixelRatio</span>(ctx)\n  canvas.<span class=\"hljs-property\">width</span> = <span class=\"hljs-number\">210</span> * dpi\n  canvas.<span class=\"hljs-property\">height</span> = <span class=\"hljs-number\">210</span> * dpi\n\n  ctx.<span class=\"hljs-title function_\">beginPath</span>()\n  ctx.<span class=\"hljs-title function_\">clearRect</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">210</span> * dpi, <span class=\"hljs-number\">210</span> * dpi)\n  ctx.<span class=\"hljs-title function_\">arc</span>(<span class=\"hljs-number\">105</span> * dpi, <span class=\"hljs-number\">105</span> * dpi, <span class=\"hljs-number\">90</span> * dpi, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * <span class=\"hljs-number\">0.75</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * <span class=\"hljs-number\">0.25</span>, <span class=\"hljs-literal\">false</span>)\n  ctx.<span class=\"hljs-property\">lineWidth</span> = <span class=\"hljs-number\">8</span> * dpi\n  ctx.<span class=\"hljs-property\">lineCap</span> = <span class=\"hljs-string\">&#x27;round&#x27;</span>\n  ctx.<span class=\"hljs-property\">strokeStyle</span> = <span class=\"hljs-string\">&#x27;rgb(236,236,236)&#x27;</span>\n  ctx.<span class=\"hljs-title function_\">stroke</span>()\n\n  <span class=\"hljs-keyword\">if</span> (degrees != <span class=\"hljs-number\">0.75</span>) {\n    ctx.<span class=\"hljs-title function_\">beginPath</span>()\n    ctx.<span class=\"hljs-title function_\">arc</span>(\n      <span class=\"hljs-number\">105</span> * dpi,\n      <span class=\"hljs-number\">105</span> * dpi,\n      <span class=\"hljs-number\">90</span> * dpi,\n      <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * <span class=\"hljs-number\">0.75</span>,\n      <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * degrees,\n      <span class=\"hljs-literal\">false</span>\n    )\n    ctx.<span class=\"hljs-property\">lineWidth</span> = <span class=\"hljs-number\">12</span> * dpi\n    ctx.<span class=\"hljs-property\">lineCap</span> = <span class=\"hljs-string\">&#x27;round&#x27;</span>\n    ctx.<span class=\"hljs-property\">strokeStyle</span> = <span class=\"hljs-string\">&#x27;rgb(255,89,113)&#x27;</span>\n    ctx.<span class=\"hljs-title function_\">stroke</span>()\n  }\n\n  <span class=\"hljs-comment\">// ctx.beginPath();</span>\n  <span class=\"hljs-comment\">// ctx.font = &quot;14px serif&quot;;</span>\n  <span class=\"hljs-comment\">// ctx.fillText(&quot;预期年化利率&quot;, 105, 65);</span>\n  <span class=\"hljs-comment\">// ctx.fillStyle = &quot;#6b6d7c&quot;;</span>\n  <span class=\"hljs-comment\">// ctx.textAlign = &quot;center&quot;;</span>\n}\n;(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) {\n  $(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">var</span> canvas = $(<span class=\"hljs-string\">&#x27;#canvas&#x27;</span>)\n    <span class=\"hljs-keyword\">var</span> val = canvas.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-val&#x27;</span>)\n    <span class=\"hljs-keyword\">var</span> _val = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">var</span> degrees = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">var</span> t = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n      degrees = <span class=\"hljs-number\">0.75</span> + (<span class=\"hljs-number\">1.5</span> * _val) / <span class=\"hljs-number\">100</span>\n      <span class=\"hljs-title function_\">draw</span>(degrees)\n      <span class=\"hljs-keyword\">if</span> (_val == val) {\n        <span class=\"hljs-built_in\">clearInterval</span>(t)\n      } <span class=\"hljs-keyword\">else</span> {\n        _val++\n        <span class=\"hljs-keyword\">if</span> (_val &gt; val) {\n          <span class=\"hljs-built_in\">clearInterval</span>(t)\n        }\n      }\n    }, <span class=\"hljs-number\">10</span>)\n  })\n})(jQuery)\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getPixelRatio</span>(<span class=\"hljs-params\">context</span>) {\n  <span class=\"hljs-keyword\">var</span> backingStore =\n    context.<span class=\"hljs-property\">backingStorePixelRatio</span> ||\n    context.<span class=\"hljs-property\">webkitBackingStorePixelRatio</span> ||\n    context.<span class=\"hljs-property\">mozBackingStorePixelRatio</span> ||\n    context.<span class=\"hljs-property\">msBackingStorePixelRatio</span> ||\n    context.<span class=\"hljs-property\">oBackingStorePixelRatio</span> ||\n    context.<span class=\"hljs-property\">backingStorePixelRatio</span> ||\n    <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">devicePixelRatio</span> || <span class=\"hljs-number\">1</span>) / backingStore\n}\n</code></pre>\n",
      "mdContent": "\n### 需要关注的几个点\n\n- 弧形的圆角\n  通过定义`ctx.lineCap = 'round';`来实现\n- 避免移动端canvas模糊，需要先计算`dpi`来进行适配，通过`getPixelRatio`方法。也可以直接计算为2倍或3倍（偷懒的做法）\n- 可以通过requestAnimationFrame来对canvas动画进行优化，本例未做处理。有兴趣的可以自行查看相关信息。\n\n<!-- more -->\n\n### 代码如下\n\nhtml\n\n```html\n<div class=\"canvas_box\">\n  <canvas id=\"canvas\" width=\"420\" height=\"420\" data-val=\"90\"></canvas>\n  <div id=\"canvas_text\">\n    <p class=\"s_title\">预期年化利率</p>\n    <p class=\"s_value\">\n      6<em>%</em>\n      <i>+9%</i>\n    </p>\n  </div>\n</div>\n```\n\ncss\n\n```css\n.canvas_box {\n  position: relative;\n  display: block;\n  width: 210px;\n  height: 200px;\n  margin: 15px auto 0;\n  overflow: hidden;\n}\n\n.canvas_box #canvas,\n.canvas_box #canvas_text {\n  width: 210px;\n  height: 210px;\n  margin: 0 auto;\n  position: relative;\n  display: block;\n}\n\n.canvas_box #canvas_text {\n  top: -210px;\n}\n\n.canvas_box #canvas_text .s_title {\n  margin-top: 65px;\n  color: #6b6d7c;\n  text-align: center;\n  font-size: 14px;\n}\n\n.canvas_box #canvas_text .s_value {\n  margin-top: 20px;\n  text-align: center;\n  color: #ff5971;\n  font-size: 40px;\n  font-weight: 700;\n  position: relative;\n}\n\n.canvas_box #canvas_text .s_value em {\n  font-size: 14px;\n  font-style: normal;\n}\n\n.canvas_box #canvas_text .s_value i {\n  width: 42px;\n  height: 22px;\n  font-size: 12px;\n  font-style: normal;\n  position: absolute;\n  top: -15px;\n  left: 45%;\n  margin-left: 35px;\n  line-height: 18px;\n  text-align: center;\n  -webkit-background-size: 100% 100%;\n  -moz-background-size: 100% 100%;\n  -o-background-size: 100% 100%;\n  background-size: 100% 100%;\n  color: #7ac6f5;\n}\n```\n\njs\n\n```javascript\nwindow.requestAnimationFrame =\n  window.requestAnimationFrame ||\n  window.mozRequestAnimationFrame ||\n  window.webkitRequestAnimationFrame ||\n  window.msRequestAnimationFrame\n\nfunction draw(degrees) {\n  var canvas = document.getElementById('canvas')\n  var ctx = canvas.getContext('2d')\n  var dpi = getPixelRatio(ctx)\n  canvas.width = 210 * dpi\n  canvas.height = 210 * dpi\n\n  ctx.beginPath()\n  ctx.clearRect(0, 0, 210 * dpi, 210 * dpi)\n  ctx.arc(105 * dpi, 105 * dpi, 90 * dpi, Math.PI * 0.75, Math.PI * 0.25, false)\n  ctx.lineWidth = 8 * dpi\n  ctx.lineCap = 'round'\n  ctx.strokeStyle = 'rgb(236,236,236)'\n  ctx.stroke()\n\n  if (degrees != 0.75) {\n    ctx.beginPath()\n    ctx.arc(\n      105 * dpi,\n      105 * dpi,\n      90 * dpi,\n      Math.PI * 0.75,\n      Math.PI * degrees,\n      false\n    )\n    ctx.lineWidth = 12 * dpi\n    ctx.lineCap = 'round'\n    ctx.strokeStyle = 'rgb(255,89,113)'\n    ctx.stroke()\n  }\n\n  // ctx.beginPath();\n  // ctx.font = \"14px serif\";\n  // ctx.fillText(\"预期年化利率\", 105, 65);\n  // ctx.fillStyle = \"#6b6d7c\";\n  // ctx.textAlign = \"center\";\n}\n;(function ($) {\n  $(function () {\n    var canvas = $('#canvas')\n    var val = canvas.attr('data-val')\n    var _val = 0\n    var degrees = 0\n\n    var t = setInterval(function () {\n      degrees = 0.75 + (1.5 * _val) / 100\n      draw(degrees)\n      if (_val == val) {\n        clearInterval(t)\n      } else {\n        _val++\n        if (_val > val) {\n          clearInterval(t)\n        }\n      }\n    }, 10)\n  })\n})(jQuery)\n\nfunction getPixelRatio(context) {\n  var backingStore =\n    context.backingStorePixelRatio ||\n    context.webkitBackingStorePixelRatio ||\n    context.mozBackingStorePixelRatio ||\n    context.msBackingStorePixelRatio ||\n    context.oBackingStorePixelRatio ||\n    context.backingStorePixelRatio ||\n    1\n\n  return (window.devicePixelRatio || 1) / backingStore\n}\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-450c58\">需要关注的几个点</a></li>\n<li><a href=\"#toc-72aa4d\">代码如下</a></li>\n</ul>\n",
      "created_timestamp": 1493504202000,
      "updated_timestamp": 1493504202000,
      "url": "canvas-shi-xian-yuan-xing-jin-du-tiao",
      "symbolsCount": 2480,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 3222,
      "readingTime": 17
    },
    {
      "id": "1ef3b5c6-dba2-6340-9f1a-fbf62a73561b",
      "title": "浏览器指定内核访问",
      "alias": null,
      "cover": null,
      "created_time": "2017-04-29T21:13:03.000Z",
      "date": "2017-04-29T21:13:03.000Z",
      "updated_time": "2017-04-29T21:13:03.000Z",
      "updated": "2017-04-29T21:13:03.000Z",
      "categories": [
        "notes",
        "html"
      ],
      "tags": null,
      "excerpt": "360页面默认使用极速内核&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;页面默认使用ie兼容内核&lt;meta name=&quot;renderer&quot; content=&quot;ie-comp&quo",
      "published": true,
      "content": "<p>360页面默认使用极速内核</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;webkit&quot;</span> /&gt;</span>\n</code></pre>\n<p>页面默认使用ie兼容内核</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;ie-comp&quot;</span> /&gt;</span>\n</code></pre>\n<p>页面默认使用ie标准内核</p>\n<pre><code class=\"hljs lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;ie-stand&quot;</span> /&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- more --&gt;</span>\n</code></pre>\n",
      "mdContent": "\n360页面默认使用极速内核\n\n```html\n<meta name=\"renderer\" content=\"webkit\" />\n```\n\n页面默认使用ie兼容内核\n\n```html\n<meta name=\"renderer\" content=\"ie-comp\" />\n```\n\n页面默认使用ie标准内核\n\n```html\n<meta name=\"renderer\" content=\"ie-stand\" />\n\n<!-- more -->\n```\n",
      "toc": "",
      "created_timestamp": 1493500383000,
      "updated_timestamp": 1493500383000,
      "url": "liu-lan-qi-zhi-ding-nei-he-fang-wen",
      "symbolsCount": 67,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 87,
      "readingTime": 1
    },
    {
      "id": "1ef3b5b7-e0bc-6ce0-ac15-c509070dad5f",
      "title": "深入分析css中单位px和em,rem的区别",
      "alias": null,
      "cover": null,
      "created_time": "2017-04-29T21:06:21.000Z",
      "date": "2017-04-29T21:06:21.000Z",
      "updated_time": "2017-04-29T21:06:21.000Z",
      "updated": "2017-04-29T21:06:21.000Z",
      "categories": [
        "css"
      ],
      "tags": null,
      "excerpt": "PX特点IE无法调整那些使用px作为单位的字体大小;EM特点em的值并不是固定的;em会继承父级元素的字体大小。比如父元素设置了1.2em,子元素也设置了1.2em 那么事实上子元素设置的是1.2*1.2 emrem特点rem是CSS3新增的一个相对单位(root em，根em)。这个单位与em有什",
      "published": true,
      "content": "<h3 id=\"toc-cba1f6\">PX特点</h3>\n<p>IE无法调整那些使用px作为单位的字体大小;</p>\n<h3 id=\"toc-37eebb\">EM特点</h3>\n<p>em的值并不是固定的;</p>\n<p>em会继承父级元素的字体大小。</p>\n<p>比如父元素设置了1.2em,子元素也设置了1.2em 那么事实上子元素设置的是1.2*1.2 em</p>\n<h3 id=\"toc-8e786e\">rem特点</h3>\n<p>rem是CSS3新增的一个相对单位(root em，根em)。</p>\n<!-- more -->\n\n<ul>\n<li>这个单位与em有什么区别呢?</li>\n</ul>\n<p>使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素，比em容易计算。</p>\n<ul>\n<li>使用rem的问题</li>\n</ul>\n<p>IE8及更早版本不支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。</p>\n<h3 id=\"toc-84672b\">个人建议</h3>\n<p>同时使用rem和px，使用px只是为了兼容ie6-ie8这些不支持rem的浏览器</p>\n<p>具体实现</p>\n<p>根元素设置62.5%</p>\n<p>比如</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-tag\">html</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">62.5%</span>; <span class=\"hljs-comment\">/* 10÷16=62.5% */</span>\n}\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.2rem</span>; <span class=\"hljs-comment\">/* 12÷10=1.2 */</span>\n}\n<span class=\"hljs-selector-tag\">p</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.4rem</span>;\n}\n</code></pre>\n",
      "mdContent": "\n### PX特点\n\nIE无法调整那些使用px作为单位的字体大小;\n\n### EM特点\n\nem的值并不是固定的;\n\nem会继承父级元素的字体大小。\n\n比如父元素设置了1.2em,子元素也设置了1.2em 那么事实上子元素设置的是1.2\\*1.2 em\n\n### rem特点\n\nrem是CSS3新增的一个相对单位(root em，根em)。\n\n<!-- more -->\n\n- 这个单位与em有什么区别呢?\n\n使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素，比em容易计算。\n\n- 使用rem的问题\n\nIE8及更早版本不支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。\n\n### 个人建议\n\n同时使用rem和px，使用px只是为了兼容ie6-ie8这些不支持rem的浏览器\n\n具体实现\n\n根元素设置62.5%\n\n比如\n\n```css\nhtml {\n  font-size: 62.5%; /* 10÷16=62.5% */\n}\nbody {\n  font-size: 12px;\n  font-size: 1.2rem; /* 12÷10=1.2 */\n}\np {\n  font-size: 14px;\n  font-size: 1.4rem;\n}\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-cba1f6\">PX特点</a></li>\n<li><a href=\"#toc-37eebb\">EM特点</a></li>\n<li><a href=\"#toc-8e786e\">rem特点</a></li>\n<li><a href=\"#toc-84672b\">个人建议</a></li>\n</ul>\n",
      "created_timestamp": 1493499981000,
      "updated_timestamp": 1493499981000,
      "url": "shen-ru-fen-xi-css-zhong-dan-wei-px-he-emrem-de-qu-bie",
      "symbolsCount": 482,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 565,
      "readingTime": 3
    },
    {
      "id": "1ef3b5d3-d10c-6040-8228-d52499675442",
      "title": "让浏览器兼容placeholder",
      "alias": null,
      "cover": null,
      "created_time": "2017-04-29T21:00:51.000Z",
      "date": "2017-04-29T21:00:51.000Z",
      "updated_time": "2017-04-29T21:00:51.000Z",
      "updated": "2017-04-29T21:00:51.000Z",
      "categories": [
        "html"
      ],
      "tags": null,
      "excerpt": "什么是placeholderplaceholder 属性提供可描述输入字段预期值的提示信息（hint）。该提示会在输入字段为空时显示，并会在字段获得焦点时消失。placeholder兼容性解决$(function(){    if(!placeholderSupport()){   // 判断浏览器",
      "published": true,
      "content": "<h4 id=\"toc-04a6ee\">什么是placeholder</h4>\n<p>placeholder 属性提供可描述输入字段预期值的提示信息（hint）。\n该提示会在输入字段为空时显示，并会在字段获得焦点时消失。</p>\n<!-- more -->\n\n<h4 id=\"toc-9c8b5f\">placeholder兼容性解决</h4>\n<pre><code class=\"hljs lang-js\">$(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_\">placeholderSupport</span>()) {\n    <span class=\"hljs-comment\">// 判断浏览器是否支持 placeholder</span>\n    $(<span class=\"hljs-string\">&#x27;[placeholder]&#x27;</span>)\n      .<span class=\"hljs-title function_\">focus</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">var</span> input = $(<span class=\"hljs-variable language_\">this</span>)\n        <span class=\"hljs-keyword\">if</span> (input.<span class=\"hljs-title function_\">val</span>() == input.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;placeholder&#x27;</span>)) {\n          input.<span class=\"hljs-title function_\">val</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n          input.<span class=\"hljs-title function_\">removeClass</span>(<span class=\"hljs-string\">&#x27;placeholder&#x27;</span>)\n        }\n      })\n      .<span class=\"hljs-title function_\">blur</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">var</span> input = $(<span class=\"hljs-variable language_\">this</span>)\n        <span class=\"hljs-keyword\">if</span> (input.<span class=\"hljs-title function_\">val</span>() == <span class=\"hljs-string\">&#x27;&#x27;</span> || input.<span class=\"hljs-title function_\">val</span>() == input.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;placeholder&#x27;</span>)) {\n          input.<span class=\"hljs-title function_\">addClass</span>(<span class=\"hljs-string\">&#x27;placeholder&#x27;</span>)\n          input.<span class=\"hljs-title function_\">val</span>(input.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;placeholder&#x27;</span>))\n        }\n      })\n      .<span class=\"hljs-title function_\">blur</span>()\n  }\n})\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">placeholderSupport</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;placeholder&#x27;</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;input&#x27;</span>)\n}\n</code></pre>\n",
      "mdContent": "\n#### 什么是placeholder\n\nplaceholder 属性提供可描述输入字段预期值的提示信息（hint）。\n该提示会在输入字段为空时显示，并会在字段获得焦点时消失。\n\n<!-- more -->\n\n#### placeholder兼容性解决\n\n```js\n$(function () {\n  if (!placeholderSupport()) {\n    // 判断浏览器是否支持 placeholder\n    $('[placeholder]')\n      .focus(function () {\n        var input = $(this)\n        if (input.val() == input.attr('placeholder')) {\n          input.val('')\n          input.removeClass('placeholder')\n        }\n      })\n      .blur(function () {\n        var input = $(this)\n        if (input.val() == '' || input.val() == input.attr('placeholder')) {\n          input.addClass('placeholder')\n          input.val(input.attr('placeholder'))\n        }\n      })\n      .blur()\n  }\n})\nfunction placeholderSupport() {\n  return 'placeholder' in document.createElement('input')\n}\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-04a6ee\">什么是placeholder</a></li>\n<li><a href=\"#toc-9c8b5f\">placeholder兼容性解决</a></li>\n</ul>\n",
      "created_timestamp": 1493499651000,
      "updated_timestamp": 1493499651000,
      "url": "rang-liu-lan-qi-jian-rong-placeholder",
      "symbolsCount": 568,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 772,
      "readingTime": 4
    },
    {
      "id": "1ef3b5d9-1b23-6f70-9c72-cad688b0117d",
      "title": "jQuery 省市三级联动",
      "alias": null,
      "cover": null,
      "created_time": "2017-04-29T20:58:13.000Z",
      "date": "2017-04-29T20:58:13.000Z",
      "updated_time": "2017-04-29T20:58:13.000Z",
      "updated": "2017-04-29T20:58:13.000Z",
      "categories": [
        "javascript"
      ],
      "tags": null,
      "excerpt": null,
      "published": true,
      "content": "<p>页面打开默认获取省信息,选择省以后，再获取市信息，点击市以后，再获取地区信息</p>\n<!-- more -->\n\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> regions = {\n  <span class=\"hljs-attr\">state</span>: $(<span class=\"hljs-string\">&#x27;#state&#x27;</span>),\n  <span class=\"hljs-attr\">city</span>: $(<span class=\"hljs-string\">&#x27;#city&#x27;</span>),\n  <span class=\"hljs-attr\">district</span>: $(<span class=\"hljs-string\">&#x27;#district&#x27;</span>),\n  <span class=\"hljs-attr\">init</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">var</span> _this = <span class=\"hljs-variable language_\">this</span>\n    _this.<span class=\"hljs-title function_\">getState</span>(_this.<span class=\"hljs-property\">state</span>, <span class=\"hljs-number\">1</span>)\n    _this.<span class=\"hljs-property\">state</span>.<span class=\"hljs-title function_\">change</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">var</span> id = $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">val</span>()\n      _this.<span class=\"hljs-property\">city</span>.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&#x27;option:gt(0)&#x27;</span>).<span class=\"hljs-title function_\">remove</span>()\n      _this.<span class=\"hljs-property\">district</span>.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&#x27;option:gt(0)&#x27;</span>).<span class=\"hljs-title function_\">remove</span>()\n      _this.<span class=\"hljs-title function_\">getCity</span>(_this.<span class=\"hljs-property\">city</span>, id)\n    })\n\n    _this.<span class=\"hljs-property\">city</span>.<span class=\"hljs-title function_\">change</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">var</span> id = $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">val</span>()\n      _this.<span class=\"hljs-property\">district</span>.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&#x27;option:gt(0)&#x27;</span>).<span class=\"hljs-title function_\">remove</span>()\n      _this.<span class=\"hljs-title function_\">getDistrict</span>(_this.<span class=\"hljs-property\">district</span>, id)\n    })\n  },\n  <span class=\"hljs-attr\">getState</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">elem, id, callback</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getJson</span>(elem, id, callback)\n  },\n  <span class=\"hljs-attr\">getCity</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">elem, id, callback</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getJson</span>(elem, id, callback)\n  },\n  <span class=\"hljs-attr\">getDistrict</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">elem, id, callback</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getJson</span>(elem, id, callback)\n  },\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">elem, data, callback</span>) {\n    <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">regions</span> &amp;&amp; !$.<span class=\"hljs-title function_\">isEmptyObject</span>(data.<span class=\"hljs-property\">regions</span>)) {\n      elem.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&#x27;option:gt(0)&#x27;</span>).<span class=\"hljs-title function_\">remove</span>()\n      $.<span class=\"hljs-title function_\">each</span>(data.<span class=\"hljs-property\">regions</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name, value</span>) {\n        elem.<span class=\"hljs-title function_\">append</span>(\n          <span class=\"hljs-string\">&#x27;&lt;option value =&quot;&#x27;</span> + value.<span class=\"hljs-property\">id</span> + <span class=\"hljs-string\">&#x27;&quot;&gt;&#x27;</span> + value.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&#x27;&lt;/option&gt;&#x27;</span>\n        )\n      })\n      <span class=\"hljs-keyword\">if</span> (callback &amp;&amp; <span class=\"hljs-keyword\">typeof</span> callback == <span class=\"hljs-string\">&#x27;function&#x27;</span>) {\n        <span class=\"hljs-title function_\">callback</span>()\n      }\n    }\n  },\n  <span class=\"hljs-attr\">getJson</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">elem, id, callback</span>) {\n    <span class=\"hljs-keyword\">var</span> _this = <span class=\"hljs-variable language_\">this</span>\n    $.<span class=\"hljs-title function_\">ajax</span>({\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;post&#x27;</span>,\n      <span class=\"hljs-attr\">url</span>: system.<span class=\"hljs-title function_\">url</span>(<span class=\"hljs-string\">&#x27;address/get-regions&#x27;</span>),\n      <span class=\"hljs-attr\">data</span>: {\n        <span class=\"hljs-attr\">parent_id</span>: id,\n      },\n      <span class=\"hljs-attr\">dataType</span>: <span class=\"hljs-string\">&#x27;json&#x27;</span>,\n      <span class=\"hljs-attr\">cache</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resp</span>) {\n        <span class=\"hljs-keyword\">if</span> (resp.<span class=\"hljs-property\">status</span>) {\n          _this.<span class=\"hljs-title function_\">render</span>(elem, resp.<span class=\"hljs-property\">data</span>, callback)\n        }\n      },\n      <span class=\"hljs-attr\">error</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {},\n    })\n  },\n}\n</code></pre>\n<h4 id=\"toc-4b4d0f\">callback的作用</h4>\n<p>当获取信息时，需要渲染对应的省市信息\n通过添加回调，可以依次获取省、市、地区信息</p>\n<pre><code class=\"hljs lang-js\">regions.<span class=\"hljs-title function_\">getState</span>(regions.<span class=\"hljs-property\">state</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  $(<span class=\"hljs-string\">&#x27;#state&#x27;</span>).<span class=\"hljs-title function_\">val</span>(_this.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-state&#x27;</span>))\n  regions.<span class=\"hljs-title function_\">getCity</span>(regions.<span class=\"hljs-property\">city</span>, _this.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-state&#x27;</span>), <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    $(<span class=\"hljs-string\">&#x27;#city&#x27;</span>).<span class=\"hljs-title function_\">val</span>(_this.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-city&#x27;</span>))\n    regions.<span class=\"hljs-title function_\">getDistrict</span>(regions.<span class=\"hljs-property\">district</span>, _this.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-city&#x27;</span>), <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n      $(<span class=\"hljs-string\">&#x27;#district&#x27;</span>).<span class=\"hljs-title function_\">val</span>(_this.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;data-district&#x27;</span>))\n    })\n  })\n})\n</code></pre>\n",
      "mdContent": "\n页面打开默认获取省信息,选择省以后，再获取市信息，点击市以后，再获取地区信息\n\n<!-- more -->\n\n```js\nvar regions = {\n  state: $('#state'),\n  city: $('#city'),\n  district: $('#district'),\n  init: function () {\n    var _this = this\n    _this.getState(_this.state, 1)\n    _this.state.change(function () {\n      var id = $(this).val()\n      _this.city.find('option:gt(0)').remove()\n      _this.district.find('option:gt(0)').remove()\n      _this.getCity(_this.city, id)\n    })\n\n    _this.city.change(function () {\n      var id = $(this).val()\n      _this.district.find('option:gt(0)').remove()\n      _this.getDistrict(_this.district, id)\n    })\n  },\n  getState: function (elem, id, callback) {\n    this.getJson(elem, id, callback)\n  },\n  getCity: function (elem, id, callback) {\n    this.getJson(elem, id, callback)\n  },\n  getDistrict: function (elem, id, callback) {\n    this.getJson(elem, id, callback)\n  },\n  render: function (elem, data, callback) {\n    if (data.regions && !$.isEmptyObject(data.regions)) {\n      elem.find('option:gt(0)').remove()\n      $.each(data.regions, function (name, value) {\n        elem.append(\n          '<option value =\"' + value.id + '\">' + value.name + '</option>'\n        )\n      })\n      if (callback && typeof callback == 'function') {\n        callback()\n      }\n    }\n  },\n  getJson: function (elem, id, callback) {\n    var _this = this\n    $.ajax({\n      type: 'post',\n      url: system.url('address/get-regions'),\n      data: {\n        parent_id: id,\n      },\n      dataType: 'json',\n      cache: false,\n      success: function (resp) {\n        if (resp.status) {\n          _this.render(elem, resp.data, callback)\n        }\n      },\n      error: function () {},\n    })\n  },\n}\n```\n\n#### callback的作用\n\n当获取信息时，需要渲染对应的省市信息\n通过添加回调，可以依次获取省、市、地区信息\n\n```js\nregions.getState(regions.state, 1, function () {\n  $('#state').val(_this.attr('data-state'))\n  regions.getCity(regions.city, _this.attr('data-state'), function () {\n    $('#city').val(_this.attr('data-city'))\n    regions.getDistrict(regions.district, _this.attr('data-city'), function () {\n      $('#district').val(_this.attr('data-district'))\n    })\n  })\n})\n```\n",
      "toc": "<ul>\n<li><a href=\"#toc-4b4d0f\">callback的作用</a></li>\n</ul>\n",
      "created_timestamp": 1493499493000,
      "updated_timestamp": 1493499493000,
      "url": "jquery-sheng-shi-san-ji-lian-dong",
      "symbolsCount": 1555,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 2051,
      "readingTime": 11
    },
    {
      "id": "1ef3b5db-fc15-6310-b8d7-128489aa72d6",
      "title": "express实践",
      "alias": null,
      "cover": null,
      "created_time": "2017-04-29T20:52:30.000Z",
      "date": "2017-04-29T20:52:30.000Z",
      "updated_time": "2017-04-29T20:52:30.000Z",
      "updated": "2017-04-29T20:52:30.000Z",
      "categories": [
        "nodejs"
      ],
      "tags": null,
      "excerpt": "Node.js 7.0发布之前，写一篇关于express的文章项目创建使用express-generator使用npm install express-generator -g代码修改自动重启使用nodemonnodemon ./bin/www全局设置//加载配置项global.Config = r",
      "published": true,
      "content": "<p>Node.js 7.0发布之前，写一篇关于express的文章</p>\n<h4 id=\"toc-05102a\">项目创建</h4>\n<p>使用express-generator</p>\n<ul>\n<li>使用npm install express-generator -g</li>\n</ul>\n<h4 id=\"toc-000d55\">代码修改自动重启</h4>\n<p>使用nodemon</p>\n<ul>\n<li>nodemon ./bin/www</li>\n</ul>\n<h4 id=\"toc-188768\">全局设置</h4>\n<!-- more -->\n\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">//加载配置项</span>\n<span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">Config</span> = <span class=\"hljs-built_in\">require</span>(path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Root</span>, <span class=\"hljs-string\">&#x27;./config/config&#x27;</span>))\n<span class=\"hljs-comment\">//通用方法(设置为全局对象，方便调用)</span>\n<span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">F</span> = <span class=\"hljs-built_in\">require</span>(path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Root</span>, <span class=\"hljs-string\">&#x27;./common/funcs&#x27;</span>))\n<span class=\"hljs-comment\">//socket事件方法</span>\n<span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">Socket</span> = <span class=\"hljs-built_in\">require</span>(path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Root</span>, <span class=\"hljs-string\">&#x27;./socket/socket&#x27;</span>))\n<span class=\"hljs-comment\">//加载所有的数据库model</span>\n<span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">M</span> = {}\n<span class=\"hljs-comment\">//model存储路径 （暂时不支持二级目录）</span>\n<span class=\"hljs-keyword\">var</span> modelsPath = path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Root</span>, <span class=\"hljs-string\">&#x27;models&#x27;</span>)\nfs.<span class=\"hljs-title function_\">readdirSync</span>(modelsPath).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-keyword\">if</span> (path.<span class=\"hljs-title function_\">extname</span>(name) !== <span class=\"hljs-string\">&#x27;&#x27;</span>) {\n    name = path.<span class=\"hljs-title function_\">basename</span>(name, <span class=\"hljs-string\">&#x27;.js&#x27;</span>)\n    M[name] = <span class=\"hljs-built_in\">require</span>(path.<span class=\"hljs-title function_\">resolve</span>(modelsPath, name))\n  }\n})\n</code></pre>\n<p>使用co、Promise（bluebird）进行异步处理</p>\n<p>定义通用方法run实行Promise,并抛出错误</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">run</span> = (<span class=\"hljs-params\">fn, next</span>) =&gt; {\n  <span class=\"hljs-title function_\">co</span>(fn).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">next</span>(err)\n  })\n}\n</code></pre>\n<h4 id=\"toc-aae641\">通用方法列表 (大部分抄袭thinkjs)</h4>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">run</span>: run,\n  <span class=\"hljs-attr\">promisify</span>: promisify,\n  <span class=\"hljs-attr\">camelCase</span>: camelCase,\n  <span class=\"hljs-attr\">defer</span>: defer,\n  <span class=\"hljs-title class_\">Class</span>: <span class=\"hljs-title class_\">Class</span>,\n  <span class=\"hljs-attr\">extend</span>: extend,\n  <span class=\"hljs-attr\">isClass</span>: isClass,\n  <span class=\"hljs-attr\">isBoolean</span>: isBoolean,\n  <span class=\"hljs-attr\">isNumber</span>: isNumber,\n  <span class=\"hljs-attr\">isObject</span>: isObject,\n  <span class=\"hljs-attr\">isString</span>: isString,\n  <span class=\"hljs-attr\">isArray</span>: isArray,\n  <span class=\"hljs-attr\">isFunction</span>: isFunction,\n  <span class=\"hljs-attr\">isDate</span>: util.<span class=\"hljs-property\">isDate</span>,\n  <span class=\"hljs-attr\">isRegExp</span>: util.<span class=\"hljs-property\">isRegExp</span>,\n  <span class=\"hljs-attr\">isError</span>: util.<span class=\"hljs-property\">isError</span>,\n  <span class=\"hljs-attr\">isIP</span>: net.<span class=\"hljs-property\">isIP</span>,\n  <span class=\"hljs-attr\">isIP4</span>: net.<span class=\"hljs-property\">isIPv4</span>,\n  <span class=\"hljs-attr\">isIP6</span>: net.<span class=\"hljs-property\">isIPv6</span>,\n  <span class=\"hljs-attr\">isFile</span>: isFile,\n  <span class=\"hljs-attr\">isFileAsync</span>: isFileAsync,\n  <span class=\"hljs-attr\">isDir</span>: isDir,\n  <span class=\"hljs-attr\">isDirAsync</span>: isDirAsync,\n  <span class=\"hljs-attr\">isNumberString</span>: isNumberString,\n  <span class=\"hljs-attr\">isPromise</span>: isPromise,\n  <span class=\"hljs-attr\">isWritable</span>: isWritable,\n  <span class=\"hljs-attr\">isBuffer</span>: isBuffer,\n  <span class=\"hljs-attr\">isTrueEmpty</span>: isTrueEmpty,\n  <span class=\"hljs-attr\">isEmpty</span>: isEmpty,\n  <span class=\"hljs-attr\">clone</span>: clone,\n  <span class=\"hljs-attr\">mkdir</span>: mkdir,\n  <span class=\"hljs-attr\">rmdir</span>: rmdir,\n  <span class=\"hljs-attr\">md5</span>: md5,\n  <span class=\"hljs-attr\">chmod</span>: chmod,\n  <span class=\"hljs-attr\">getFiles</span>: getFiles,\n  <span class=\"hljs-attr\">escapeHtml</span>: escapeHtml,\n  <span class=\"hljs-attr\">datetime</span>: datetime,\n  <span class=\"hljs-attr\">getDateTime</span>: getDateTime,\n  <span class=\"hljs-attr\">randomString</span>: randomString,\n}\n</code></pre>\n<h4 id=\"toc-415823\">数据库操作（mysql）</h4>\n<p>简单的数据库查询，没有封装sql（懒）</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> mysql = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;mysql&#x27;</span>)\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Promise</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;bluebird&#x27;</span>)\n<span class=\"hljs-keyword\">var</span> dbConfig = <span class=\"hljs-title class_\">Config</span>.<span class=\"hljs-property\">db</span>\n\n<span class=\"hljs-keyword\">var</span> pool = mysql.<span class=\"hljs-title function_\">createPool</span>(dbConfig)\n\n<span class=\"hljs-comment\">//使用连接池</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">query</span> = (<span class=\"hljs-params\">sql</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    pool.<span class=\"hljs-title function_\">getConnection</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err, connection</span>) =&gt;</span> {\n      connection.<span class=\"hljs-title function_\">query</span>(sql, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, result</span>) {\n        <span class=\"hljs-keyword\">return</span> err ? <span class=\"hljs-title function_\">reject</span>(err) : <span class=\"hljs-title function_\">resolve</span>(result)\n      })\n      connection.<span class=\"hljs-title function_\">release</span>()\n    })\n  })\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">insert</span> = (<span class=\"hljs-params\">table, data</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    pool.<span class=\"hljs-title function_\">getConnection</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err, connection</span>) =&gt;</span> {\n      connection.<span class=\"hljs-title function_\">query</span>(\n        <span class=\"hljs-string\">&#x27;INSERT INTO {table} SET ?&#x27;</span>,\n        data,\n        <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, result</span>) {\n          <span class=\"hljs-keyword\">return</span> err ? <span class=\"hljs-title function_\">reject</span>(err) : <span class=\"hljs-title function_\">resolve</span>(result.<span class=\"hljs-property\">insertId</span>)\n        }\n      )\n      connection.<span class=\"hljs-title function_\">release</span>()\n    })\n  })\n}\n\n<span class=\"hljs-comment\">//普通连接</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">queryTest</span> = (<span class=\"hljs-params\">sql</span>) =&gt; {\n  <span class=\"hljs-keyword\">var</span> connection = mysql.<span class=\"hljs-title function_\">createConnection</span>(dbConfig)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    connection.<span class=\"hljs-title function_\">connect</span>()\n    connection.<span class=\"hljs-title function_\">query</span>(sql, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, rows, fields</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">return</span> err ? <span class=\"hljs-title function_\">reject</span>(err) : <span class=\"hljs-title function_\">resolve</span>(rows)\n    })\n    connection.<span class=\"hljs-title function_\">end</span>()\n  })\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">query</span>: query,\n  <span class=\"hljs-attr\">queryTest</span>: queryTest,\n}\n</code></pre>\n<p>数据库连接测试代码 (使用了上面定义的run方法)</p>\n<pre><code class=\"hljs lang-js\">router.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res, next</span>) {\n  <span class=\"hljs-comment\">// 数据库操作测试</span>\n  F.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-keyword\">function</span>* () {\n    <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title class_\">Db</span>.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-string\">&#x27;SELECT * FROM fruitscities limit 5&#x27;</span>)\n    <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title class_\">Db</span>.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-string\">&#x27;SELECT * FROM fruitscities limit 5&#x27;</span>)\n    req.<span class=\"hljs-property\">session</span>.<span class=\"hljs-property\">admin</span> = <span class=\"hljs-string\">&#x27;111111111&#x27;</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(req.<span class=\"hljs-property\">session</span>.<span class=\"hljs-property\">admin</span>)\n    res.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">&#x27;index&#x27;</span>, { <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;Express```&#x27;</span> })\n  }, next)\n})\n\nrouter.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/test&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res, next</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(req.<span class=\"hljs-property\">baseUrl</span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(req.<span class=\"hljs-property\">route</span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(req.<span class=\"hljs-property\">path</span>)\n  <span class=\"hljs-comment\">// 数据库操作测试</span>\n  F.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-keyword\">function</span>* () {\n    <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title class_\">Db</span>.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-string\">&#x27;SELECT * FROM fruitscities limit 5&#x27;</span>)\n    <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title class_\">Db</span>.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-string\">&#x27;SELECT * FROM fruitscities limit 5&#x27;</span>)\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(req.<span class=\"hljs-property\">session</span>.<span class=\"hljs-property\">admin</span>)\n  }, next)\n})\n</code></pre>\n<h4 id=\"toc-5bd6e3\">使用nunjucks模板引擎</h4>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">//模板引擎</span>\n<span class=\"hljs-keyword\">var</span> nunjucks = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;nunjucks&#x27;</span>)\n<span class=\"hljs-comment\">// 模板引擎设置</span>\n<span class=\"hljs-keyword\">var</span> env = <span class=\"hljs-keyword\">new</span> nunjucks.<span class=\"hljs-title function_\">configure</span>(path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">&#x27;views&#x27;</span>), {\n  <span class=\"hljs-comment\">// 设置模板文件的目录，为views</span>\n  <span class=\"hljs-attr\">autoescape</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">express</span>: app,\n})\napp.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&#x27;view engine&#x27;</span>, <span class=\"hljs-string\">&#x27;html&#x27;</span>)\n</code></pre>\n<h4 id=\"toc-56ad29\">使用nunjucks模板标签（用于cms，文章，新闻展示等）</h4>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">//标签测试</span>\n<span class=\"hljs-keyword\">var</span> tags = <span class=\"hljs-built_in\">require</span>(path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Root</span>, <span class=\"hljs-string\">&#x27;./common/tags&#x27;</span>))\n\n<span class=\"hljs-comment\">//绑定标签</span>\nenv.<span class=\"hljs-title function_\">addExtension</span>(<span class=\"hljs-string\">&#x27;tagtest&#x27;</span>, <span class=\"hljs-keyword\">new</span> tags.<span class=\"hljs-title function_\">tagtest</span>())\ncommon / tags.<span class=\"hljs-property\">js</span>中的代码\n\n<span class=\"hljs-keyword\">var</span> tags\n<span class=\"hljs-keyword\">var</span> nunjucks = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;nunjucks&#x27;</span>)\ntags = {\n  <span class=\"hljs-attr\">tagtest</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">//tag标签测试</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">tags</span> = [<span class=\"hljs-string\">&#x27;tagtest&#x27;</span>]\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">parse</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">parser, nodes, lexer</span>) {\n      <span class=\"hljs-keyword\">let</span> tok = parser.<span class=\"hljs-title function_\">nextToken</span>()\n      <span class=\"hljs-keyword\">var</span> args = parser.<span class=\"hljs-title function_\">parseSignature</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">true</span>)\n      parser.<span class=\"hljs-title function_\">advanceAfterBlockEnd</span>(tok.<span class=\"hljs-property\">value</span>)\n      <span class=\"hljs-keyword\">let</span> body = parser.<span class=\"hljs-title function_\">parseUntilBlocks</span>(<span class=\"hljs-string\">&#x27;endtagtest&#x27;</span>) <span class=\"hljs-comment\">// 结束标签</span>\n      parser.<span class=\"hljs-title function_\">advanceAfterBlockEnd</span>()\n      <span class=\"hljs-comment\">//return new nodes.CallExtension(this, &#x27;run&#x27;, args);</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> nodes.<span class=\"hljs-title class_\">CallExtensionAsync</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&#x27;run&#x27;</span>, args, [body]) <span class=\"hljs-comment\">//异步调用</span>\n    }\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">run</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context, args, body, callback</span>) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(args)) <span class=\"hljs-comment\">//前台返回参数</span>\n      <span class=\"hljs-keyword\">var</span> data = [\n        {\n          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&#x27;北京&#x27;</span>,\n          <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-attr\">spelling</span>: <span class=\"hljs-string\">&#x27;BeiJing&#x27;</span>,\n          <span class=\"hljs-attr\">abbr</span>: <span class=\"hljs-string\">&#x27;BJ&#x27;</span>,\n          <span class=\"hljs-attr\">short</span>: <span class=\"hljs-string\">&#x27;B&#x27;</span>,\n        },\n        {\n          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\n          <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&#x27;上海&#x27;</span>,\n          <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-attr\">spelling</span>: <span class=\"hljs-string\">&#x27;ShangHai&#x27;</span>,\n          <span class=\"hljs-attr\">abbr</span>: <span class=\"hljs-string\">&#x27;SH&#x27;</span>,\n          <span class=\"hljs-attr\">short</span>: <span class=\"hljs-string\">&#x27;S&#x27;</span>,\n        },\n        {\n          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,\n          <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&#x27;天津&#x27;</span>,\n          <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-attr\">spelling</span>: <span class=\"hljs-string\">&#x27;TianJin&#x27;</span>,\n          <span class=\"hljs-attr\">abbr</span>: <span class=\"hljs-string\">&#x27;TJ&#x27;</span>,\n          <span class=\"hljs-attr\">short</span>: <span class=\"hljs-string\">&#x27;T&#x27;</span>,\n        },\n        {\n          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>,\n          <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&#x27;重庆&#x27;</span>,\n          <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-attr\">spelling</span>: <span class=\"hljs-string\">&#x27;ZhongQing&#x27;</span>,\n          <span class=\"hljs-attr\">abbr</span>: <span class=\"hljs-string\">&#x27;ZQ&#x27;</span>,\n          <span class=\"hljs-attr\">short</span>: <span class=\"hljs-string\">&#x27;Z&#x27;</span>,\n        },\n        {\n          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">5</span>,\n          <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&#x27;黑龙江&#x27;</span>,\n          <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-attr\">spelling</span>: <span class=\"hljs-string\">&#x27;HeiLongJiang&#x27;</span>,\n          <span class=\"hljs-attr\">abbr</span>: <span class=\"hljs-string\">&#x27;HLJ&#x27;</span>,\n          <span class=\"hljs-attr\">short</span>: <span class=\"hljs-string\">&#x27;H&#x27;</span>,\n        },\n      ]\n      context.<span class=\"hljs-property\">ctx</span>[<span class=\"hljs-string\">&#x27;list&#x27;</span>] = data <span class=\"hljs-comment\">//返回参数</span>\n      <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">new</span> nunjucks.<span class=\"hljs-property\">runtime</span>.<span class=\"hljs-title class_\">SafeString</span>(<span class=\"hljs-title function_\">body</span>())\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">callback</span>(<span class=\"hljs-literal\">null</span>, result)\n    }\n  },\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = tags\n</code></pre>\n<h4 id=\"toc-ddaedc\">页面中使用</h4>\n<pre><code class=\"hljs lang-js\">{% tagtest list=<span class=\"hljs-string\">&quot;key1=1,key2=2,key3=3,key4=4&quot;</span> %}\n\n  {% <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> list %}\n\n\n    {{ val.<span class=\"hljs-property\">id</span> }}:{{ val.<span class=\"hljs-property\">city</span>}}\n\n\n  {% endfor %}\n\n{% endtagtest %}\n\n\n{% tagtest key1=<span class=\"hljs-number\">1</span>,key2=<span class=\"hljs-number\">2</span>,key3=<span class=\"hljs-number\">3</span>,key4=<span class=\"hljs-number\">4</span> %}\n\n  {% <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> list %}\n\n\n    {{ val.<span class=\"hljs-property\">id</span> }}:{{ val.<span class=\"hljs-property\">city</span>}}\n\n\n  {% endfor %}\n\n{% endtagtest %}\n</code></pre>\n<h4 id=\"toc-eb85c0\">使用log4js进行日志记录</h4>\n<p>记录access日志</p>\n<pre><code class=\"hljs lang-js\">app.<span class=\"hljs-title function_\">use</span>(log4js.<span class=\"hljs-title function_\">connectLogger</span>(log4js.<span class=\"hljs-title function_\">getLogger</span>(<span class=\"hljs-string\">&#x27;log_access&#x27;</span>), { <span class=\"hljs-attr\">level</span>: <span class=\"hljs-string\">&#x27;INFO&#x27;</span> }))\n</code></pre>\n<p>配置文件 (配置可以根据需求修改)</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">db</span>: {\n    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n    <span class=\"hljs-attr\">user</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n    <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n    <span class=\"hljs-attr\">database</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n  },\n  <span class=\"hljs-attr\">cookieSession</span>: {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;session_uuice&#x27;</span>,\n    <span class=\"hljs-attr\">keys</span>: [<span class=\"hljs-string\">&#x27;key1&#x27;</span>, <span class=\"hljs-string\">&#x27;key2&#x27;</span>],\n    <span class=\"hljs-attr\">secret</span>: <span class=\"hljs-string\">&#x27;ksjf493248kjkj&#x27;</span>,\n  },\n  <span class=\"hljs-attr\">log4js</span>: {\n    <span class=\"hljs-attr\">appenders</span>: [\n      {\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;console&#x27;</span>,\n        <span class=\"hljs-attr\">category</span>: <span class=\"hljs-string\">&#x27;console&#x27;</span>,\n      },\n      {\n        <span class=\"hljs-attr\">category</span>: <span class=\"hljs-string\">&#x27;log_file&#x27;</span>,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;file&#x27;</span>,\n        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;./logs/log_file/file.log&#x27;</span>,\n        <span class=\"hljs-attr\">maxLogSize</span>: <span class=\"hljs-number\">104800</span>,\n        <span class=\"hljs-attr\">backups</span>: <span class=\"hljs-number\">100</span>,\n      },\n      {\n        <span class=\"hljs-attr\">category</span>: <span class=\"hljs-string\">&#x27;log_date&#x27;</span>,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;dateFile&#x27;</span>,\n        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;./logs/log_date/date&#x27;</span>,\n        <span class=\"hljs-attr\">alwaysIncludePattern</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">pattern</span>: <span class=\"hljs-string\">&#x27;-yyyy-MM-dd-hh.log&#x27;</span>,\n      },\n      {\n        <span class=\"hljs-attr\">category</span>: <span class=\"hljs-string\">&#x27;log_access&#x27;</span>,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;dateFile&#x27;</span>,\n        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;./logs/log_access/date&#x27;</span>,\n        <span class=\"hljs-attr\">alwaysIncludePattern</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">pattern</span>: <span class=\"hljs-string\">&#x27;-yyyy-MM-dd-hh.log&#x27;</span>,\n      },\n    ],\n    <span class=\"hljs-attr\">replaceConsole</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">levels</span>: {\n      <span class=\"hljs-attr\">log_file</span>: <span class=\"hljs-string\">&#x27;ALL&#x27;</span>,\n      <span class=\"hljs-attr\">console</span>: <span class=\"hljs-string\">&#x27;ALL&#x27;</span>,\n      <span class=\"hljs-attr\">log_date</span>: <span class=\"hljs-string\">&#x27;ALL&#x27;</span>,\n    },\n  },\n}\n</code></pre>\n<p>其他记录日志代码</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;log_start start!&#x27;</span>)\n\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">LogFile</span> = log4js.<span class=\"hljs-title function_\">getLogger</span>(<span class=\"hljs-string\">&#x27;log_file&#x27;</span>)\n\n<span class=\"hljs-title class_\">LogFile</span>.<span class=\"hljs-title function_\">trace</span>(<span class=\"hljs-string\">&#x27;This is a Log4js-Test&#x27;</span>)\n<span class=\"hljs-title class_\">LogFile</span>.<span class=\"hljs-title function_\">debug</span>(<span class=\"hljs-string\">&#x27;We Write Logs with log4js&#x27;</span>)\n<span class=\"hljs-title class_\">LogFile</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&#x27;You can find logs-files in the log-dir&#x27;</span>)\n<span class=\"hljs-title class_\">LogFile</span>.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">&#x27;log-dir is a configuration-item in the log4js.json&#x27;</span>)\n<span class=\"hljs-title class_\">LogFile</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&quot;In This Test log-dir is : &#x27;./logs/log_test/&#x27;&quot;</span>)\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;log_start end!&#x27;</span>)\n\n<span class=\"hljs-keyword\">var</span> log_date = log4js.<span class=\"hljs-title function_\">getLogger</span>(<span class=\"hljs-string\">&#x27;log_date&#x27;</span>)\n\nlog_date.<span class=\"hljs-title function_\">trace</span>(<span class=\"hljs-string\">&#x27;This is a Log4js-Test&#x27;</span>)\nlog_date.<span class=\"hljs-title function_\">debug</span>(<span class=\"hljs-string\">&#x27;We Write Logs with log4js&#x27;</span>)\nlog_date.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&#x27;You can find logs-files in the log-dir&#x27;</span>)\nlog_date.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">&#x27;log-dir is a configuration-item in the log4js.json&#x27;</span>)\nlog_date.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&quot;In This Test log-dir is : &#x27;./logs/log_test/&#x27;&quot;</span>)\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;log_date end!&#x27;</span>)\n</code></pre>\n<h4 id=\"toc-4a6b89\">socket通讯</h4>\n<p>使用socket.io\n在项目bin/www中添加</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">//添加socket.io支持</span>\n<span class=\"hljs-keyword\">var</span> io = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;socket.io&#x27;</span>)(server)\nio.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;connection&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">socket</span>) {\n  <span class=\"hljs-title class_\">Socket</span>(socket, io) <span class=\"hljs-comment\">//这里的Socket，就是app.js定义的全局变量</span>\n})\n</code></pre>\n<p>在app.js中添加事件逻辑</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">//socket事件方法</span>\n<span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">Socket</span> = <span class=\"hljs-built_in\">require</span>(path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Root</span>, <span class=\"hljs-string\">&#x27;./socket/socket&#x27;</span>))\n</code></pre>\n<p>错误处理\nPromise中的报错</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">run</span> = (<span class=\"hljs-params\">fn, next</span>) =&gt; {\n  <span class=\"hljs-title function_\">co</span>(fn).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">next</span>(err)\n  })\n}\n</code></pre>\n<p>其他报错</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">// 将404交给错误处理中间件</span>\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res, next</span>) {\n  <span class=\"hljs-keyword\">var</span> err = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Not Found&#x27;</span>)\n  err.<span class=\"hljs-property\">status</span> = <span class=\"hljs-number\">404</span>\n  <span class=\"hljs-title function_\">next</span>(err)\n})\n\n<span class=\"hljs-comment\">// 错误处理</span>\n\n<span class=\"hljs-comment\">//开发环境报错，显示错误堆栈</span>\n<span class=\"hljs-keyword\">if</span> (app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;env&#x27;</span>) === <span class=\"hljs-string\">&#x27;development&#x27;</span>) {\n  app.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, req, res, next</span>) {\n    res.<span class=\"hljs-title function_\">status</span>(err.<span class=\"hljs-property\">status</span> || <span class=\"hljs-number\">500</span>)\n    <span class=\"hljs-keyword\">if</span> (req.<span class=\"hljs-property\">xhr</span>) {\n      res.<span class=\"hljs-title function_\">json</span>({\n        <span class=\"hljs-attr\">status</span>: err.<span class=\"hljs-property\">status</span>,\n        <span class=\"hljs-attr\">message</span>: err.<span class=\"hljs-property\">message</span>,\n        <span class=\"hljs-attr\">error</span>: err.<span class=\"hljs-property\">stack</span>,\n      })\n    } <span class=\"hljs-keyword\">else</span> {\n      res.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">&#x27;error&#x27;</span>, {\n        <span class=\"hljs-attr\">status</span>: err.<span class=\"hljs-property\">status</span>,\n        <span class=\"hljs-attr\">message</span>: err.<span class=\"hljs-property\">message</span>,\n        <span class=\"hljs-attr\">error</span>: err,\n      })\n    }\n  })\n}\n\n<span class=\"hljs-comment\">//生产环境报错，不展示错误堆栈</span>\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, req, res, next</span>) {\n  res.<span class=\"hljs-title function_\">status</span>(err.<span class=\"hljs-property\">status</span> || <span class=\"hljs-number\">500</span>)\n  <span class=\"hljs-keyword\">if</span> (req.<span class=\"hljs-property\">xhr</span>) {\n    res.<span class=\"hljs-title function_\">json</span>({\n      <span class=\"hljs-attr\">status</span>: err.<span class=\"hljs-property\">status</span>,\n      <span class=\"hljs-attr\">message</span>: err.<span class=\"hljs-property\">message</span>,\n      <span class=\"hljs-attr\">error</span>: {},\n    })\n  } <span class=\"hljs-keyword\">else</span> {\n    res.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">&#x27;error&#x27;</span>, {\n      <span class=\"hljs-attr\">status</span>: err.<span class=\"hljs-property\">status</span>,\n      <span class=\"hljs-attr\">message</span>: err.<span class=\"hljs-property\">message</span>,\n      <span class=\"hljs-attr\">error</span>: {},\n    })\n  }\n})\n</code></pre>\n<h4 id=\"toc-0d98c7\">其他</h4>\n<p>待补充</p>\n",
      "mdContent": "\nNode.js 7.0发布之前，写一篇关于express的文章\n\n#### 项目创建\n\n使用express-generator\n\n- 使用npm install express-generator -g\n\n#### 代码修改自动重启\n\n使用nodemon\n\n- nodemon ./bin/www\n\n#### 全局设置\n\n<!-- more -->\n\n```js\n//加载配置项\nglobal.Config = require(path.resolve(Root, './config/config'))\n//通用方法(设置为全局对象，方便调用)\nglobal.F = require(path.resolve(Root, './common/funcs'))\n//socket事件方法\nglobal.Socket = require(path.resolve(Root, './socket/socket'))\n//加载所有的数据库model\nglobal.M = {}\n//model存储路径 （暂时不支持二级目录）\nvar modelsPath = path.resolve(Root, 'models')\nfs.readdirSync(modelsPath).forEach(function (name) {\n  if (path.extname(name) !== '') {\n    name = path.basename(name, '.js')\n    M[name] = require(path.resolve(modelsPath, name))\n  }\n})\n```\n\n使用co、Promise（bluebird）进行异步处理\n\n定义通用方法run实行Promise,并抛出错误\n\n```js\nlet run = (fn, next) => {\n  co(fn).catch((err) => {\n    next(err)\n  })\n}\n```\n\n#### 通用方法列表 (大部分抄袭thinkjs)\n\n```js\nmodule.exports = {\n  run: run,\n  promisify: promisify,\n  camelCase: camelCase,\n  defer: defer,\n  Class: Class,\n  extend: extend,\n  isClass: isClass,\n  isBoolean: isBoolean,\n  isNumber: isNumber,\n  isObject: isObject,\n  isString: isString,\n  isArray: isArray,\n  isFunction: isFunction,\n  isDate: util.isDate,\n  isRegExp: util.isRegExp,\n  isError: util.isError,\n  isIP: net.isIP,\n  isIP4: net.isIPv4,\n  isIP6: net.isIPv6,\n  isFile: isFile,\n  isFileAsync: isFileAsync,\n  isDir: isDir,\n  isDirAsync: isDirAsync,\n  isNumberString: isNumberString,\n  isPromise: isPromise,\n  isWritable: isWritable,\n  isBuffer: isBuffer,\n  isTrueEmpty: isTrueEmpty,\n  isEmpty: isEmpty,\n  clone: clone,\n  mkdir: mkdir,\n  rmdir: rmdir,\n  md5: md5,\n  chmod: chmod,\n  getFiles: getFiles,\n  escapeHtml: escapeHtml,\n  datetime: datetime,\n  getDateTime: getDateTime,\n  randomString: randomString,\n}\n```\n\n#### 数据库操作（mysql）\n\n简单的数据库查询，没有封装sql（懒）\n\n```js\nvar mysql = require('mysql')\nvar Promise = require('bluebird')\nvar dbConfig = Config.db\n\nvar pool = mysql.createPool(dbConfig)\n\n//使用连接池\nlet query = (sql) => {\n  return new Promise((resolve, reject) => {\n    pool.getConnection((err, connection) => {\n      connection.query(sql, function (err, result) {\n        return err ? reject(err) : resolve(result)\n      })\n      connection.release()\n    })\n  })\n}\n\nlet insert = (table, data) => {\n  return new Promise((resolve, reject) => {\n    pool.getConnection((err, connection) => {\n      connection.query(\n        'INSERT INTO {table} SET ?',\n        data,\n        function (err, result) {\n          return err ? reject(err) : resolve(result.insertId)\n        }\n      )\n      connection.release()\n    })\n  })\n}\n\n//普通连接\nlet queryTest = (sql) => {\n  var connection = mysql.createConnection(dbConfig)\n  return new Promise((resolve, reject) => {\n    connection.connect()\n    connection.query(sql, (err, rows, fields) => {\n      return err ? reject(err) : resolve(rows)\n    })\n    connection.end()\n  })\n}\n\nmodule.exports = {\n  query: query,\n  queryTest: queryTest,\n}\n```\n\n数据库连接测试代码 (使用了上面定义的run方法)\n\n````js\nrouter.get('/', function (req, res, next) {\n  // 数据库操作测试\n  F.run(function* () {\n    var result = yield Db.query('SELECT * FROM fruitscities limit 5')\n    var result = yield Db.query('SELECT * FROM fruitscities limit 5')\n    req.session.admin = '111111111'\n    console.log(req.session.admin)\n    res.render('index', { title: 'Express```' })\n  }, next)\n})\n\nrouter.get('/test', function (req, res, next) {\n  console.log(req.baseUrl)\n  console.log(req.route)\n  console.log(req.path)\n  // 数据库操作测试\n  F.run(function* () {\n    var result = yield Db.query('SELECT * FROM fruitscities limit 5')\n    var result = yield Db.query('SELECT * FROM fruitscities limit 5')\n    console.log(req.session.admin)\n  }, next)\n})\n````\n\n#### 使用nunjucks模板引擎\n\n```js\n//模板引擎\nvar nunjucks = require('nunjucks')\n// 模板引擎设置\nvar env = new nunjucks.configure(path.join(__dirname, 'views'), {\n  // 设置模板文件的目录，为views\n  autoescape: true,\n  watch: true,\n  express: app,\n})\napp.set('view engine', 'html')\n```\n\n#### 使用nunjucks模板标签（用于cms，文章，新闻展示等）\n\n```js\n//标签测试\nvar tags = require(path.resolve(Root, './common/tags'))\n\n//绑定标签\nenv.addExtension('tagtest', new tags.tagtest())\ncommon / tags.js中的代码\n\nvar tags\nvar nunjucks = require('nunjucks')\ntags = {\n  tagtest: function () {\n    //tag标签测试\n    this.tags = ['tagtest']\n    this.parse = function (parser, nodes, lexer) {\n      let tok = parser.nextToken()\n      var args = parser.parseSignature(null, true)\n      parser.advanceAfterBlockEnd(tok.value)\n      let body = parser.parseUntilBlocks('endtagtest') // 结束标签\n      parser.advanceAfterBlockEnd()\n      //return new nodes.CallExtension(this, 'run', args);\n      return new nodes.CallExtensionAsync(this, 'run', args, [body]) //异步调用\n    }\n    this.run = function (context, args, body, callback) {\n      console.log(JSON.stringify(args)) //前台返回参数\n      var data = [\n        {\n          id: 1,\n          city: '北京',\n          parent: 0,\n          spelling: 'BeiJing',\n          abbr: 'BJ',\n          short: 'B',\n        },\n        {\n          id: 2,\n          city: '上海',\n          parent: 0,\n          spelling: 'ShangHai',\n          abbr: 'SH',\n          short: 'S',\n        },\n        {\n          id: 3,\n          city: '天津',\n          parent: 0,\n          spelling: 'TianJin',\n          abbr: 'TJ',\n          short: 'T',\n        },\n        {\n          id: 4,\n          city: '重庆',\n          parent: 0,\n          spelling: 'ZhongQing',\n          abbr: 'ZQ',\n          short: 'Z',\n        },\n        {\n          id: 5,\n          city: '黑龙江',\n          parent: 0,\n          spelling: 'HeiLongJiang',\n          abbr: 'HLJ',\n          short: 'H',\n        },\n      ]\n      context.ctx['list'] = data //返回参数\n      let result = new nunjucks.runtime.SafeString(body())\n      return callback(null, result)\n    }\n  },\n}\n\nmodule.exports = tags\n```\n\n#### 页面中使用\n\n```js\n{% tagtest list=\"key1=1,key2=2,key3=3,key4=4\" %}\n\n  {% for val in list %}\n\n\n    {{ val.id }}:{{ val.city}}\n\n\n  {% endfor %}\n\n{% endtagtest %}\n\n\n{% tagtest key1=1,key2=2,key3=3,key4=4 %}\n\n  {% for val in list %}\n\n\n    {{ val.id }}:{{ val.city}}\n\n\n  {% endfor %}\n\n{% endtagtest %}\n```\n\n#### 使用log4js进行日志记录\n\n记录access日志\n\n```js\napp.use(log4js.connectLogger(log4js.getLogger('log_access'), { level: 'INFO' }))\n```\n\n配置文件 (配置可以根据需求修改)\n\n```js\nmodule.exports = {\n  db: {\n    host: '',\n    user: '',\n    password: '',\n    database: '',\n  },\n  cookieSession: {\n    name: 'session_uuice',\n    keys: ['key1', 'key2'],\n    secret: 'ksjf493248kjkj',\n  },\n  log4js: {\n    appenders: [\n      {\n        type: 'console',\n        category: 'console',\n      },\n      {\n        category: 'log_file',\n        type: 'file',\n        filename: './logs/log_file/file.log',\n        maxLogSize: 104800,\n        backups: 100,\n      },\n      {\n        category: 'log_date',\n        type: 'dateFile',\n        filename: './logs/log_date/date',\n        alwaysIncludePattern: true,\n        pattern: '-yyyy-MM-dd-hh.log',\n      },\n      {\n        category: 'log_access',\n        type: 'dateFile',\n        filename: './logs/log_access/date',\n        alwaysIncludePattern: true,\n        pattern: '-yyyy-MM-dd-hh.log',\n      },\n    ],\n    replaceConsole: true,\n    levels: {\n      log_file: 'ALL',\n      console: 'ALL',\n      log_date: 'ALL',\n    },\n  },\n}\n```\n\n其他记录日志代码\n\n```js\nconsole.log('log_start start!')\n\nvar LogFile = log4js.getLogger('log_file')\n\nLogFile.trace('This is a Log4js-Test')\nLogFile.debug('We Write Logs with log4js')\nLogFile.info('You can find logs-files in the log-dir')\nLogFile.warn('log-dir is a configuration-item in the log4js.json')\nLogFile.error(\"In This Test log-dir is : './logs/log_test/'\")\n\nconsole.log('log_start end!')\n\nvar log_date = log4js.getLogger('log_date')\n\nlog_date.trace('This is a Log4js-Test')\nlog_date.debug('We Write Logs with log4js')\nlog_date.info('You can find logs-files in the log-dir')\nlog_date.warn('log-dir is a configuration-item in the log4js.json')\nlog_date.error(\"In This Test log-dir is : './logs/log_test/'\")\n\nconsole.log('log_date end!')\n```\n\n#### socket通讯\n\n使用socket.io\n在项目bin/www中添加\n\n```js\n//添加socket.io支持\nvar io = require('socket.io')(server)\nio.on('connection', function (socket) {\n  Socket(socket, io) //这里的Socket，就是app.js定义的全局变量\n})\n```\n\n在app.js中添加事件逻辑\n\n```js\n//socket事件方法\nglobal.Socket = require(path.resolve(Root, './socket/socket'))\n```\n\n错误处理\nPromise中的报错\n\n```js\nlet run = (fn, next) => {\n  co(fn).catch((err) => {\n    next(err)\n  })\n}\n```\n\n其他报错\n\n```js\n// 将404交给错误处理中间件\napp.use(function (req, res, next) {\n  var err = new Error('Not Found')\n  err.status = 404\n  next(err)\n})\n\n// 错误处理\n\n//开发环境报错，显示错误堆栈\nif (app.get('env') === 'development') {\n  app.use(function (err, req, res, next) {\n    res.status(err.status || 500)\n    if (req.xhr) {\n      res.json({\n        status: err.status,\n        message: err.message,\n        error: err.stack,\n      })\n    } else {\n      res.render('error', {\n        status: err.status,\n        message: err.message,\n        error: err,\n      })\n    }\n  })\n}\n\n//生产环境报错，不展示错误堆栈\napp.use(function (err, req, res, next) {\n  res.status(err.status || 500)\n  if (req.xhr) {\n    res.json({\n      status: err.status,\n      message: err.message,\n      error: {},\n    })\n  } else {\n    res.render('error', {\n      status: err.status,\n      message: err.message,\n      error: {},\n    })\n  }\n})\n```\n\n#### 其他\n\n待补充\n",
      "toc": "<ul>\n<li><a href=\"#toc-05102a\">项目创建</a></li>\n<li><a href=\"#toc-000d55\">代码修改自动重启</a></li>\n<li><a href=\"#toc-188768\">全局设置</a></li>\n<li><a href=\"#toc-aae641\">通用方法列表 (大部分抄袭thinkjs)</a></li>\n<li><a href=\"#toc-415823\">数据库操作（mysql）</a></li>\n<li><a href=\"#toc-5bd6e3\">使用nunjucks模板引擎</a></li>\n<li><a href=\"#toc-56ad29\">使用nunjucks模板标签（用于cms，文章，新闻展示等）</a></li>\n<li><a href=\"#toc-ddaedc\">页面中使用</a></li>\n<li><a href=\"#toc-eb85c0\">使用log4js进行日志记录</a></li>\n<li><a href=\"#toc-4a6b89\">socket通讯</a></li>\n<li><a href=\"#toc-0d98c7\">其他</a></li>\n</ul>\n",
      "created_timestamp": 1493499150000,
      "updated_timestamp": 1493499150000,
      "url": "express-shi-jian",
      "symbolsCount": 6927,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 9192,
      "readingTime": 46
    },
    {
      "id": "1ef3b5e4-51b0-6ce0-b727-e8921436fadf",
      "title": "短 URL 系统设计",
      "alias": null,
      "cover": null,
      "created_time": "2017-04-29T20:52:14.000Z",
      "date": "2017-04-29T20:52:14.000Z",
      "updated_time": "2017-04-29T20:52:14.000Z",
      "updated": "2017-04-29T20:52:14.000Z",
      "categories": [
        "notes"
      ],
      "tags": null,
      "excerpt": "原理通过发号策略，给每一个过来的长地址，发一个号即可，小型系统直接用mysql的自增索引就搞定了。如果是大型应用，可以考虑各种分布式key-value系统做发号器。不停的自增就行了。实现方式将长连接保存到数据库，获得自增ID，将自增ID转化为62进制，拼接到链接后面通过访问短连接获取到62进制字符串",
      "published": true,
      "content": "<h3 id=\"toc-b6724c\">原理</h3>\n<p>通过发号策略，给每一个过来的长地址，发一个号即可，小型系统直接用mysql的自增索引就搞定了。如果是大型应用，可以考虑各种分布式key-value系统做发号器。不停的自增就行了。</p>\n<!-- more -->\n\n<h3 id=\"toc-3e9100\">实现方式</h3>\n<ul>\n<li>将长连接保存到数据库，获得自增ID，将自增ID转化为62进制，拼接到链接后面</li>\n<li>通过访问短连接获取到62进制字符串，转化为10进制，通过查询获得长链接进行跳转</li>\n</ul>\n<h3 id=\"toc-afda0a\">这里有几个问题</h3>\n<ul>\n<li>1、62进制如何用数据库或者KV存储来做</li>\n</ul>\n<p>这个问题就不展开了，自行解决</p>\n<ul>\n<li>2、如何保证同一个长地址，每次转出来都是一样的短地址</li>\n</ul>\n<p>上面的发号原理中，是不判断长地址是否已经转过的。同一个长地址，产生多条短地址记录，这明显是浪费空间的。\n目前没有好的解决方法</p>\n<h3 id=\"toc-ff0abc\">3、跳转用301还是302</h3>\n<p>301是永久重定向，302是临时重定向。短地址一经生成就不会变化，所以用301是符合http语义的。同时对服务器压力也会有一定减少。</p>\n<p>但是如果使用了301，我们就无法统计到短地址被点击的次数了。而这个点击次数是一个非常有意思的大数据分析数据源。能够分析出的东西非常非常多。</p>\n<p>对于搜索引擎SEO优化来说301跳转更合适</p>\n<p>10进制62进制互转 （php实现）</p>\n<p>这里用了php手册中的一个方法，支持任意进制的转换\n点击跳转到php手册</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convBase</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$numberInput</span>, <span class=\"hljs-variable\">$fromBaseInput</span>, <span class=\"hljs-variable\">$toBaseInput</span></span>)\n</span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$fromBaseInput</span>==<span class=\"hljs-variable\">$toBaseInput</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$numberInput</span>;\n    <span class=\"hljs-variable\">$fromBase</span> = <span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-variable\">$fromBaseInput</span>,<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-variable\">$toBase</span> = <span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-variable\">$toBaseInput</span>,<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-variable\">$number</span> = <span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-variable\">$numberInput</span>,<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-variable\">$fromLen</span>=<span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-variable\">$fromBaseInput</span>);\n    <span class=\"hljs-variable\">$toLen</span>=<span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-variable\">$toBaseInput</span>);\n    <span class=\"hljs-variable\">$numberLen</span>=<span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-variable\">$numberInput</span>);\n    <span class=\"hljs-variable\">$retval</span>=<span class=\"hljs-string\">&#x27;&#x27;</span>;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$toBaseInput</span> == <span class=\"hljs-string\">&#x27;0123456789&#x27;</span>)\n    {\n        <span class=\"hljs-variable\">$retval</span>=<span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">1</span>;<span class=\"hljs-variable\">$i</span> &lt;= <span class=\"hljs-variable\">$numberLen</span>; <span class=\"hljs-variable\">$i</span>++)\n            <span class=\"hljs-variable\">$retval</span> = <span class=\"hljs-title function_ invoke__\">bcadd</span>(<span class=\"hljs-variable\">$retval</span>, <span class=\"hljs-title function_ invoke__\">bcmul</span>(<span class=\"hljs-title function_ invoke__\">array_search</span>(<span class=\"hljs-variable\">$number</span>[<span class=\"hljs-variable\">$i</span>-<span class=\"hljs-number\">1</span>], <span class=\"hljs-variable\">$fromBase</span>),<span class=\"hljs-title function_ invoke__\">bcpow</span>(<span class=\"hljs-variable\">$fromLen</span>,<span class=\"hljs-variable\">$numberLen</span>-<span class=\"hljs-variable\">$i</span>)));\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$retval</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$fromBaseInput</span> != <span class=\"hljs-string\">&#x27;0123456789&#x27;</span>)\n        <span class=\"hljs-variable\">$base10</span>=<span class=\"hljs-title function_ invoke__\">convBase</span>(<span class=\"hljs-variable\">$numberInput</span>, <span class=\"hljs-variable\">$fromBaseInput</span>, <span class=\"hljs-string\">&#x27;0123456789&#x27;</span>);\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-variable\">$base10</span> = <span class=\"hljs-variable\">$numberInput</span>;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$base10</span>&lt;<span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-variable\">$toBaseInput</span>))\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$toBase</span>[<span class=\"hljs-variable\">$base10</span>];\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-variable\">$base10</span> != <span class=\"hljs-string\">&#x27;0&#x27;</span>)\n    {\n        <span class=\"hljs-variable\">$retval</span> = <span class=\"hljs-variable\">$toBase</span>[<span class=\"hljs-title function_ invoke__\">bcmod</span>(<span class=\"hljs-variable\">$base10</span>,<span class=\"hljs-variable\">$toLen</span>)].<span class=\"hljs-variable\">$retval</span>;\n        <span class=\"hljs-variable\">$base10</span> = <span class=\"hljs-title function_ invoke__\">bcdiv</span>(<span class=\"hljs-variable\">$base10</span>,<span class=\"hljs-variable\">$toLen</span>,<span class=\"hljs-number\">0</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$retval</span>;\n}\n<span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n<h3 id=\"toc-6c9ae3\">用法：</h3>\n<ul>\n<li>1、十进制转62进制</li>\n</ul>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">convBase</span>(<span class=\"hljs-string\">&#x27;1234567890987654321&#x27;</span>,<span class=\"hljs-string\">&#x27;0123456789&#x27;</span>,<span class=\"hljs-string\">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>);\n<span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n<ul>\n<li>2、62进制转十进制</li>\n</ul>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">convBase</span>(<span class=\"hljs-string\">&#x27;1tckI2JJZDz&#x27;</span>,<span class=\"hljs-string\">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>,<span class=\"hljs-string\">&#x27;0123456789&#x27;</span>);\n<span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n<p>这只是一个基本的思路，对于一般的使用也够了</p>\n<!-- 测试缓存失效机制 -->\n",
      "mdContent": "\n### 原理\n\n通过发号策略，给每一个过来的长地址，发一个号即可，小型系统直接用mysql的自增索引就搞定了。如果是大型应用，可以考虑各种分布式key-value系统做发号器。不停的自增就行了。\n\n<!-- more -->\n\n### 实现方式\n\n- 将长连接保存到数据库，获得自增ID，将自增ID转化为62进制，拼接到链接后面\n- 通过访问短连接获取到62进制字符串，转化为10进制，通过查询获得长链接进行跳转\n\n### 这里有几个问题\n\n- 1、62进制如何用数据库或者KV存储来做\n\n这个问题就不展开了，自行解决\n\n- 2、如何保证同一个长地址，每次转出来都是一样的短地址\n\n上面的发号原理中，是不判断长地址是否已经转过的。同一个长地址，产生多条短地址记录，这明显是浪费空间的。\n目前没有好的解决方法\n\n### 3、跳转用301还是302\n\n301是永久重定向，302是临时重定向。短地址一经生成就不会变化，所以用301是符合http语义的。同时对服务器压力也会有一定减少。\n\n但是如果使用了301，我们就无法统计到短地址被点击的次数了。而这个点击次数是一个非常有意思的大数据分析数据源。能够分析出的东西非常非常多。\n\n对于搜索引擎SEO优化来说301跳转更合适\n\n10进制62进制互转 （php实现）\n\n这里用了php手册中的一个方法，支持任意进制的转换\n点击跳转到php手册\n\n```php\n<?php\nfunction convBase($numberInput, $fromBaseInput, $toBaseInput)\n{\n    if ($fromBaseInput==$toBaseInput) return $numberInput;\n    $fromBase = str_split($fromBaseInput,1);\n    $toBase = str_split($toBaseInput,1);\n    $number = str_split($numberInput,1);\n    $fromLen=strlen($fromBaseInput);\n    $toLen=strlen($toBaseInput);\n    $numberLen=strlen($numberInput);\n    $retval='';\n    if ($toBaseInput == '0123456789')\n    {\n        $retval=0;\n        for ($i = 1;$i <= $numberLen; $i++)\n            $retval = bcadd($retval, bcmul(array_search($number[$i-1], $fromBase),bcpow($fromLen,$numberLen-$i)));\n        return $retval;\n    }\n    if ($fromBaseInput != '0123456789')\n        $base10=convBase($numberInput, $fromBaseInput, '0123456789');\n    else\n        $base10 = $numberInput;\n    if ($base10<strlen($toBaseInput))\n        return $toBase[$base10];\n    while($base10 != '0')\n    {\n        $retval = $toBase[bcmod($base10,$toLen)].$retval;\n        $base10 = bcdiv($base10,$toLen,0);\n    }\n    return $retval;\n}\n?>\n```\n\n### 用法：\n\n- 1、十进制转62进制\n\n```php\n<?php\necho convBase('1234567890987654321','0123456789','0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n?>\n```\n\n- 2、62进制转十进制\n\n```php\n<?php\necho convBase('1tckI2JJZDz','0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ','0123456789');\n?>\n```\n\n这只是一个基本的思路，对于一般的使用也够了\n\n<!-- 测试缓存失效机制 -->\n",
      "toc": "<ul>\n<li><a href=\"#toc-b6724c\">原理</a></li>\n<li><a href=\"#toc-3e9100\">实现方式</a></li>\n<li><a href=\"#toc-afda0a\">这里有几个问题</a></li>\n<li><a href=\"#toc-ff0abc\">3、跳转用301还是302</a></li>\n<li><a href=\"#toc-6c9ae3\">用法：</a></li>\n</ul>\n",
      "created_timestamp": 1493499134000,
      "updated_timestamp": 1493499134000,
      "url": "duan-url-xi-tong-she-ji",
      "symbolsCount": 613,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "wordCount": 682,
      "readingTime": 4
    }
  ],
  "pages": [
    {
      "id": "1ef3b581-c05d-65c0-ba84-f6ba83dd79a5",
      "title": "about",
      "alias": "about",
      "cover": null,
      "created_time": "2017-04-28T15:04:10.000Z",
      "date": "2017-04-28T15:04:10.000Z",
      "updated_time": "2017-04-28T15:04:10.000Z",
      "updated": "2017-04-28T15:04:10.000Z",
      "categories": null,
      "tags": null,
      "excerpt": null,
      "published": true,
      "content": "<h2 id=\"toc-6483e3\">关于我</h2>\n<ul>\n<li>我是一位专注于前端领域的开发者。我在工作中经常遇到各种问题，并且喜欢记录下来，以便日后复盘和分享经验。</li>\n<li>我也整理了一些学习笔记，包括学习过程中的重点、难点以及解决方案，这些笔记对我个人的学习和成长起到了很大的帮助。</li>\n</ul>\n<h2 id=\"toc-b868c8\">我的主要技术栈包括</h2>\n<ul>\n<li>Vue、Vue Router、Vuex、Axios、ES6、Sass/Less：这些是我常用的前端技术，用于构建现代化的、响应式的 Web 应用程序。</li>\n<li>Angular、RxJS（目前在工作中使用）：使用 Angular 框架和 RxJS 响应式编程库。</li>\n<li>Node.js：在后端开发中使用 Node.js，并熟悉 Express、Koa、Nestjs 等框架。这使我能够构建高性能的服务器端应用程序。</li>\n<li>MySQL、Redis：熟悉关系型数据库 MySQL 和内存缓存数据库 Redis，用于数据存储和缓存。</li>\n<li>ECharts：使用 ECharts 来开发可视化大屏，通过数据可视化的方式向用户展示复杂的信息和趋势。</li>\n<li>Electron：使用 Electron 框架来开发桌面端应用程序，将前端技术运用到桌面应用的开发中。</li>\n</ul>\n",
      "mdContent": "\n## 关于我\n\n- 我是一位专注于前端领域的开发者。我在工作中经常遇到各种问题，并且喜欢记录下来，以便日后复盘和分享经验。\n- 我也整理了一些学习笔记，包括学习过程中的重点、难点以及解决方案，这些笔记对我个人的学习和成长起到了很大的帮助。\n\n## 我的主要技术栈包括\n\n- Vue、Vue Router、Vuex、Axios、ES6、Sass/Less：这些是我常用的前端技术，用于构建现代化的、响应式的 Web 应用程序。\n- Angular、RxJS（目前在工作中使用）：使用 Angular 框架和 RxJS 响应式编程库。\n- Node.js：在后端开发中使用 Node.js，并熟悉 Express、Koa、Nestjs 等框架。这使我能够构建高性能的服务器端应用程序。\n- MySQL、Redis：熟悉关系型数据库 MySQL 和内存缓存数据库 Redis，用于数据存储和缓存。\n- ECharts：使用 ECharts 来开发可视化大屏，通过数据可视化的方式向用户展示复杂的信息和趋势。\n- Electron：使用 Electron 框架来开发桌面端应用程序，将前端技术运用到桌面应用的开发中。\n",
      "toc": "<ul>\n<li><a href=\"#toc-6483e3\">关于我</a></li>\n<li><a href=\"#toc-b868c8\">我的主要技术栈包括</a></li>\n</ul>\n",
      "created_timestamp": 1493391850000,
      "updated_timestamp": 1493391850000,
      "url": "about",
      "symbolsCount": 465,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ]
    },
    {
      "id": "ae642236-22f8-5905-94c8-27b338c18dd0",
      "title": "Lumos - 基于 Bun 的高性能静态博客生成器",
      "alias": "lumos-introduce",
      "cover": null,
      "created_time": "2025-09-03T09:56:09.000Z",
      "date": "2025-09-03T09:56:09.000Z",
      "updated_time": "2025-09-03T09:56:09.000Z",
      "updated": "2025-09-03T09:56:09.000Z",
      "categories": [
        "技术",
        "开源项目"
      ],
      "tags": [
        "Bun",
        "TypeScript",
        "Jsx",
        "静态博客",
        "SSR"
      ],
      "excerpt": "Lumos 是一个基于 Bun 运行时的高性能静态博客生成器，使用现代化的技术栈，专为低配置服务器优化，提供轻量级博客解决方案。",
      "published": true,
      "content": "<h1 id=\"toc-779598\">Lumos - 基于 Bun 的高性能静态博客生成器</h1>\n<p>Lumos 是一个现代化的静态博客生成器，基于 Bun 运行时构建，采用 TypeScript + React + JSX 的技术栈，为开发者提供高性能、易扩展的博客解决方案。</p>\n<h2 id=\"toc-6df5e0\">📚 相关文档</h2>\n<p>想要深入了解 Lumos 的更多功能和使用方法？请查看以下文档：</p>\n<ul>\n<li><a href=\"../README.md\">README 文档</a> - 项目完整文档</li>\n<li><a href=\"./lumos-cli-usage.md\">Lumos CLI 使用指南</a> - CLI 命令的详细使用方法</li>\n<li><a href=\"./lumos-development.md\">Lumos 二次开发教程</a> - 插件和主题开发的详细教程</li>\n</ul>\n<h2 id=\"toc-58f301\">🎯 项目概述</h2>\n<h3 id=\"toc-57ae37\">核心价值</h3>\n<p>Lumos 旨在为开发者提供一个高性能、易用且可扩展的静态博客解决方案：</p>\n<ul>\n<li>🚀 <strong>极致性能</strong>: 基于 Bun 运行时，冷启动时间 &lt; 100ms</li>\n<li>⚛️ <strong>现代化技术栈</strong>: TypeScript + React + JSX，提供优秀的开发体验</li>\n<li>🔧 <strong>易扩展性</strong>: 插件系统和主题系统，轻松定制功能和外观</li>\n<li>📱 <strong>响应式设计</strong>: 移动端友好的界面设计</li>\n</ul>\n<h3 id=\"toc-62b37e\">适用场景</h3>\n<ul>\n<li>👨‍💻 <strong>个人技术博客</strong>: 适合需要高性能博客系统的内容创作者</li>\n<li>📚 <strong>技术文档</strong>: 项目文档、API 文档的理想选择</li>\n<li>🏢 <strong>企业网站</strong>: 公司官网、产品介绍等静态网站</li>\n<li>🌟 <strong>开源项目</strong>: 需要项目文档和展示的开源项目</li>\n</ul>\n<h2 id=\"toc-0b8008\">🚀 核心特性</h2>\n<h3 id=\"toc-a378b1\">极速性能</h3>\n<ul>\n<li><strong>Bun 运行时</strong>: 基于 Bun 的极速启动，冷启动时间 &lt; 100ms</li>\n<li><strong>智能缓存</strong>: 基于 MD5 的文件缓存机制，只对变更文件重新解析</li>\n<li><strong>SSR 渲染</strong>: 服务端渲染，SEO 友好，首屏加载速度快</li>\n</ul>\n<h3 id=\"toc-44838c\">现代化技术栈</h3>\n<ul>\n<li><strong>TypeScript</strong>: 完整的类型安全，提供优秀的开发体验</li>\n<li><strong>React + JSX</strong>: 使用 React 组件替代传统模板引擎，更灵活易维护</li>\n<li><strong>Tailwind CSS</strong>: 内置现代化 CSS 框架，响应式设计</li>\n<li><strong>FileSystemRouter</strong>: 基于 Bun 的自动路由系统</li>\n</ul>\n<h3 id=\"toc-8552b2\">开发体验</h3>\n<ul>\n<li><strong>热更新</strong>: 文件变化自动重新生成，支持监听模式</li>\n<li><strong>CLI 工具</strong>: 完整的命令行工具链，支持创建、构建、服务等功能</li>\n<li><strong>零配置</strong>: 开箱即用，一键启动开发环境</li>\n</ul>\n<h3 id=\"toc-ebf95d\">扩展能力</h3>\n<ul>\n<li><strong>🔌 插件系统</strong>: 基于生命周期钩子的可扩展插件架构</li>\n<li><strong>🎨 主题系统</strong>: 支持自定义主题和组件的灵活主题机制</li>\n</ul>\n<h2 id=\"toc-44614a\">🏗️ 项目架构</h2>\n<h3 id=\"toc-90030e\">核心组件</h3>\n<h4 id=\"toc-26c55c\">1. 数据生成器 (DataGenerator)</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// src/generator.ts</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataGenerator</span> {\n  <span class=\"hljs-comment\">// 解析 Markdown 文件</span>\n  <span class=\"hljs-comment\">// 提取分类和标签</span>\n  <span class=\"hljs-comment\">// 生成关联关系</span>\n  <span class=\"hljs-comment\">// 构建完整的数据结构</span>\n}\n</code></pre>\n<p><strong>功能特性:</strong></p>\n<ul>\n<li>📄 解析 Markdown、JSON、YAML 文件</li>\n<li>🏷️ 自动提取文章分类和标签</li>\n<li>🔗 生成文章-分类、文章-标签关联关系</li>\n<li>👥 支持多作者系统</li>\n<li>⚡ 智能缓存机制</li>\n</ul>\n<h4 id=\"toc-65c0be\">2. 文件解析器 (Parser)</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// src/parser.ts</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Parser</span> {\n  <span class=\"hljs-comment\">// 解析 Markdown 文件</span>\n  <span class=\"hljs-comment\">// 支持 Front Matter</span>\n  <span class=\"hljs-comment\">// 代码高亮和 TOC 生成</span>\n  <span class=\"hljs-comment\">// 缓存机制</span>\n}\n</code></pre>\n<p><strong>解析能力:</strong></p>\n<ul>\n<li>📝 Markdown 文件解析（支持 Front Matter）</li>\n<li>🎨 代码高亮（Highlight.js）</li>\n<li>📋 自动生成 TOC 目录</li>\n<li>📄 摘要自动提取</li>\n<li>📊 字数统计和阅读时间计算</li>\n<li>🔤 中文 URL 转拼音</li>\n</ul>\n<h4 id=\"toc-307eb9\">3. HTTP 服务器 (LumosServer)</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// src/server.ts</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LumosServer</span> {\n  <span class=\"hljs-comment\">// 基于 Bun FileSystemRouter</span>\n  <span class=\"hljs-comment\">// SSR 服务端渲染</span>\n  <span class=\"hljs-comment\">// 静态资源服务</span>\n  <span class=\"hljs-comment\">// API 接口</span>\n}\n</code></pre>\n<p><strong>服务特性:</strong></p>\n<ul>\n<li>🛣️ 基于 Bun FileSystemRouter 的自动路由</li>\n<li>⚡ SSR 服务端渲染</li>\n<li>📁 静态资源管理和服务</li>\n<li>🔌 RESTful API 接口</li>\n<li>🔥 热更新支持</li>\n</ul>\n<h4 id=\"toc-71c98d\">4. 布局组件 (Layout)</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// src/components/Layout.tsx</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Layout</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;{\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">children</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">ReactNode</span>\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DatabaseSchema</span>\n}&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ title, children, data }</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 响应式布局</span>\n  <span class=\"hljs-comment\">// 主题切换</span>\n  <span class=\"hljs-comment\">// SEO 优化</span>\n}\n</code></pre>\n<p><strong>UI 特性:</strong></p>\n<ul>\n<li>📱 响应式设计，移动端友好</li>\n<li>🌓 深色/浅色主题切换</li>\n<li>🔍 SEO 优化（meta 标签、结构化数据）</li>\n<li>🔎 搜索功能</li>\n<li>✨ 现代化 UI 设计</li>\n</ul>\n<h4 id=\"toc-a5ae54\">5. Bundler HTML 系统</h4>\n<p>Bundler HTML 系统使用 Bun 的 HTML bundling 功能创建高性能页面，优先级高于主题路由。</p>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// bundler/html/app.tsx</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// React 组件</span>\n  <span class=\"hljs-comment\">// 高性能页面</span>\n  <span class=\"hljs-comment\">// 独立于主题系统</span>\n}\n</code></pre>\n<p><strong>系统特性:</strong></p>\n<ul>\n<li>⚡ 高优先级页面处理</li>\n<li>📦 独立的构建系统</li>\n<li>🚀 更快的页面加载速度</li>\n<li>🔧 灵活的页面创建方式</li>\n</ul>\n<h3 id=\"toc-a1c40d\">插件系统架构</h3>\n<p>Lumos 提供了强大的插件系统，允许开发者通过插件扩展博客的功能。插件系统基于生命周期钩子，可以在博客生成和运行的不同阶段执行自定义逻辑。</p>\n<h4 id=\"toc-2af444\">核心概念</h4>\n<ul>\n<li><strong>生命周期钩子</strong>: 插件可以在特定的生命周期阶段执行代码</li>\n<li><strong>配置管理</strong>: 插件可以通过配置文件进行配置</li>\n<li><strong>易于扩展</strong>: 插件可以轻松地添加新功能</li>\n</ul>\n<h4 id=\"toc-484bc6\">生命周期钩子</h4>\n<p>插件支持以下生命周期钩子：</p>\n<ul>\n<li><code>onGenerateStart(generator)</code>: 数据生成开始前调用</li>\n<li><code>onGenerateEnd(data)</code>: 数据生成结束后调用</li>\n<li><code>onParseFile(filePath, content, type)</code>: 解析文件时调用</li>\n<li><code>onRender(html, data)</code>: 渲染页面时调用</li>\n<li><code>onServerStart(server)</code>: 服务器启动时调用</li>\n</ul>\n<h4 id=\"toc-4e530c\">插件配置</h4>\n<p>插件配置在项目根目录的 <code>lumos.config.json</code> 文件中：</p>\n<pre><code class=\"hljs lang-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;plugins&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;example-plugin&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;enabled&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;options&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">&quot;customOption&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;value&quot;</span>\n      <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h4 id=\"toc-f42010\">创建插件</h4>\n<p>插件是一个导出默认对象的 TypeScript 文件，放置在 <code>plugins/</code> 目录中：</p>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// plugins/example-plugin.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Plugin</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../src/types.ts&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">examplePlugin</span>: <span class=\"hljs-title class_\">Plugin</span> = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;example-plugin&#x27;</span>,\n  <span class=\"hljs-attr\">version</span>: <span class=\"hljs-string\">&#x27;1.0.0&#x27;</span>,\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;示例插件&#x27;</span>,\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onGenerateStart</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">generator</span>: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;生成开始&#x27;</span>)\n  },\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onGenerateEnd</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;生成结束&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> data\n  },\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onParseFile</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">filePath</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;post&#x27;</span> | <span class=\"hljs-string\">&#x27;page&#x27;</span> | <span class=\"hljs-string\">&#x27;author&#x27;</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`解析文件: <span class=\"hljs-subst\">${filePath}</span>`</span>)\n    <span class=\"hljs-keyword\">return</span> content\n  },\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onRender</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">html</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;渲染页面&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> html\n  },\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onServerStart</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">server</span>: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;服务器启动&#x27;</span>)\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> examplePlugin\n</code></pre>\n<p>如需了解更多插件开发的详细信息，请参阅 <a href=\"./lumos-development.md\">Lumos 二次开发教程</a>。</p>\n<h3 id=\"toc-b84798\">主题系统架构</h3>\n<p>Lumos 支持灵活的主题系统，允许开发者创建和使用自定义主题来改变博客的外观和功能。</p>\n<h4 id=\"toc-7c62d4\">主题结构</h4>\n<p>主题文件位于 <code>themes/</code> 目录中，每个主题都有自己的目录：</p>\n<pre><code class=\"hljs lang-nix\">themes<span class=\"hljs-symbol\">/</span>\n└── default<span class=\"hljs-symbol\">/</span>              <span class=\"hljs-comment\"># 主题目录</span>\n    ├── assets<span class=\"hljs-symbol\">/</span>           <span class=\"hljs-comment\"># 主题静态资源</span>\n    │   ├── styles<span class=\"hljs-symbol\">/</span>       <span class=\"hljs-comment\"># 样式文件</span>\n    │   └── images<span class=\"hljs-symbol\">/</span>       <span class=\"hljs-comment\"># 图片资源</span>\n    ├── components<span class=\"hljs-symbol\">/</span>       <span class=\"hljs-comment\"># 主题组件</span>\n    │   └── Layout.tsx    <span class=\"hljs-comment\"># 布局组件</span>\n    └── routes<span class=\"hljs-symbol\">/</span>           <span class=\"hljs-comment\"># 主题路由</span>\n        ├── index.tsx     <span class=\"hljs-comment\"># 首页</span>\n        ├── posts.tsx     <span class=\"hljs-comment\"># 文章列表页</span>\n        └── post<span class=\"hljs-operator\">/</span>[url].tsx <span class=\"hljs-comment\"># 文章详情页</span>\n</code></pre>\n<h4 id=\"toc-5af700\">主题配置</h4>\n<p>主题配置在 <code>lumos.config.json</code> 文件中：</p>\n<pre><code class=\"hljs lang-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;theme&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;default&quot;</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h4 id=\"toc-24522c\">创建主题</h4>\n<p>创建新主题只需在 <code>themes/</code> 目录中创建新文件夹，并按照主题结构添加文件。</p>\n<h5 id=\"toc-4c87fa\">1. 创建主题目录结构</h5>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-built_in\">mkdir</span> -p themes/my-theme/{assets,components,routes}\n</code></pre>\n<h5 id=\"toc-a3e09a\">2. 创建布局组件</h5>\n<pre><code class=\"hljs lang-tsx\"><span class=\"hljs-comment\">// themes/my-theme/components/Layout.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">LayoutProps</span> {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">children</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">ReactNode</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Layout</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;<span class=\"hljs-title class_\">LayoutProps</span>&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ title, children }</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>{title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/assets/styles/theme.css&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>我的自定义主题<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>{children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-symbol\">&amp;copy;</span> 2024 我的博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<h5 id=\"toc-7a21a8\">3. 创建路由页面</h5>\n<pre><code class=\"hljs lang-tsx\"><span class=\"hljs-comment\">// themes/my-theme/routes/index.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { renderToString } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom/server&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Layout</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../components/Layout.tsx&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">HomePage</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =&gt;</span> (\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>欢迎来到我的博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>这是使用自定义主题的首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">_request</span>: <span class=\"hljs-title class_\">Request</span></span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Response</span>&gt; {\n  <span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-string\">&#x27;&lt;!DOCTYPE html&gt;&#x27;</span> + <span class=\"hljs-title function_\">renderToString</span>(<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-title class_\">HomePage</span>))\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(html, {\n    <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;text/html; charset=utf-8&#x27;</span> }\n  })\n}\n</code></pre>\n<h5 id=\"toc-0e7d36\">4. 配置主题</h5>\n<p>在 <code>lumos.config.json</code> 中切换到新主题：</p>\n<pre><code class=\"hljs lang-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;theme&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;my-theme&quot;</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h4 id=\"toc-732485\">主题继承</h4>\n<p>主题支持继承机制，可以通过扩展默认主题来创建自定义主题，只需覆盖需要修改的部分。</p>\n<p>如需了解更多主题开发的详细信息，请参阅 <a href=\"./lumos-development.md\">Lumos 二次开发教程</a>。</p>\n<h3 id=\"toc-b50650\">路由系统</h3>\n<h4 id=\"toc-327555\">前台页面路由</h4>\n<ul>\n<li><strong>核心页面</strong>: <code>/</code> (首页), <code>/posts</code> (文章列表), <code>/archives</code> (归档), <code>/about</code> (关于), <code>/links</code> (友链)</li>\n<li><strong>内容页面</strong>: <code>/post/:alias</code> (文章详情), <code>/page/:alias</code> (页面详情)</li>\n<li><strong>分类标签</strong>: <code>/category/:name</code>, <code>/tag/:name</code> (分类/标签页面)</li>\n<li><strong>特殊页面</strong>: <code>/404</code>, <code>/error</code> (错误页面)</li>\n<li><strong>数据接口</strong>: <code>/rss.xml</code>, <code>/sitemap.xml</code>, <code>/api/*</code> (API 接口)</li>\n</ul>\n<h4 id=\"toc-b46466\">动态路由特性</h4>\n<ul>\n<li>🏷️ 支持别名系统 (<code>alias</code>)</li>\n<li>🔤 中文 URL 自动转拼音</li>\n<li>🔍 SEO 友好的 URL 结构</li>\n<li>🚫 智能 404 处理</li>\n</ul>\n<h3 id=\"toc-0fea7c\">数据结构</h3>\n<h4 id=\"toc-fd6737\">核心实体</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">DatabaseSchema</span> {\n  <span class=\"hljs-attr\">posts</span>: <span class=\"hljs-variable constant_\">POST</span>[] <span class=\"hljs-comment\">// 文章列表</span>\n  <span class=\"hljs-attr\">pages</span>: <span class=\"hljs-variable constant_\">PAGE</span>[] <span class=\"hljs-comment\">// 页面列表</span>\n  <span class=\"hljs-attr\">authors</span>: <span class=\"hljs-variable constant_\">AUTHOR</span>[] <span class=\"hljs-comment\">// 作者列表</span>\n  <span class=\"hljs-attr\">categories</span>: <span class=\"hljs-variable constant_\">CATEGORY</span>[] <span class=\"hljs-comment\">// 分类列表</span>\n  <span class=\"hljs-attr\">tags</span>: <span class=\"hljs-variable constant_\">TAG</span>[] <span class=\"hljs-comment\">// 标签列表</span>\n  <span class=\"hljs-attr\">postCategories</span>: <span class=\"hljs-variable constant_\">POST_CATEGORY</span>[] <span class=\"hljs-comment\">// 文章-分类关联</span>\n  <span class=\"hljs-attr\">postTags</span>: <span class=\"hljs-variable constant_\">POST_TAG</span>[] <span class=\"hljs-comment\">// 文章-标签关联</span>\n  [<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">unknown</span> <span class=\"hljs-comment\">// 其他配置数据</span>\n}\n</code></pre>\n<h4 id=\"toc-fcbca3\">文章结构</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-keyword\">interface</span> POST {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// 唯一标识</span>\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// 标题</span>\n  <span class=\"hljs-attr\">alias</span>?: <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// 别名（用于 URL）</span>\n  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// HTML 内容</span>\n  <span class=\"hljs-attr\">mdContent</span>: <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// 原始 Markdown</span>\n  <span class=\"hljs-attr\">excerpt</span>: <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// 摘要</span>\n  <span class=\"hljs-attr\">date</span>: <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// 发布日期</span>\n  <span class=\"hljs-attr\">published</span>: <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-comment\">// 是否发布</span>\n  <span class=\"hljs-attr\">featured</span>: <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-comment\">// 是否置顶</span>\n  <span class=\"hljs-attr\">author</span>?: <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// 作者</span>\n  <span class=\"hljs-attr\">categories</span>: <span class=\"hljs-built_in\">string</span>[] <span class=\"hljs-comment\">// 分类</span>\n  <span class=\"hljs-attr\">tags</span>: <span class=\"hljs-built_in\">string</span>[] <span class=\"hljs-comment\">// 标签</span>\n  <span class=\"hljs-attr\">wordCount</span>: <span class=\"hljs-built_in\">number</span> <span class=\"hljs-comment\">// 字数统计</span>\n  <span class=\"hljs-attr\">readingTime</span>: <span class=\"hljs-built_in\">number</span> <span class=\"hljs-comment\">// 阅读时间</span>\n  <span class=\"hljs-attr\">toc</span>?: <span class=\"hljs-built_in\">any</span>[] <span class=\"hljs-comment\">// 目录结构</span>\n  <span class=\"hljs-attr\">url</span>: <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// 友好 URL</span>\n  <span class=\"hljs-attr\">createdAt</span>: <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// 创建时间</span>\n  <span class=\"hljs-attr\">updatedAt</span>: <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// 更新时间</span>\n}\n</code></pre>\n<h2 id=\"toc-271987\">📦 Bundler HTML 页面 (高优先级)</h2>\n<p>Lumos 支持使用 Bun 的 HTML bundling 功能创建页面，这种方式的优先级比主题中的 route 更高。这对于需要更高性能或特殊功能的页面非常有用。</p>\n<h3 id=\"toc-b3fbd1\">工作原理</h3>\n<ol>\n<li>在 <code>bundler/html/</code> 目录中创建 HTML 文件和相关的 TypeScript/JSX 组件</li>\n<li>运行 <code>bun run build:html</code> 命令构建这些页面</li>\n<li>构建后的页面会被放置在 <code>bundler/dist/</code> 目录中</li>\n<li>服务器会优先检查请求的路径是否在 <code>bundler/dist/</code> 目录中存在对应文件</li>\n<li>如果存在，则直接返回该文件，不会经过主题路由处理</li>\n</ol>\n<h3 id=\"toc-0d08a0\">优先级说明</h3>\n<p>Bundler HTML 页面具有比主题路由更高的优先级。当用户访问一个 URL 时，服务器会按照以下顺序处理：</p>\n<ol>\n<li>首先检查是否是静态资源（/assets/*）</li>\n<li>然后检查是否在 <code>bundler/dist/</code> 目录中存在对应的文件</li>\n<li>最后才检查主题路由（themes/*/routes/）</li>\n</ol>\n<p>这意味着如果在 <code>bundler/dist/</code> 中有一个 <code>about.html</code> 文件，它会优先于 <code>themes/default/routes/about.tsx</code> 被访问。</p>\n<h3 id=\"toc-7efcb0\">使用场景</h3>\n<ul>\n<li>创建高性能的静态页面</li>\n<li>构建独立的 landing pages</li>\n<li>实现特殊的前端交互效果</li>\n<li>创建演示页面或测试页面</li>\n<li>需要绕过主题系统的特殊页面</li>\n</ul>\n<h2 id=\"toc-48ada1\">🛠️ 技术栈详解</h2>\n<h3 id=\"toc-5045dc\">运行时环境</h3>\n<ul>\n<li>🚀 <strong>Bun</strong>: 现代化的 JavaScript 运行时，提供极速的启动和构建性能</li>\n<li>🔒 <strong>TypeScript</strong>: 类型安全的 JavaScript 超集，提供完整的类型系统</li>\n</ul>\n<h3 id=\"toc-40d75c\">前端技术</h3>\n<ul>\n<li>⚛️ <strong>React 18</strong>: 现代化的 UI 库，支持 SSR</li>\n<li>🔧 <strong>JSX</strong>: 在 TypeScript 中直接编写 React 组件</li>\n<li>🎨 <strong>Tailwind CSS</strong>: 实用优先的 CSS 框架</li>\n<li>📱 <strong>响应式设计</strong>: 移动端优先的设计理念</li>\n</ul>\n<h3 id=\"toc-9198a2\">构建工具</h3>\n<ul>\n<li>🛠️ <strong>Bun 内置构建器</strong>: 无需额外配置的构建系统</li>\n<li>🎨 <strong>PostCSS</strong>: CSS 后处理器，支持 Tailwind CSS</li>\n<li>🔍 <strong>ESLint + Prettier</strong>: 代码质量和格式化工具</li>\n</ul>\n<h3 id=\"toc-832705\">内容处理</h3>\n<ul>\n<li>📝 <strong>Marked</strong>: Markdown 解析器</li>\n<li>📄 <strong>Gray Matter</strong>: Front Matter 解析</li>\n<li>🎨 <strong>Highlight.js</strong>: 代码语法高亮</li>\n<li>🔤 <strong>Pinyin</strong>: 中文转拼音工具</li>\n</ul>\n<h3 id=\"toc-1209e3\">数据存储</h3>\n<ul>\n<li>📄 <strong>JSON</strong>: 轻量级数据存储格式</li>\n<li>📁 <strong>文件系统</strong>: 基于文件的内容管理</li>\n<li>⚡ <strong>缓存系统</strong>: MD5 哈希缓存机制</li>\n</ul>\n<h2 id=\"toc-bb08cb\">🚀 使用场景</h2>\n<h3 id=\"toc-9cfd28\">个人博客</h3>\n<ul>\n<li>📝 技术博客、生活记录</li>\n<li>👥 支持多作者协作</li>\n<li>🏷️ 完整的分类标签系统</li>\n<li>🔍 SEO 优化，搜索引擎友好</li>\n</ul>\n<h3 id=\"toc-94cc0c\">技术文档</h3>\n<ul>\n<li>📚 项目文档、API 文档</li>\n<li>🎨 支持代码高亮和目录生成</li>\n<li>📱 响应式设计，移动端友好</li>\n<li>📡 支持 RSS 订阅</li>\n</ul>\n<h3 id=\"toc-66a0c6\">企业网站</h3>\n<ul>\n<li>🏢 公司官网、产品介绍</li>\n<li>📢 新闻发布、公告系统</li>\n<li>📄 多页面支持</li>\n<li>⚡ 高性能，适合低配置服务器</li>\n</ul>\n<h2 id=\"toc-e8a427\">🔧 开发工作流</h2>\n<h3 id=\"toc-325269\">1. 内容创建</h3>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 创建新文章</span>\nlumos new post <span class=\"hljs-string\">&quot;我的第一篇文章&quot;</span>\n\n<span class=\"hljs-comment\"># 创建新页面</span>\nlumos new page <span class=\"hljs-string\">&quot;关于我们&quot;</span>\n\n<span class=\"hljs-comment\"># 创建新作者</span>\nlumos new author <span class=\"hljs-string\">&quot;张三&quot;</span>\n</code></pre>\n<p>关于 CLI 命令的详细使用方法，请参阅 <a href=\"./lumos-cli-usage.md\">Lumos CLI 使用指南</a>。</p>\n<h3 id=\"toc-f4782b\">2. 开发调试</h3>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 启动开发服务器（热更新）</span>\nbun run dev\n\n<span class=\"hljs-comment\"># 或手动步骤</span>\nlumos gen &amp;&amp; lumos server -w\n</code></pre>\n<h3 id=\"toc-76b8db\">3. 构建部署</h3>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 完整构建</span>\nlumos build\n\n<span class=\"hljs-comment\"># 生成数据文件</span>\nlumos gen\n</code></pre>\n<h2 id=\"toc-fb5d8c\">📊 性能优势</h2>\n<h3 id=\"toc-c96de5\">启动性能</h3>\n<ul>\n<li><strong>冷启动</strong>: &lt; 100ms（相比 Node.js 提升 3-5 倍）</li>\n<li><strong>热重载</strong>: 文件变化检测 &lt; 50ms</li>\n<li><strong>内存占用</strong>: 相比传统方案减少 30-50%</li>\n</ul>\n<h3 id=\"toc-261bdc\">构建性能</h3>\n<ul>\n<li><strong>增量构建</strong>: 只处理变更文件</li>\n<li><strong>并行处理</strong>: 多文件并行解析</li>\n<li><strong>智能缓存</strong>: 避免重复计算</li>\n</ul>\n<h3 id=\"toc-e103f1\">运行时性能</h3>\n<ul>\n<li><strong>SSR 渲染</strong>: 首屏加载速度快</li>\n<li><strong>静态资源</strong>: CDN 友好的资源管理</li>\n<li><strong>SEO 优化</strong>: 搜索引擎友好</li>\n</ul>\n<h2 id=\"toc-384590\">🌟 项目亮点</h2>\n<h3 id=\"toc-d03ead\">1. 现代化架构</h3>\n<ul>\n<li>🚀 基于 Bun 的下一代运行时</li>\n<li>🔒 TypeScript 全覆盖，类型安全</li>\n<li>⚛️ React + JSX 的组件化开发</li>\n<li>🔧 函数式编程范式</li>\n</ul>\n<h3 id=\"toc-dcf4ba\">2. 开发体验</h3>\n<ul>\n<li>⚡ 零配置启动</li>\n<li>🔥 热更新开发</li>\n<li>🛠️ 完整的 CLI 工具链</li>\n<li>💡 丰富的错误提示</li>\n</ul>\n<h3 id=\"toc-c59be6\">3. 性能优化</h3>\n<ul>\n<li>🧠 智能缓存机制</li>\n<li>⚡ 增量构建</li>\n<li>📦 资源压缩和优化</li>\n<li>📱 响应式设计</li>\n</ul>\n<h3 id=\"toc-33e59c\">4. 扩展性</h3>\n<ul>\n<li>🔌 插件化架构</li>\n<li>🎨 主题系统支持</li>\n<li>🧩 自定义组件</li>\n<li>🔗 API 接口扩展</li>\n</ul>\n<h2 id=\"toc-510bed\">🎯 适用人群</h2>\n<ul>\n<li>👨‍💻 <strong>前端开发者</strong>: 熟悉 React/TypeScript 的开发者</li>\n<li>✍️ <strong>博客作者</strong>: 需要高性能博客系统的内容创作者</li>\n<li>👥 <strong>技术团队</strong>: 需要技术文档和博客的企业团队</li>\n<li>🌟 <strong>开源项目</strong>: 需要项目文档和展示的开源项目</li>\n</ul>\n<h2 id=\"toc-6c5f63\">🔮 未来规划</h2>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 🎨 多主题系统支持</li>\n<li><input disabled=\"\" type=\"checkbox\"> 🖼️ 图片优化和懒加载</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 🔍 全文搜索功能</li>\n<li><input disabled=\"\" type=\"checkbox\"> 📱 PWA 支持</li>\n<li><input disabled=\"\" type=\"checkbox\"> 🌍 多语言国际化</li>\n<li><input disabled=\"\" type=\"checkbox\"> 💬 评论系统集成</li>\n<li><input disabled=\"\" type=\"checkbox\"> 📊 性能监控和分析</li>\n<li><input disabled=\"\" type=\"checkbox\"> 🐳 Docker 容器化支持</li>\n</ul>\n<p>Lumos 致力于为开发者提供最现代化的静态博客解决方案，通过 Bun 运行时和 React 技术栈，实现极致的性能和开发体验。</p>\n",
      "mdContent": "\n# Lumos - 基于 Bun 的高性能静态博客生成器\n\nLumos 是一个现代化的静态博客生成器，基于 Bun 运行时构建，采用 TypeScript + React + JSX 的技术栈，为开发者提供高性能、易扩展的博客解决方案。\n\n## 📚 相关文档\n\n想要深入了解 Lumos 的更多功能和使用方法？请查看以下文档：\n\n- [README 文档](../README.md) - 项目完整文档\n- [Lumos CLI 使用指南](./lumos-cli-usage.md) - CLI 命令的详细使用方法\n- [Lumos 二次开发教程](./lumos-development.md) - 插件和主题开发的详细教程\n\n## 🎯 项目概述\n\n### 核心价值\n\nLumos 旨在为开发者提供一个高性能、易用且可扩展的静态博客解决方案：\n\n- 🚀 **极致性能**: 基于 Bun 运行时，冷启动时间 < 100ms\n- ⚛️ **现代化技术栈**: TypeScript + React + JSX，提供优秀的开发体验\n- 🔧 **易扩展性**: 插件系统和主题系统，轻松定制功能和外观\n- 📱 **响应式设计**: 移动端友好的界面设计\n\n### 适用场景\n\n- 👨‍💻 **个人技术博客**: 适合需要高性能博客系统的内容创作者\n- 📚 **技术文档**: 项目文档、API 文档的理想选择\n- 🏢 **企业网站**: 公司官网、产品介绍等静态网站\n- 🌟 **开源项目**: 需要项目文档和展示的开源项目\n\n## 🚀 核心特性\n\n### 极速性能\n\n- **Bun 运行时**: 基于 Bun 的极速启动，冷启动时间 < 100ms\n- **智能缓存**: 基于 MD5 的文件缓存机制，只对变更文件重新解析\n- **SSR 渲染**: 服务端渲染，SEO 友好，首屏加载速度快\n\n### 现代化技术栈\n\n- **TypeScript**: 完整的类型安全，提供优秀的开发体验\n- **React + JSX**: 使用 React 组件替代传统模板引擎，更灵活易维护\n- **Tailwind CSS**: 内置现代化 CSS 框架，响应式设计\n- **FileSystemRouter**: 基于 Bun 的自动路由系统\n\n### 开发体验\n\n- **热更新**: 文件变化自动重新生成，支持监听模式\n- **CLI 工具**: 完整的命令行工具链，支持创建、构建、服务等功能\n- **零配置**: 开箱即用，一键启动开发环境\n\n### 扩展能力\n\n- **🔌 插件系统**: 基于生命周期钩子的可扩展插件架构\n- **🎨 主题系统**: 支持自定义主题和组件的灵活主题机制\n\n## 🏗️ 项目架构\n\n### 核心组件\n\n#### 1. 数据生成器 (DataGenerator)\n\n```typescript\n// src/generator.ts\nexport class DataGenerator {\n  // 解析 Markdown 文件\n  // 提取分类和标签\n  // 生成关联关系\n  // 构建完整的数据结构\n}\n```\n\n**功能特性:**\n\n- 📄 解析 Markdown、JSON、YAML 文件\n- 🏷️ 自动提取文章分类和标签\n- 🔗 生成文章-分类、文章-标签关联关系\n- 👥 支持多作者系统\n- ⚡ 智能缓存机制\n\n#### 2. 文件解析器 (Parser)\n\n```typescript\n// src/parser.ts\nexport class Parser {\n  // 解析 Markdown 文件\n  // 支持 Front Matter\n  // 代码高亮和 TOC 生成\n  // 缓存机制\n}\n```\n\n**解析能力:**\n\n- 📝 Markdown 文件解析（支持 Front Matter）\n- 🎨 代码高亮（Highlight.js）\n- 📋 自动生成 TOC 目录\n- 📄 摘要自动提取\n- 📊 字数统计和阅读时间计算\n- 🔤 中文 URL 转拼音\n\n#### 3. HTTP 服务器 (LumosServer)\n\n```typescript\n// src/server.ts\nexport class LumosServer {\n  // 基于 Bun FileSystemRouter\n  // SSR 服务端渲染\n  // 静态资源服务\n  // API 接口\n}\n```\n\n**服务特性:**\n\n- 🛣️ 基于 Bun FileSystemRouter 的自动路由\n- ⚡ SSR 服务端渲染\n- 📁 静态资源管理和服务\n- 🔌 RESTful API 接口\n- 🔥 热更新支持\n\n#### 4. 布局组件 (Layout)\n\n```typescript\n// src/components/Layout.tsx\nexport const Layout: React.FC<{\n  title: string\n  children: React.ReactNode\n  data: DatabaseSchema\n}> = ({ title, children, data }) => {\n  // 响应式布局\n  // 主题切换\n  // SEO 优化\n}\n```\n\n**UI 特性:**\n\n- 📱 响应式设计，移动端友好\n- 🌓 深色/浅色主题切换\n- 🔍 SEO 优化（meta 标签、结构化数据）\n- 🔎 搜索功能\n- ✨ 现代化 UI 设计\n\n#### 5. Bundler HTML 系统\n\nBundler HTML 系统使用 Bun 的 HTML bundling 功能创建高性能页面，优先级高于主题路由。\n\n```typescript\n// bundler/html/app.tsx\nexport default function App() {\n  // React 组件\n  // 高性能页面\n  // 独立于主题系统\n}\n```\n\n**系统特性:**\n\n- ⚡ 高优先级页面处理\n- 📦 独立的构建系统\n- 🚀 更快的页面加载速度\n- 🔧 灵活的页面创建方式\n\n### 插件系统架构\n\nLumos 提供了强大的插件系统，允许开发者通过插件扩展博客的功能。插件系统基于生命周期钩子，可以在博客生成和运行的不同阶段执行自定义逻辑。\n\n#### 核心概念\n\n- **生命周期钩子**: 插件可以在特定的生命周期阶段执行代码\n- **配置管理**: 插件可以通过配置文件进行配置\n- **易于扩展**: 插件可以轻松地添加新功能\n\n#### 生命周期钩子\n\n插件支持以下生命周期钩子：\n\n- `onGenerateStart(generator)`: 数据生成开始前调用\n- `onGenerateEnd(data)`: 数据生成结束后调用\n- `onParseFile(filePath, content, type)`: 解析文件时调用\n- `onRender(html, data)`: 渲染页面时调用\n- `onServerStart(server)`: 服务器启动时调用\n\n#### 插件配置\n\n插件配置在项目根目录的 `lumos.config.json` 文件中：\n\n```json\n{\n  \"plugins\": {\n    \"example-plugin\": {\n      \"enabled\": true,\n      \"options\": {\n        \"customOption\": \"value\"\n      }\n    }\n  }\n}\n```\n\n#### 创建插件\n\n插件是一个导出默认对象的 TypeScript 文件，放置在 `plugins/` 目录中：\n\n```typescript\n// plugins/example-plugin.ts\nimport { Plugin } from '../src/types.ts'\n\nconst examplePlugin: Plugin = {\n  name: 'example-plugin',\n  version: '1.0.0',\n  description: '示例插件',\n\n  async onGenerateStart(generator: any) {\n    console.log('生成开始')\n  },\n\n  async onGenerateEnd(data: any) {\n    console.log('生成结束')\n    return data\n  },\n\n  async onParseFile(filePath: string, content: string, type: 'post' | 'page' | 'author') {\n    console.log(`解析文件: ${filePath}`)\n    return content\n  },\n\n  async onRender(html: string, data: any) {\n    console.log('渲染页面')\n    return html\n  },\n\n  async onServerStart(server: any) {\n    console.log('服务器启动')\n  }\n}\n\nexport default examplePlugin\n```\n\n如需了解更多插件开发的详细信息，请参阅 [Lumos 二次开发教程](./lumos-development.md)。\n\n### 主题系统架构\n\nLumos 支持灵活的主题系统，允许开发者创建和使用自定义主题来改变博客的外观和功能。\n\n#### 主题结构\n\n主题文件位于 `themes/` 目录中，每个主题都有自己的目录：\n\n```\nthemes/\n└── default/              # 主题目录\n    ├── assets/           # 主题静态资源\n    │   ├── styles/       # 样式文件\n    │   └── images/       # 图片资源\n    ├── components/       # 主题组件\n    │   └── Layout.tsx    # 布局组件\n    └── routes/           # 主题路由\n        ├── index.tsx     # 首页\n        ├── posts.tsx     # 文章列表页\n        └── post/[url].tsx # 文章详情页\n```\n\n#### 主题配置\n\n主题配置在 `lumos.config.json` 文件中：\n\n```json\n{\n  \"theme\": \"default\"\n}\n```\n\n#### 创建主题\n\n创建新主题只需在 `themes/` 目录中创建新文件夹，并按照主题结构添加文件。\n\n##### 1. 创建主题目录结构\n\n```bash\nmkdir -p themes/my-theme/{assets,components,routes}\n```\n\n##### 2. 创建布局组件\n\n```tsx\n// themes/my-theme/components/Layout.tsx\nimport * as React from 'react'\n\ninterface LayoutProps {\n  title: string\n  children: React.ReactNode\n}\n\nexport const Layout: React.FC<LayoutProps> = ({ title, children }) => {\n  return (\n    <html>\n      <head>\n        <title>{title}</title>\n        <link rel=\"stylesheet\" href=\"/assets/styles/theme.css\" />\n      </head>\n      <body>\n        <header>\n          <h1>我的自定义主题</h1>\n        </header>\n        <main>{children}</main>\n        <footer>\n          <p>&copy; 2024 我的博客</p>\n        </footer>\n      </body>\n    </html>\n  )\n}\n```\n\n##### 3. 创建路由页面\n\n```tsx\n// themes/my-theme/routes/index.tsx\nimport * as React from 'react'\nimport { renderToString } from 'react-dom/server'\nimport { Layout } from '../components/Layout.tsx'\n\nconst HomePage: React.FC = () => (\n  <div>\n    <h2>欢迎来到我的博客</h2>\n    <p>这是使用自定义主题的首页</p>\n  </div>\n)\n\nexport default async function handler(_request: Request): Promise<Response> {\n  const html = '<!DOCTYPE html>' + renderToString(React.createElement(HomePage))\n  return new Response(html, {\n    headers: { 'Content-Type': 'text/html; charset=utf-8' }\n  })\n}\n```\n\n##### 4. 配置主题\n\n在 `lumos.config.json` 中切换到新主题：\n\n```json\n{\n  \"theme\": \"my-theme\"\n}\n```\n\n#### 主题继承\n\n主题支持继承机制，可以通过扩展默认主题来创建自定义主题，只需覆盖需要修改的部分。\n\n如需了解更多主题开发的详细信息，请参阅 [Lumos 二次开发教程](./lumos-development.md)。\n\n### 路由系统\n\n#### 前台页面路由\n\n- **核心页面**: `/` (首页), `/posts` (文章列表), `/archives` (归档), `/about` (关于), `/links` (友链)\n- **内容页面**: `/post/:alias` (文章详情), `/page/:alias` (页面详情)\n- **分类标签**: `/category/:name`, `/tag/:name` (分类/标签页面)\n- **特殊页面**: `/404`, `/error` (错误页面)\n- **数据接口**: `/rss.xml`, `/sitemap.xml`, `/api/*` (API 接口)\n\n#### 动态路由特性\n\n- 🏷️ 支持别名系统 (`alias`)\n- 🔤 中文 URL 自动转拼音\n- 🔍 SEO 友好的 URL 结构\n- 🚫 智能 404 处理\n\n### 数据结构\n\n#### 核心实体\n\n```typescript\ninterface DatabaseSchema {\n  posts: POST[] // 文章列表\n  pages: PAGE[] // 页面列表\n  authors: AUTHOR[] // 作者列表\n  categories: CATEGORY[] // 分类列表\n  tags: TAG[] // 标签列表\n  postCategories: POST_CATEGORY[] // 文章-分类关联\n  postTags: POST_TAG[] // 文章-标签关联\n  [key: string]: unknown // 其他配置数据\n}\n```\n\n#### 文章结构\n\n```typescript\ninterface POST {\n  id: string // 唯一标识\n  title: string // 标题\n  alias?: string // 别名（用于 URL）\n  content: string // HTML 内容\n  mdContent: string // 原始 Markdown\n  excerpt: string // 摘要\n  date: string // 发布日期\n  published: boolean // 是否发布\n  featured: boolean // 是否置顶\n  author?: string // 作者\n  categories: string[] // 分类\n  tags: string[] // 标签\n  wordCount: number // 字数统计\n  readingTime: number // 阅读时间\n  toc?: any[] // 目录结构\n  url: string // 友好 URL\n  createdAt: string // 创建时间\n  updatedAt: string // 更新时间\n}\n```\n\n## 📦 Bundler HTML 页面 (高优先级)\n\nLumos 支持使用 Bun 的 HTML bundling 功能创建页面，这种方式的优先级比主题中的 route 更高。这对于需要更高性能或特殊功能的页面非常有用。\n\n### 工作原理\n\n1. 在 `bundler/html/` 目录中创建 HTML 文件和相关的 TypeScript/JSX 组件\n2. 运行 `bun run build:html` 命令构建这些页面\n3. 构建后的页面会被放置在 `bundler/dist/` 目录中\n4. 服务器会优先检查请求的路径是否在 `bundler/dist/` 目录中存在对应文件\n5. 如果存在，则直接返回该文件，不会经过主题路由处理\n\n### 优先级说明\n\nBundler HTML 页面具有比主题路由更高的优先级。当用户访问一个 URL 时，服务器会按照以下顺序处理：\n\n1. 首先检查是否是静态资源（/assets/\\*）\n2. 然后检查是否在 `bundler/dist/` 目录中存在对应的文件\n3. 最后才检查主题路由（themes/\\*/routes/）\n\n这意味着如果在 `bundler/dist/` 中有一个 `about.html` 文件，它会优先于 `themes/default/routes/about.tsx` 被访问。\n\n### 使用场景\n\n- 创建高性能的静态页面\n- 构建独立的 landing pages\n- 实现特殊的前端交互效果\n- 创建演示页面或测试页面\n- 需要绕过主题系统的特殊页面\n\n## 🛠️ 技术栈详解\n\n### 运行时环境\n\n- 🚀 **Bun**: 现代化的 JavaScript 运行时，提供极速的启动和构建性能\n- 🔒 **TypeScript**: 类型安全的 JavaScript 超集，提供完整的类型系统\n\n### 前端技术\n\n- ⚛️ **React 18**: 现代化的 UI 库，支持 SSR\n- 🔧 **JSX**: 在 TypeScript 中直接编写 React 组件\n- 🎨 **Tailwind CSS**: 实用优先的 CSS 框架\n- 📱 **响应式设计**: 移动端优先的设计理念\n\n### 构建工具\n\n- 🛠️ **Bun 内置构建器**: 无需额外配置的构建系统\n- 🎨 **PostCSS**: CSS 后处理器，支持 Tailwind CSS\n- 🔍 **ESLint + Prettier**: 代码质量和格式化工具\n\n### 内容处理\n\n- 📝 **Marked**: Markdown 解析器\n- 📄 **Gray Matter**: Front Matter 解析\n- 🎨 **Highlight.js**: 代码语法高亮\n- 🔤 **Pinyin**: 中文转拼音工具\n\n### 数据存储\n\n- 📄 **JSON**: 轻量级数据存储格式\n- 📁 **文件系统**: 基于文件的内容管理\n- ⚡ **缓存系统**: MD5 哈希缓存机制\n\n## 🚀 使用场景\n\n### 个人博客\n\n- 📝 技术博客、生活记录\n- 👥 支持多作者协作\n- 🏷️ 完整的分类标签系统\n- 🔍 SEO 优化，搜索引擎友好\n\n### 技术文档\n\n- 📚 项目文档、API 文档\n- 🎨 支持代码高亮和目录生成\n- 📱 响应式设计，移动端友好\n- 📡 支持 RSS 订阅\n\n### 企业网站\n\n- 🏢 公司官网、产品介绍\n- 📢 新闻发布、公告系统\n- 📄 多页面支持\n- ⚡ 高性能，适合低配置服务器\n\n## 🔧 开发工作流\n\n### 1. 内容创建\n\n```bash\n# 创建新文章\nlumos new post \"我的第一篇文章\"\n\n# 创建新页面\nlumos new page \"关于我们\"\n\n# 创建新作者\nlumos new author \"张三\"\n```\n\n关于 CLI 命令的详细使用方法，请参阅 [Lumos CLI 使用指南](./lumos-cli-usage.md)。\n\n### 2. 开发调试\n\n```bash\n# 启动开发服务器（热更新）\nbun run dev\n\n# 或手动步骤\nlumos gen && lumos server -w\n```\n\n### 3. 构建部署\n\n```bash\n# 完整构建\nlumos build\n\n# 生成数据文件\nlumos gen\n```\n\n## 📊 性能优势\n\n### 启动性能\n\n- **冷启动**: < 100ms（相比 Node.js 提升 3-5 倍）\n- **热重载**: 文件变化检测 < 50ms\n- **内存占用**: 相比传统方案减少 30-50%\n\n### 构建性能\n\n- **增量构建**: 只处理变更文件\n- **并行处理**: 多文件并行解析\n- **智能缓存**: 避免重复计算\n\n### 运行时性能\n\n- **SSR 渲染**: 首屏加载速度快\n- **静态资源**: CDN 友好的资源管理\n- **SEO 优化**: 搜索引擎友好\n\n## 🌟 项目亮点\n\n### 1. 现代化架构\n\n- 🚀 基于 Bun 的下一代运行时\n- 🔒 TypeScript 全覆盖，类型安全\n- ⚛️ React + JSX 的组件化开发\n- 🔧 函数式编程范式\n\n### 2. 开发体验\n\n- ⚡ 零配置启动\n- 🔥 热更新开发\n- 🛠️ 完整的 CLI 工具链\n- 💡 丰富的错误提示\n\n### 3. 性能优化\n\n- 🧠 智能缓存机制\n- ⚡ 增量构建\n- 📦 资源压缩和优化\n- 📱 响应式设计\n\n### 4. 扩展性\n\n- 🔌 插件化架构\n- 🎨 主题系统支持\n- 🧩 自定义组件\n- 🔗 API 接口扩展\n\n## 🎯 适用人群\n\n- 👨‍💻 **前端开发者**: 熟悉 React/TypeScript 的开发者\n- ✍️ **博客作者**: 需要高性能博客系统的内容创作者\n- 👥 **技术团队**: 需要技术文档和博客的企业团队\n- 🌟 **开源项目**: 需要项目文档和展示的开源项目\n\n## 🔮 未来规划\n\n- [x] 🎨 多主题系统支持\n- [ ] 🖼️ 图片优化和懒加载\n- [x] 🔍 全文搜索功能\n- [ ] 📱 PWA 支持\n- [ ] 🌍 多语言国际化\n- [ ] 💬 评论系统集成\n- [ ] 📊 性能监控和分析\n- [ ] 🐳 Docker 容器化支持\n\nLumos 致力于为开发者提供最现代化的静态博客解决方案，通过 Bun 运行时和 React 技术栈，实现极致的性能和开发体验。\n",
      "toc": "<ul>\n<li><a href=\"#toc-779598\">Lumos - 基于 Bun 的高性能静态博客生成器</a><ul>\n<li><a href=\"#toc-6df5e0\">📚 相关文档</a></li>\n<li><a href=\"#toc-58f301\">🎯 项目概述</a><ul>\n<li><a href=\"#toc-57ae37\">核心价值</a></li>\n<li><a href=\"#toc-62b37e\">适用场景</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-0b8008\">🚀 核心特性</a><ul>\n<li><a href=\"#toc-a378b1\">极速性能</a></li>\n<li><a href=\"#toc-44838c\">现代化技术栈</a></li>\n<li><a href=\"#toc-8552b2\">开发体验</a></li>\n<li><a href=\"#toc-ebf95d\">扩展能力</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-44614a\">🏗️ 项目架构</a><ul>\n<li><a href=\"#toc-90030e\">核心组件</a><ul>\n<li><a href=\"#toc-26c55c\">1. 数据生成器 (DataGenerator)</a></li>\n<li><a href=\"#toc-65c0be\">2. 文件解析器 (Parser)</a></li>\n<li><a href=\"#toc-307eb9\">3. HTTP 服务器 (LumosServer)</a></li>\n<li><a href=\"#toc-71c98d\">4. 布局组件 (Layout)</a></li>\n<li><a href=\"#toc-a5ae54\">5. Bundler HTML 系统</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-a1c40d\">插件系统架构</a><ul>\n<li><a href=\"#toc-2af444\">核心概念</a></li>\n<li><a href=\"#toc-484bc6\">生命周期钩子</a></li>\n<li><a href=\"#toc-4e530c\">插件配置</a></li>\n<li><a href=\"#toc-f42010\">创建插件</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-b84798\">主题系统架构</a><ul>\n<li><a href=\"#toc-7c62d4\">主题结构</a></li>\n<li><a href=\"#toc-5af700\">主题配置</a></li>\n<li><a href=\"#toc-24522c\">创建主题</a><ul>\n<li><a href=\"#toc-4c87fa\">1. 创建主题目录结构</a></li>\n<li><a href=\"#toc-a3e09a\">2. 创建布局组件</a></li>\n<li><a href=\"#toc-7a21a8\">3. 创建路由页面</a></li>\n<li><a href=\"#toc-0e7d36\">4. 配置主题</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-732485\">主题继承</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-b50650\">路由系统</a><ul>\n<li><a href=\"#toc-327555\">前台页面路由</a></li>\n<li><a href=\"#toc-b46466\">动态路由特性</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-0fea7c\">数据结构</a><ul>\n<li><a href=\"#toc-fd6737\">核心实体</a></li>\n<li><a href=\"#toc-fcbca3\">文章结构</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#toc-271987\">📦 Bundler HTML 页面 (高优先级)</a><ul>\n<li><a href=\"#toc-b3fbd1\">工作原理</a></li>\n<li><a href=\"#toc-0d08a0\">优先级说明</a></li>\n<li><a href=\"#toc-7efcb0\">使用场景</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-48ada1\">🛠️ 技术栈详解</a><ul>\n<li><a href=\"#toc-5045dc\">运行时环境</a></li>\n<li><a href=\"#toc-40d75c\">前端技术</a></li>\n<li><a href=\"#toc-9198a2\">构建工具</a></li>\n<li><a href=\"#toc-832705\">内容处理</a></li>\n<li><a href=\"#toc-1209e3\">数据存储</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-bb08cb\">🚀 使用场景</a><ul>\n<li><a href=\"#toc-9cfd28\">个人博客</a></li>\n<li><a href=\"#toc-94cc0c\">技术文档</a></li>\n<li><a href=\"#toc-66a0c6\">企业网站</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-e8a427\">🔧 开发工作流</a><ul>\n<li><a href=\"#toc-325269\">1. 内容创建</a></li>\n<li><a href=\"#toc-f4782b\">2. 开发调试</a></li>\n<li><a href=\"#toc-76b8db\">3. 构建部署</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-fb5d8c\">📊 性能优势</a><ul>\n<li><a href=\"#toc-c96de5\">启动性能</a></li>\n<li><a href=\"#toc-261bdc\">构建性能</a></li>\n<li><a href=\"#toc-e103f1\">运行时性能</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-384590\">🌟 项目亮点</a><ul>\n<li><a href=\"#toc-d03ead\">1. 现代化架构</a></li>\n<li><a href=\"#toc-dcf4ba\">2. 开发体验</a></li>\n<li><a href=\"#toc-c59be6\">3. 性能优化</a></li>\n<li><a href=\"#toc-33e59c\">4. 扩展性</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-510bed\">🎯 适用人群</a></li>\n<li><a href=\"#toc-6c5f63\">🔮 未来规划</a></li>\n</ul>\n</li>\n</ul>\n",
      "created_timestamp": 1756893369000,
      "updated_timestamp": 1756893369000,
      "url": "lumos-introduce",
      "symbolsCount": 6390,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ]
    },
    {
      "id": "9f6e9823-1c61-418f-b1dd-32d790636e16",
      "title": "Lumos CLI USAGE 教程",
      "alias": "lumos-cli-usage",
      "cover": null,
      "created_time": "2025-09-02T17:57:35.000Z",
      "date": "2025-09-02T17:57:35.000Z",
      "updated_time": "2025-09-02T17:57:35.000Z",
      "updated": "2025-09-02T17:57:35.000Z",
      "categories": [
        "开发教程",
        "技术文档"
      ],
      "tags": [
        "Bun",
        "TypeScript",
        "React",
        "二次开发",
        "教程",
        "FileSystemRouter"
      ],
      "excerpt": "Lumos CLI 是一个基于 Bun 运行时的静态博客生成器命令行工具。",
      "published": true,
      "content": "<h1 id=\"toc-ad82c3\">Lumos CLI 使用指南</h1>\n<p>Lumos CLI 是一个基于 Bun 运行时的静态博客生成器命令行工具。您可以使用两种方式来运行Lumos命令：</p>\n<ol>\n<li>使用 <code>lumos</code> 命令（需要将Lumos添加到系统PATH）</li>\n<li>使用 <code>bun run</code> 命令（推荐方式）</li>\n</ol>\n<p>如果您想了解 Lumos 的更多高级功能，如插件系统和主题系统，请参阅 <a href=\"./lumos-introduce.md\">Lumos 项目介绍</a> 和 <a href=\"./lumos-development.md\">Lumos 二次开发教程</a>。</p>\n<h2 id=\"toc-6df5e0\">📚 相关文档</h2>\n<ul>\n<li><a href=\"./lumos-introduce.md\">Lumos 项目介绍</a> - 项目的详细介绍和架构说明</li>\n<li><a href=\"./lumos-development.md\">Lumos 二次开发教程</a> - 插件和主题开发的详细教程</li>\n<li><a href=\"../README.md\">README 文档</a> - 项目完整文档</li>\n</ul>\n<h2 id=\"toc-e2e73b\">📋 安装</h2>\n<p>确保已安装 Bun 运行时：</p>\n<pre><code class=\"hljs lang-bash\">curl -fsSL https://bun.sh/install | bash\n</code></pre>\n<h2 id=\"toc-3c90b4\">🚀 快速开始</h2>\n<h3 id=\"toc-a81881\">工作流程示例</h3>\n<h4 id=\"toc-3f3604\">1. 初始化项目</h4>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 克隆项目</span>\ngit <span class=\"hljs-built_in\">clone</span> &lt;repository-url&gt;\n<span class=\"hljs-built_in\">cd</span> lumos\n\n<span class=\"hljs-comment\"># 安装依赖</span>\nbun install\n</code></pre>\n<h4 id=\"toc-02606b\">2. 创建内容</h4>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 创建文章</span>\nlumos new post <span class=\"hljs-string\">&quot;Lumos 使用指南&quot;</span>\n\n<span class=\"hljs-comment\"># 创建页面</span>\nlumos new page <span class=\"hljs-string\">&quot;关于&quot;</span> -p <span class=\"hljs-string\">&quot;info&quot;</span>\n\n<span class=\"hljs-comment\"># 创建作者</span>\nlumos new author <span class=\"hljs-string\">&quot;开发者&quot;</span>\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 创建文章</span>\nbun run src/cli.ts new post <span class=\"hljs-string\">&quot;Lumos 使用指南&quot;</span>\n\n<span class=\"hljs-comment\"># 创建页面</span>\nbun run src/cli.ts new page <span class=\"hljs-string\">&quot;关于&quot;</span> -p <span class=\"hljs-string\">&quot;info&quot;</span>\n\n<span class=\"hljs-comment\"># 创建作者</span>\nbun run src/cli.ts new author <span class=\"hljs-string\">&quot;开发者&quot;</span>\n</code></pre>\n<h4 id=\"toc-aa06bb\">3. 生成数据</h4>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 生成数据文件</span>\nlumos gen\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 生成数据文件</span>\nbun run src/cli.ts gen\n</code></pre>\n<h4 id=\"toc-20ed8d\">4. 启动开发服务器</h4>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 启动服务器并监听文件变化</span>\nlumos server -w\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 启动服务器并监听文件变化</span>\nbun run src/cli.ts server -w\n</code></pre>\n<h4 id=\"toc-32405e\">5. 构建项目</h4>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 构建项目用于生产环境</span>\nlumos build\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 构建项目用于生产环境</span>\nbun run src/cli.ts build\n</code></pre>\n<h2 id=\"toc-a91441\">🛠️ 命令详解</h2>\n<h3 id=\"toc-5c75f0\">new 命令</h3>\n<p>用于创建新的文章、页面或作者文件。</p>\n<h4 id=\"toc-f2b0b4\">语法</h4>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">lumos new &lt;<span class=\"hljs-built_in\">type</span>&gt; &lt;title&gt; [options]\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts new &lt;<span class=\"hljs-built_in\">type</span>&gt; &lt;title&gt; [options]\n</code></pre>\n<h4 id=\"toc-3d0a2d\">参数</h4>\n<ul>\n<li><code>&lt;type&gt;</code>: 文件类型，支持 <code>post</code>、<code>page</code>、<code>author</code></li>\n<li><code>&lt;title&gt;</code>: 文件标题</li>\n</ul>\n<h4 id=\"toc-ea15ae\">选项</h4>\n<ul>\n<li><code>-p, --path &lt;path&gt;</code>: 指定子目录路径</li>\n</ul>\n<h4 id=\"toc-1a63ac\">示例</h4>\n<ol>\n<li><p><strong>创建新文章</strong></p>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">lumos new post <span class=\"hljs-string\">&quot;我的第一篇文章&quot;</span>\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts new post <span class=\"hljs-string\">&quot;我的第一篇文章&quot;</span>\n</code></pre>\n</li>\n<li><p><strong>在子目录中创建文章</strong></p>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">lumos new post <span class=\"hljs-string\">&quot;JavaScript 教程&quot;</span> -p <span class=\"hljs-string\">&quot;tutorials&quot;</span>\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts new post <span class=\"hljs-string\">&quot;JavaScript 教程&quot;</span> -p <span class=\"hljs-string\">&quot;tutorials&quot;</span>\n</code></pre>\n</li>\n<li><p><strong>创建新页面</strong></p>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">lumos new page <span class=\"hljs-string\">&quot;关于我们&quot;</span>\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts new page <span class=\"hljs-string\">&quot;关于我们&quot;</span>\n</code></pre>\n</li>\n<li><p><strong>在子目录中创建页面</strong></p>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">lumos new page <span class=\"hljs-string\">&quot;联系方式&quot;</span> -p <span class=\"hljs-string\">&quot;info&quot;</span>\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts new page <span class=\"hljs-string\">&quot;联系方式&quot;</span> -p <span class=\"hljs-string\">&quot;info&quot;</span>\n</code></pre>\n</li>\n<li><p><strong>创建新作者</strong></p>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">lumos new author <span class=\"hljs-string\">&quot;张三&quot;</span>\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts new author <span class=\"hljs-string\">&quot;张三&quot;</span>\n</code></pre>\n</li>\n</ol>\n<h3 id=\"toc-03d0cd\">gen 命令</h3>\n<p>用于解析所有 Markdown、JSON、YAML 文件，生成 data.json 数据文件。</p>\n<h4 id=\"toc-f2b0b4\">语法</h4>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-text\">lumos gen\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts gen\n</code></pre>\n<h4 id=\"toc-1a63ac\">示例</h4>\n<ol>\n<li><p><strong>生成数据文件</strong></p>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-text\">lumos gen\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts gen\n</code></pre>\n</li>\n<li><p><strong>生成数据文件（别名命令）</strong></p>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-text\">lumos generate\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts generate\n</code></pre>\n</li>\n</ol>\n<h3 id=\"toc-bd28de\">server 命令</h3>\n<p>启动开发服务器，支持监听文件变化自动重新生成。</p>\n<h4 id=\"toc-f2b0b4\">语法</h4>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-text\">lumos server [options]\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts server [options]\n</code></pre>\n<h4 id=\"toc-ea15ae\">选项</h4>\n<ul>\n<li><code>-p, --port &lt;port&gt;</code>: 指定服务器端口（默认: 3060）</li>\n<li><code>-w, --watch</code>: 启用监听模式，文件变化自动重新生成</li>\n</ul>\n<h4 id=\"toc-1a63ac\">示例</h4>\n<ol>\n<li><p><strong>启动开发服务器</strong></p>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-text\">lumos server\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts server\n</code></pre>\n</li>\n<li><p><strong>指定端口启动服务器</strong></p>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-text\">lumos server -p 8080\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts server -p 8080\n</code></pre>\n</li>\n<li><p><strong>启用监听模式</strong></p>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-text\">lumos server -w\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts server -w\n</code></pre>\n</li>\n<li><p><strong>指定端口并启用监听模式</strong></p>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-text\">lumos server -p 8080 -w\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts server -p 8080 -w\n</code></pre>\n</li>\n</ol>\n<h3 id=\"toc-601847\">build 命令</h3>\n<p>构建项目，包括生成数据文件和处理资源文件。</p>\n<h4 id=\"toc-f2b0b4\">语法</h4>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-text\">lumos build\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts build\n</code></pre>\n<h4 id=\"toc-1a63ac\">示例</h4>\n<ol>\n<li><p><strong>构建项目</strong></p>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-text\">lumos build\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts build\n</code></pre>\n</li>\n</ol>\n<h3 id=\"toc-b0b13f\">assets 命令</h3>\n<p>处理资源文件，确保资源目录存在并创建必要的子目录。</p>\n<h4 id=\"toc-f2b0b4\">语法</h4>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-text\">lumos assets\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts assets\n</code></pre>\n<h4 id=\"toc-1a63ac\">示例</h4>\n<ol>\n<li><p><strong>处理资源文件</strong></p>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-text\">lumos assets\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\">bun run src/cli.ts assets\n</code></pre>\n</li>\n</ol>\n<h2 id=\"toc-5945d5\">📁 生成的文件结构</h2>\n<h3 id=\"toc-3097c7\">文章 (Post)</h3>\n<p>生成路径: <code>source/_posts/[path/]&lt;title&gt;.md</code></p>\n<h3 id=\"toc-b645b3\">页面 (Page)</h3>\n<p>生成路径: <code>source/_pages/[path/]&lt;title&gt;.md</code></p>\n<h3 id=\"toc-5118b3\">作者 (Author)</h3>\n<p>生成路径: <code>source/_authors/[path/]&lt;title&gt;.md</code></p>\n<h2 id=\"toc-3d4a3f\">📄 模板结构</h2>\n<p>所有生成的文件都包含以下 Front Matter：</p>\n<pre><code class=\"hljs lang-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">&lt;自动生成的UUID&gt;</span>\n<span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">&lt;标题&gt;</span>\n<span class=\"hljs-attr\">cover:</span>\n<span class=\"hljs-attr\">created_time:</span> <span class=\"hljs-string\">&lt;创建时间&gt;</span>\n<span class=\"hljs-attr\">updated_time:</span> <span class=\"hljs-string\">&lt;更新时间&gt;</span>\n<span class=\"hljs-attr\">categories:</span>\n<span class=\"hljs-attr\">tags:</span>\n<span class=\"hljs-attr\">excerpt:</span>\n<span class=\"hljs-attr\">published:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-meta\">---\n</span></code></pre>\n<h2 id=\"toc-4c8c34\">🎨 自定义模板</h2>\n<p>模板文件位于 <code>templates/</code> 目录下：</p>\n<ul>\n<li><code>templates/post.tsx</code> - 文章模板</li>\n<li><code>templates/page.tsx</code> - 页面模板</li>\n<li><code>templates/author.tsx</code> - 作者模板</li>\n</ul>\n<p>你可以修改这些 TSX 文件来自定义生成的文件格式。</p>\n<h2 id=\"toc-4f2328\">⚙️ 技术特性</h2>\n<ul>\n<li>✅ 使用 JSX 模板</li>\n<li>✅ 基于 UUID v5 的稳定 ID 生成</li>\n<li>✅ 自动创建目录结构</li>\n<li>✅ 重复文件检测</li>\n<li>✅ 支持中文标题</li>\n<li>✅ 统一的时间格式</li>\n<li>✅ 支持子目录路径</li>\n<li>✅ 自动生成友好 URL</li>\n<li>✅ 中文标题自动转拼音</li>\n</ul>\n<h2 id=\"toc-6b48b0\">🔧 高级用法</h2>\n<h3 id=\"toc-a7fb7a\">使用 package.json 脚本</h3>\n<p>Lumos 项目提供了预定义的 npm 脚本：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 启动开发环境（等同于 lumos server -w）</span>\nbun run dev\n\n<span class=\"hljs-comment\"># 创建新内容</span>\nbun run new post <span class=\"hljs-string\">&quot;文章标题&quot;</span>\n\n<span class=\"hljs-comment\"># 生成数据</span>\nbun run gen\n\n<span class=\"hljs-comment\"># 构建项目</span>\nbun run build\n</code></pre>\n<h3 id=\"toc-fcaf1b\">命令组合使用</h3>\n<p>使用 <code>lumos</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 一次性生成数据并启动服务器</span>\nlumos gen &amp;&amp; lumos server\n\n<span class=\"hljs-comment\"># 构建项目并处理资源</span>\nlumos build &amp;&amp; lumos assets\n</code></pre>\n<p>使用 <code>bun run</code> 命令：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 一次性生成数据并启动服务器</span>\nbun run src/cli.ts gen &amp;&amp; bun run src/cli.ts server\n\n<span class=\"hljs-comment\"># 构建项目并处理资源</span>\nbun run src/cli.ts build &amp;&amp; bun run src/cli.ts assets\n</code></pre>\n<h2 id=\"toc-ee8670\">🎯 推荐使用方式</h2>\n<p>我们推荐使用 <code>bun run</code> 命令，因为：</p>\n<ol>\n<li><strong>无需全局安装</strong>：不需要将Lumos添加到系统PATH</li>\n<li><strong>版本一致</strong>：确保使用项目中定义的Lumos版本</li>\n<li><strong>跨平台兼容</strong>：在不同操作系统上行为一致</li>\n<li><strong>易于团队协作</strong>：所有团队成员使用相同的命令方式</li>\n</ol>\n<p>如果您想深入了解如何扩展 Lumos 的功能，例如创建自定义插件或主题，请参阅 <a href=\"./lumos-development.md\">Lumos 二次开发教程</a>。</p>\n",
      "mdContent": "\n# Lumos CLI 使用指南\n\nLumos CLI 是一个基于 Bun 运行时的静态博客生成器命令行工具。您可以使用两种方式来运行Lumos命令：\n\n1. 使用 `lumos` 命令（需要将Lumos添加到系统PATH）\n2. 使用 `bun run` 命令（推荐方式）\n\n如果您想了解 Lumos 的更多高级功能，如插件系统和主题系统，请参阅 [Lumos 项目介绍](./lumos-introduce.md) 和 [Lumos 二次开发教程](./lumos-development.md)。\n\n## 📚 相关文档\n\n- [Lumos 项目介绍](./lumos-introduce.md) - 项目的详细介绍和架构说明\n- [Lumos 二次开发教程](./lumos-development.md) - 插件和主题开发的详细教程\n- [README 文档](../README.md) - 项目完整文档\n\n## 📋 安装\n\n确保已安装 Bun 运行时：\n\n```bash\ncurl -fsSL https://bun.sh/install | bash\n```\n\n## 🚀 快速开始\n\n### 工作流程示例\n\n#### 1. 初始化项目\n\n```bash\n# 克隆项目\ngit clone <repository-url>\ncd lumos\n\n# 安装依赖\nbun install\n```\n\n#### 2. 创建内容\n\n使用 `lumos` 命令：\n\n```bash\n# 创建文章\nlumos new post \"Lumos 使用指南\"\n\n# 创建页面\nlumos new page \"关于\" -p \"info\"\n\n# 创建作者\nlumos new author \"开发者\"\n```\n\n使用 `bun run` 命令：\n\n```bash\n# 创建文章\nbun run src/cli.ts new post \"Lumos 使用指南\"\n\n# 创建页面\nbun run src/cli.ts new page \"关于\" -p \"info\"\n\n# 创建作者\nbun run src/cli.ts new author \"开发者\"\n```\n\n#### 3. 生成数据\n\n使用 `lumos` 命令：\n\n```bash\n# 生成数据文件\nlumos gen\n```\n\n使用 `bun run` 命令：\n\n```bash\n# 生成数据文件\nbun run src/cli.ts gen\n```\n\n#### 4. 启动开发服务器\n\n使用 `lumos` 命令：\n\n```bash\n# 启动服务器并监听文件变化\nlumos server -w\n```\n\n使用 `bun run` 命令：\n\n```bash\n# 启动服务器并监听文件变化\nbun run src/cli.ts server -w\n```\n\n#### 5. 构建项目\n\n使用 `lumos` 命令：\n\n```bash\n# 构建项目用于生产环境\nlumos build\n```\n\n使用 `bun run` 命令：\n\n```bash\n# 构建项目用于生产环境\nbun run src/cli.ts build\n```\n\n## 🛠️ 命令详解\n\n### new 命令\n\n用于创建新的文章、页面或作者文件。\n\n#### 语法\n\n使用 `lumos` 命令：\n\n```bash\nlumos new <type> <title> [options]\n```\n\n使用 `bun run` 命令：\n\n```bash\nbun run src/cli.ts new <type> <title> [options]\n```\n\n#### 参数\n\n- `<type>`: 文件类型，支持 `post`、`page`、`author`\n- `<title>`: 文件标题\n\n#### 选项\n\n- `-p, --path <path>`: 指定子目录路径\n\n#### 示例\n\n1. **创建新文章**\n\n   使用 `lumos` 命令：\n\n   ```bash\n   lumos new post \"我的第一篇文章\"\n   ```\n\n   使用 `bun run` 命令：\n\n   ```bash\n   bun run src/cli.ts new post \"我的第一篇文章\"\n   ```\n\n2. **在子目录中创建文章**\n\n   使用 `lumos` 命令：\n\n   ```bash\n   lumos new post \"JavaScript 教程\" -p \"tutorials\"\n   ```\n\n   使用 `bun run` 命令：\n\n   ```bash\n   bun run src/cli.ts new post \"JavaScript 教程\" -p \"tutorials\"\n   ```\n\n3. **创建新页面**\n\n   使用 `lumos` 命令：\n\n   ```bash\n   lumos new page \"关于我们\"\n   ```\n\n   使用 `bun run` 命令：\n\n   ```bash\n   bun run src/cli.ts new page \"关于我们\"\n   ```\n\n4. **在子目录中创建页面**\n\n   使用 `lumos` 命令：\n\n   ```bash\n   lumos new page \"联系方式\" -p \"info\"\n   ```\n\n   使用 `bun run` 命令：\n\n   ```bash\n   bun run src/cli.ts new page \"联系方式\" -p \"info\"\n   ```\n\n5. **创建新作者**\n\n   使用 `lumos` 命令：\n\n   ```bash\n   lumos new author \"张三\"\n   ```\n\n   使用 `bun run` 命令：\n\n   ```bash\n   bun run src/cli.ts new author \"张三\"\n   ```\n\n### gen 命令\n\n用于解析所有 Markdown、JSON、YAML 文件，生成 data.json 数据文件。\n\n#### 语法\n\n使用 `lumos` 命令：\n\n```bash\nlumos gen\n```\n\n使用 `bun run` 命令：\n\n```bash\nbun run src/cli.ts gen\n```\n\n#### 示例\n\n1. **生成数据文件**\n\n   使用 `lumos` 命令：\n\n   ```bash\n   lumos gen\n   ```\n\n   使用 `bun run` 命令：\n\n   ```bash\n   bun run src/cli.ts gen\n   ```\n\n2. **生成数据文件（别名命令）**\n\n   使用 `lumos` 命令：\n\n   ```bash\n   lumos generate\n   ```\n\n   使用 `bun run` 命令：\n\n   ```bash\n   bun run src/cli.ts generate\n   ```\n\n### server 命令\n\n启动开发服务器，支持监听文件变化自动重新生成。\n\n#### 语法\n\n使用 `lumos` 命令：\n\n```bash\nlumos server [options]\n```\n\n使用 `bun run` 命令：\n\n```bash\nbun run src/cli.ts server [options]\n```\n\n#### 选项\n\n- `-p, --port <port>`: 指定服务器端口（默认: 3060）\n- `-w, --watch`: 启用监听模式，文件变化自动重新生成\n\n#### 示例\n\n1. **启动开发服务器**\n\n   使用 `lumos` 命令：\n\n   ```bash\n   lumos server\n   ```\n\n   使用 `bun run` 命令：\n\n   ```bash\n   bun run src/cli.ts server\n   ```\n\n2. **指定端口启动服务器**\n\n   使用 `lumos` 命令：\n\n   ```bash\n   lumos server -p 8080\n   ```\n\n   使用 `bun run` 命令：\n\n   ```bash\n   bun run src/cli.ts server -p 8080\n   ```\n\n3. **启用监听模式**\n\n   使用 `lumos` 命令：\n\n   ```bash\n   lumos server -w\n   ```\n\n   使用 `bun run` 命令：\n\n   ```bash\n   bun run src/cli.ts server -w\n   ```\n\n4. **指定端口并启用监听模式**\n\n   使用 `lumos` 命令：\n\n   ```bash\n   lumos server -p 8080 -w\n   ```\n\n   使用 `bun run` 命令：\n\n   ```bash\n   bun run src/cli.ts server -p 8080 -w\n   ```\n\n### build 命令\n\n构建项目，包括生成数据文件和处理资源文件。\n\n#### 语法\n\n使用 `lumos` 命令：\n\n```bash\nlumos build\n```\n\n使用 `bun run` 命令：\n\n```bash\nbun run src/cli.ts build\n```\n\n#### 示例\n\n1. **构建项目**\n\n   使用 `lumos` 命令：\n\n   ```bash\n   lumos build\n   ```\n\n   使用 `bun run` 命令：\n\n   ```bash\n   bun run src/cli.ts build\n   ```\n\n### assets 命令\n\n处理资源文件，确保资源目录存在并创建必要的子目录。\n\n#### 语法\n\n使用 `lumos` 命令：\n\n```bash\nlumos assets\n```\n\n使用 `bun run` 命令：\n\n```bash\nbun run src/cli.ts assets\n```\n\n#### 示例\n\n1. **处理资源文件**\n\n   使用 `lumos` 命令：\n\n   ```bash\n   lumos assets\n   ```\n\n   使用 `bun run` 命令：\n\n   ```bash\n   bun run src/cli.ts assets\n   ```\n\n## 📁 生成的文件结构\n\n### 文章 (Post)\n\n生成路径: `source/_posts/[path/]<title>.md`\n\n### 页面 (Page)\n\n生成路径: `source/_pages/[path/]<title>.md`\n\n### 作者 (Author)\n\n生成路径: `source/_authors/[path/]<title>.md`\n\n## 📄 模板结构\n\n所有生成的文件都包含以下 Front Matter：\n\n```yaml\n---\nid: <自动生成的UUID>\ntitle: <标题>\ncover:\ncreated_time: <创建时间>\nupdated_time: <更新时间>\ncategories:\ntags:\nexcerpt:\npublished: true\n---\n```\n\n## 🎨 自定义模板\n\n模板文件位于 `templates/` 目录下：\n\n- `templates/post.tsx` - 文章模板\n- `templates/page.tsx` - 页面模板\n- `templates/author.tsx` - 作者模板\n\n你可以修改这些 TSX 文件来自定义生成的文件格式。\n\n## ⚙️ 技术特性\n\n- ✅ 使用 JSX 模板\n- ✅ 基于 UUID v5 的稳定 ID 生成\n- ✅ 自动创建目录结构\n- ✅ 重复文件检测\n- ✅ 支持中文标题\n- ✅ 统一的时间格式\n- ✅ 支持子目录路径\n- ✅ 自动生成友好 URL\n- ✅ 中文标题自动转拼音\n\n## 🔧 高级用法\n\n### 使用 package.json 脚本\n\nLumos 项目提供了预定义的 npm 脚本：\n\n```bash\n# 启动开发环境（等同于 lumos server -w）\nbun run dev\n\n# 创建新内容\nbun run new post \"文章标题\"\n\n# 生成数据\nbun run gen\n\n# 构建项目\nbun run build\n```\n\n### 命令组合使用\n\n使用 `lumos` 命令：\n\n```bash\n# 一次性生成数据并启动服务器\nlumos gen && lumos server\n\n# 构建项目并处理资源\nlumos build && lumos assets\n```\n\n使用 `bun run` 命令：\n\n```bash\n# 一次性生成数据并启动服务器\nbun run src/cli.ts gen && bun run src/cli.ts server\n\n# 构建项目并处理资源\nbun run src/cli.ts build && bun run src/cli.ts assets\n```\n\n## 🎯 推荐使用方式\n\n我们推荐使用 `bun run` 命令，因为：\n\n1. **无需全局安装**：不需要将Lumos添加到系统PATH\n2. **版本一致**：确保使用项目中定义的Lumos版本\n3. **跨平台兼容**：在不同操作系统上行为一致\n4. **易于团队协作**：所有团队成员使用相同的命令方式\n\n如果您想深入了解如何扩展 Lumos 的功能，例如创建自定义插件或主题，请参阅 [Lumos 二次开发教程](./lumos-development.md)。\n",
      "toc": "<ul>\n<li><a href=\"#toc-ad82c3\">Lumos CLI 使用指南</a><ul>\n<li><a href=\"#toc-6df5e0\">📚 相关文档</a></li>\n<li><a href=\"#toc-e2e73b\">📋 安装</a></li>\n<li><a href=\"#toc-3c90b4\">🚀 快速开始</a><ul>\n<li><a href=\"#toc-a81881\">工作流程示例</a><ul>\n<li><a href=\"#toc-3f3604\">1. 初始化项目</a></li>\n<li><a href=\"#toc-02606b\">2. 创建内容</a></li>\n<li><a href=\"#toc-aa06bb\">3. 生成数据</a></li>\n<li><a href=\"#toc-20ed8d\">4. 启动开发服务器</a></li>\n<li><a href=\"#toc-32405e\">5. 构建项目</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#toc-a91441\">🛠️ 命令详解</a><ul>\n<li><a href=\"#toc-5c75f0\">new 命令</a><ul>\n<li><a href=\"#toc-f2b0b4\">语法</a></li>\n<li><a href=\"#toc-3d0a2d\">参数</a></li>\n<li><a href=\"#toc-ea15ae\">选项</a></li>\n<li><a href=\"#toc-1a63ac\">示例</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-03d0cd\">gen 命令</a><ul>\n<li><a href=\"#toc-f2b0b4\">语法</a></li>\n<li><a href=\"#toc-1a63ac\">示例</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-bd28de\">server 命令</a><ul>\n<li><a href=\"#toc-f2b0b4\">语法</a></li>\n<li><a href=\"#toc-ea15ae\">选项</a></li>\n<li><a href=\"#toc-1a63ac\">示例</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-601847\">build 命令</a><ul>\n<li><a href=\"#toc-f2b0b4\">语法</a></li>\n<li><a href=\"#toc-1a63ac\">示例</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-b0b13f\">assets 命令</a><ul>\n<li><a href=\"#toc-f2b0b4\">语法</a></li>\n<li><a href=\"#toc-1a63ac\">示例</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#toc-5945d5\">📁 生成的文件结构</a><ul>\n<li><a href=\"#toc-3097c7\">文章 (Post)</a></li>\n<li><a href=\"#toc-b645b3\">页面 (Page)</a></li>\n<li><a href=\"#toc-5118b3\">作者 (Author)</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-3d4a3f\">📄 模板结构</a></li>\n<li><a href=\"#toc-4c8c34\">🎨 自定义模板</a></li>\n<li><a href=\"#toc-4f2328\">⚙️ 技术特性</a></li>\n<li><a href=\"#toc-6b48b0\">🔧 高级用法</a><ul>\n<li><a href=\"#toc-a7fb7a\">使用 package.json 脚本</a></li>\n<li><a href=\"#toc-fcaf1b\">命令组合使用</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-ee8670\">🎯 推荐使用方式</a></li>\n</ul>\n</li>\n</ul>\n",
      "created_timestamp": 1756835855000,
      "updated_timestamp": 1756835855000,
      "url": "lumos-cli-usage",
      "symbolsCount": 4317,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ]
    },
    {
      "id": "083f745a-5764-50b7-b88c-54945b081c87",
      "title": "Lumos 二次开发教程",
      "alias": "lumos-development",
      "cover": null,
      "created_time": "2025-09-02T17:57:35.000Z",
      "date": "2025-09-02T17:57:35.000Z",
      "updated_time": "2025-09-02T17:57:35.000Z",
      "updated": "2025-09-02T17:57:35.000Z",
      "categories": [
        "开发教程",
        "技术文档"
      ],
      "tags": [
        "Bun",
        "TypeScript",
        "React",
        "二次开发",
        "教程",
        "FileSystemRouter"
      ],
      "excerpt": "详细的 Lumos 静态博客生成器二次开发教程，基于 Bun 运行时，包括项目架构解析、自定义组件开发、路由扩展等核心功能。",
      "published": true,
      "content": "<h1 id=\"toc-1d5784\">🛠️ Lumos 二次开发教程</h1>\n<p>本教程将深入介绍如何对 Lumos 静态博客生成器进行二次开发，包括项目架构解析、自定义组件开发、路由扩展等核心功能。适合有一定前端开发经验的开发者。</p>\n<p>在开始二次开发之前，建议您先了解 Lumos 的基本概念和使用方法。请参阅 <a href=\"../README.md\">README</a> 和 <a href=\"./lumos-introduce.md\">Lumos 项目介绍</a> 以获取更多基础信息，参阅 <a href=\"./lumos-cli-usage.md\">Lumos CLI 使用指南</a> 了解命令行工具的使用方法。</p>\n<h2 id=\"toc-c455c6\">📚 相关资源</h2>\n<ul>\n<li>📚 <a href=\"./lumos-introduce.md\">Lumos 项目文档</a> - 项目介绍和基础使用</li>\n<li>🛠️ <a href=\"./lumos-cli-usage.md\">CLI 使用指南</a> - 命令行工具使用说明</li>\n<li>📖 <a href=\"../README.md\">README 文档</a> - 项目完整文档</li>\n</ul>\n<h2 id=\"toc-c2f851\">🎯 学习目标</h2>\n<p>通过本教程，你将学会：</p>\n<ul>\n<li>🏗️ <strong>项目架构理解</strong>: 深入理解 Lumos 的核心架构和设计理念</li>\n<li>⚛️ <strong>React 组件开发</strong>: 创建自定义的 React 组件和布局</li>\n<li>🛣️ <strong>路由扩展</strong>: 添加新的页面路由和 API 接口</li>\n<li>🔌 <strong>插件开发</strong>: 创建自定义插件扩展功能</li>\n<li>🎨 <strong>主题开发</strong>: 创建自定义主题改变外观</li>\n<li>🧪 <strong>测试调试</strong>: 建立完善的测试和调试环境</li>\n</ul>\n<h2 id=\"toc-c893bf\">🚀 开发环境搭建</h2>\n<h3 id=\"toc-e078f0\">📋 前置要求</h3>\n<ul>\n<li>🚀 <strong>Bun</strong>: 现代化的 JavaScript 运行时（必需）</li>\n<li>🎨 <strong>代码编辑器</strong>: VS Code 或 WebStorm</li>\n<li>🔧 <strong>Git</strong>: 版本控制工具</li>\n</ul>\n<h3 id=\"toc-883dda\">⚙️ 环境配置</h3>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 1️⃣ 安装 Bun (如果尚未安装)</span>\ncurl -fsSL https://bun.sh/install | bash\n\n<span class=\"hljs-comment\"># 2️⃣ 克隆项目或进入项目目录</span>\n<span class=\"hljs-built_in\">cd</span> lumos\n\n<span class=\"hljs-comment\"># 3️⃣ 安装项目依赖</span>\nbun install\n\n<span class=\"hljs-comment\"># 4️⃣ 构建项目</span>\nbun run build\n\n<span class=\"hljs-comment\"># 5️⃣ 启动开发服务器</span>\nbun run dev\n</code></pre>\n<h3 id=\"toc-b92b5c\">🔧 开发工具配置</h3>\n<h4 id=\"toc-0c7fbe\">VS Code 推荐插件</h4>\n<pre><code class=\"hljs lang-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;recommendations&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;bradlc.vscode-tailwindcss&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;ms-vscode.vscode-typescript-next&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;esbenp.prettier-vscode&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;ms-vscode.vscode-eslint&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;bradlc.vscode-tailwindcss&quot;</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h4 id=\"toc-b2b126\">调试配置</h4>\n<p>在 <code>.vscode/launch.json</code> 中添加：</p>\n<pre><code class=\"hljs lang-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;0.2.0&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;configurations&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Debug Lumos Server&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;node&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;request&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;launch&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;program&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;${workspaceFolder}/src/cli.ts&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;args&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;server&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;-p&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;3060&quot;</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;runtimeExecutable&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;bun&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;console&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;integratedTerminal&quot;</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h3 id=\"toc-19e995\">🚀 Bun 特有功能</h3>\n<h4 id=\"toc-2d81ed\">1. 使用 Bun 的 FileSystemRouter</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// src/server.ts 中的路由配置</span>\n<span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bun</span>.<span class=\"hljs-title class_\">FileSystemRouter</span>({\n  <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">&#x27;nextjs&#x27;</span>,\n  <span class=\"hljs-attr\">dir</span>: <span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-title function_\">cwd</span>(), <span class=\"hljs-string\">&#x27;src/routes&#x27;</span>)\n})\n</code></pre>\n<h4 id=\"toc-c5a415\">2. 使用 Bun 的文件 API</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 读取文件</span>\n<span class=\"hljs-keyword\">const</span> file = <span class=\"hljs-title class_\">Bun</span>.<span class=\"hljs-title function_\">file</span>(<span class=\"hljs-string\">&#x27;data.json&#x27;</span>)\n<span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-keyword\">await</span> file.<span class=\"hljs-title function_\">text</span>()\n\n<span class=\"hljs-comment\">// 写入文件</span>\n<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Bun</span>.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&#x27;output.json&#x27;</span>, <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(data, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>))\n</code></pre>\n<h4 id=\"toc-a7baa8\">3. 使用 Bun 的 HTTP 服务器</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 创建 HTTP 服务器</span>\n<span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-title class_\">Bun</span>.<span class=\"hljs-title function_\">serve</span>({\n  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">3000</span>,\n  <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-params\">request</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(<span class=\"hljs-string\">&#x27;Hello from Bun!&#x27;</span>)\n  }\n})\n</code></pre>\n<h2 id=\"toc-364a74\">🏗️ 项目架构深度解析</h2>\n<h3 id=\"toc-1dac02\">📂 核心目录结构</h3>\n<pre><code class=\"hljs lang-nix\">lumos<span class=\"hljs-symbol\">/</span>\n├── 📁 source<span class=\"hljs-symbol\">/</span>               <span class=\"hljs-comment\"># 内容源目录</span>\n│   ├── 📁 _authors<span class=\"hljs-symbol\">/</span>         <span class=\"hljs-comment\"># 作者 Markdown 文件</span>\n│   ├── 📁 _pages<span class=\"hljs-symbol\">/</span>          <span class=\"hljs-comment\"># 页面 Markdown 文件</span>\n│   ├── 📁 _posts<span class=\"hljs-symbol\">/</span>          <span class=\"hljs-comment\"># 文章 Markdown 文件</span>\n│   ├── 📁 _jsons<span class=\"hljs-symbol\">/</span>          <span class=\"hljs-comment\"># JSON 配置文件</span>\n│   └── 📁 _ymls<span class=\"hljs-symbol\">/</span>           <span class=\"hljs-comment\"># YAML 配置文件</span>\n├── 📁 src<span class=\"hljs-symbol\">/</span>                  <span class=\"hljs-comment\"># 源码目录（核心开发区域）</span>\n│   ├── 📄 cli.ts           <span class=\"hljs-comment\"># CLI 命令行工具</span>\n│   ├── 📁 components<span class=\"hljs-symbol\">/</span>      <span class=\"hljs-comment\"># React 组件库</span>\n│   ├── 📁 routes<span class=\"hljs-symbol\">/</span>          <span class=\"hljs-comment\"># 路由处理器</span>\n│   ├── 📄 server.ts        <span class=\"hljs-comment\"># HTTP 服务器</span>\n│   ├── 📄 generator.ts     <span class=\"hljs-comment\"># 数据生成器</span>\n│   ├── 📄 parser.ts        <span class=\"hljs-comment\"># 文件解析器</span>\n│   ├── 📄 renderer.tsx     <span class=\"hljs-comment\"># 渲染引擎</span>\n│   ├── 📄 utils.ts         <span class=\"hljs-comment\"># 工具函数</span>\n│   ├── 📄 plugin-manager.ts <span class=\"hljs-comment\"># 插件管理器</span>\n│   └── 📄 theme-manager.ts  <span class=\"hljs-comment\"># 主题管理器</span>\n├── 📁 assets<span class=\"hljs-symbol\">/</span>               <span class=\"hljs-comment\"># 静态资源目录</span>\n│   ├── 📁 styles<span class=\"hljs-symbol\">/</span>          <span class=\"hljs-comment\"># 样式文件</span>\n│   ├── 📁 javascript<span class=\"hljs-symbol\">/</span>      <span class=\"hljs-comment\"># JavaScript 文件</span>\n│   ├── 📁 images<span class=\"hljs-symbol\">/</span>          <span class=\"hljs-comment\"># 图片资源</span>\n│   └── 📁 fonts<span class=\"hljs-symbol\">/</span>           <span class=\"hljs-comment\"># 字体文件</span>\n├── 📁 bundler<span class=\"hljs-symbol\">/</span>              <span class=\"hljs-comment\"># Bun HTML Bundling 目录</span>\n│   ├── 📁 html<span class=\"hljs-symbol\">/</span>            <span class=\"hljs-comment\"># HTML 源文件</span>\n│   │   ├── 📄 index.html   <span class=\"hljs-comment\"># 首页 HTML 入口</span>\n│   │   ├── 📄 app.tsx      <span class=\"hljs-comment\"># React 组件</span>\n│   │   └── 📄 about.html   <span class=\"hljs-comment\"># 关于页面 HTML 入口</span>\n│   └── 📁 dist<span class=\"hljs-symbol\">/</span>            <span class=\"hljs-comment\"># 构建输出目录</span>\n├── 📁 templates<span class=\"hljs-symbol\">/</span>            <span class=\"hljs-comment\"># 模板文件</span>\n├── 📁 plugins<span class=\"hljs-symbol\">/</span>              <span class=\"hljs-comment\"># 插件目录</span>\n├── 📁 themes<span class=\"hljs-symbol\">/</span>               <span class=\"hljs-comment\"># 主题目录</span>\n├── 📄 lumos.config.json     <span class=\"hljs-comment\"># 配置文件</span>\n├── 📄 package.json          <span class=\"hljs-comment\"># 项目配置</span>\n├── 📄 tsconfig.json         <span class=\"hljs-comment\"># TypeScript 配置</span>\n├── 📄 tailwind.config.js    <span class=\"hljs-comment\"># Tailwind CSS 配置</span>\n├── 📄 lumos                 <span class=\"hljs-comment\"># CLI 可执行文件</span>\n└── 📄 data.json             <span class=\"hljs-comment\"># 生成的数据文件</span>\n</code></pre>\n<h3 id=\"toc-a585ed\">🔧 核心模块说明</h3>\n<ul>\n<li><strong>📄 cli.ts</strong>: 命令行接口，处理用户输入和命令分发</li>\n<li><strong>📄 server.ts</strong>: HTTP 服务器，基于 Bun 的 FileSystemRouter</li>\n<li><strong>📄 generator.ts</strong>: 数据生成器，解析文件并生成结构化数据</li>\n<li><strong>📄 parser.ts</strong>: 文件解析器，处理 Markdown、JSON、YAML 文件</li>\n<li><strong>📄 renderer.tsx</strong>: 渲染引擎，将 React 组件渲染为 HTML</li>\n<li><strong>📄 plugin-manager.ts</strong>: 插件管理器，负责加载和执行插件</li>\n<li><strong>📄 theme-manager.ts</strong>: 主题管理器，负责加载和管理主题</li>\n<li><strong>📁 components/</strong>: React 组件库，可扩展的 UI 组件</li>\n<li><strong>📁 routes/</strong>: 路由处理器，定义页面和 API 路由</li>\n<li><strong>📁 bundler/</strong>: Bun HTML Bundling 目录，用于创建高优先级的静态页面</li>\n</ul>\n<h2 id=\"toc-343d9a\">⚛️ React 组件开发</h2>\n<h3 id=\"toc-c589e7\">🧩 组件架构</h3>\n<p>Lumos 使用 React + TypeScript 构建组件系统，所有组件都支持 SSR 渲染。</p>\n<h4 id=\"toc-13d766\">基础组件结构</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// src/components/MyComponent.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DatabaseSchema</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../types.ts&#x27;</span>\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">MyComponentProps</span> {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DatabaseSchema</span>\n  <span class=\"hljs-attr\">children</span>?: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">ReactNode</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MyComponent</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;<span class=\"hljs-title class_\">MyComponentProps</span>&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{\n  title,\n  data,\n  children\n}</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;my-component&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n      {children}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<h3 id=\"toc-25618a\">🎨 自定义布局组件</h3>\n<h4 id=\"toc-e0998d\">创建新的布局组件</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// src/components/CustomLayout.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DatabaseSchema</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../types.ts&#x27;</span>\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CustomLayoutProps</span> {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">children</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">ReactNode</span>\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DatabaseSchema</span>\n  <span class=\"hljs-attr\">className</span>?: <span class=\"hljs-built_in\">string</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">CustomLayout</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;<span class=\"hljs-title class_\">CustomLayoutProps</span>&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{\n  title,\n  children,\n  data,\n  className = <span class=\"hljs-string\">&#x27;&#x27;</span>\n}</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;zh-CN&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>{title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charSet</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/assets/styles/style.css&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">custom-layout</span> ${<span class=\"hljs-attr\">className</span>}`}&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>我的自定义博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/posts&quot;</span>&gt;</span>文章<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/about&quot;</span>&gt;</span>关于<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;main-content&quot;</span>&gt;</span>\n          {children}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-symbol\">&amp;copy;</span> 2024 我的博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<h3 id=\"toc-3503dd\">🔧 组件开发最佳实践</h3>\n<h4 id=\"toc-c47362\">1. 类型安全</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 定义严格的 Props 类型</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ArticleCardProps</span> {\n  <span class=\"hljs-attr\">article</span>: {\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">string</span>\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>\n    <span class=\"hljs-attr\">excerpt</span>: <span class=\"hljs-built_in\">string</span>\n    <span class=\"hljs-attr\">date</span>: <span class=\"hljs-built_in\">string</span>\n    <span class=\"hljs-attr\">author</span>?: <span class=\"hljs-built_in\">string</span>\n  }\n  <span class=\"hljs-attr\">showAuthor</span>?: <span class=\"hljs-built_in\">boolean</span>\n  <span class=\"hljs-attr\">className</span>?: <span class=\"hljs-built_in\">string</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ArticleCard</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;<span class=\"hljs-title class_\">ArticleCardProps</span>&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{\n  article,\n  showAuthor = <span class=\"hljs-literal\">true</span>,\n  className = <span class=\"hljs-string\">&#x27;&#x27;</span>\n}</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 组件实现</span>\n}\n</code></pre>\n<h4 id=\"toc-e1064c\">2. 样式管理</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 使用 Tailwind CSS 类名</span>\n<span class=\"hljs-keyword\">const</span> cardClasses = <span class=\"hljs-string\">`\n  bg-white dark:bg-gray-800\n  rounded-lg shadow-md\n  p-6 mb-4\n  hover:shadow-lg transition-shadow\n  <span class=\"hljs-subst\">${className}</span>\n`</span>\n\n<span class=\"hljs-keyword\">return</span> (\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{cardClasses}</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;text-xl font-bold mb-2&quot;</span>&gt;</span>{article.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;text-gray-600 dark:text-gray-300 mb-4&quot;</span>&gt;</span>{article.excerpt}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    {showAuthor &amp;&amp; article.author &amp;&amp; (\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;text-sm text-gray-500&quot;</span>&gt;</span>作者: {article.author}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    )}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span></span>\n)\n</code></pre>\n<h4 id=\"toc-686417\">3. 条件渲染</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 使用条件渲染优化性能</span>\n{data.<span class=\"hljs-property\">posts</span>.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span> ? (\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;posts-grid&quot;</span>&gt;</span>\n    {data.posts.map(post =&gt; (\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ArticleCard</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{post.id}</span> <span class=\"hljs-attr\">article</span>=<span class=\"hljs-string\">{post}</span> /&gt;</span>\n    ))}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n) : (\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;empty-state&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>暂无文章<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n)}\n</code></pre>\n<h2 id=\"toc-3fce07\">🛣️ 路由系统扩展</h2>\n<h3 id=\"toc-1cc648\">📍 创建新的页面路由</h3>\n<h4 id=\"toc-8d5a9c\">1. 静态路由</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// src/routes/my-custom-page.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { renderToString } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom/server&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DatabaseSchema</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../types.ts&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Layout</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../components/Layout.tsx&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MyCustomPage</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;{ <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DatabaseSchema</span> }&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ data }</span>) =&gt;</span> (\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;我的自定义页面&quot;</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{data}</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;custom-page&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>欢迎来到我的自定义页面<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>这是一个自定义的页面内容<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout</span>&gt;</span></span>\n)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">_request</span>: <span class=\"hljs-title class_\">Request</span></span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Response</span>&gt; {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> data = (globalThis <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">any</span>).<span class=\"hljs-property\">__LUMOS_DATA__</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">DatabaseSchema</span>\n    <span class=\"hljs-keyword\">if</span> (!data) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(<span class=\"hljs-string\">&#x27;Server not initialized&#x27;</span>, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">500</span> })\n    }\n\n    <span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-string\">&#x27;&lt;!DOCTYPE html&gt;&#x27;</span> + <span class=\"hljs-title function_\">renderToString</span>(\n      <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-title class_\">MyCustomPage</span>, { data })\n    )\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(html, {\n      <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;text/html; charset=utf-8&#x27;</span> }\n    })\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;页面渲染错误:&#x27;</span>, error)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(<span class=\"hljs-string\">&#x27;Internal Server Error&#x27;</span>, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">500</span> })\n  }\n}\n</code></pre>\n<h4 id=\"toc-d446dd\">2. 动态路由</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// src/routes/custom/[slug].tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { renderToString } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom/server&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DatabaseSchema</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../types.ts&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Layout</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../components/Layout.tsx&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">CustomDynamicPage</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;{\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DatabaseSchema</span>,\n  <span class=\"hljs-attr\">slug</span>: <span class=\"hljs-built_in\">string</span>\n}&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ data, slug }</span>) =&gt;</span> (\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">自定义页面</span> <span class=\"hljs-attr\">-</span> ${<span class=\"hljs-attr\">slug</span>}`} <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{data}</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;custom-dynamic-page&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>动态页面: {slug}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>这是一个动态生成的自定义页面<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout</span>&gt;</span></span>\n)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-params\">\n  <span class=\"hljs-attr\">request</span>: <span class=\"hljs-title class_\">Request</span>,\n  <span class=\"hljs-attr\">params</span>: { slug: <span class=\"hljs-built_in\">string</span> }\n</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Response</span>&gt; {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> data = (globalThis <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">any</span>).<span class=\"hljs-property\">__LUMOS_DATA__</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">DatabaseSchema</span>\n    <span class=\"hljs-keyword\">if</span> (!data) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(<span class=\"hljs-string\">&#x27;Server not initialized&#x27;</span>, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">500</span> })\n    }\n\n    <span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-string\">&#x27;&lt;!DOCTYPE html&gt;&#x27;</span> + <span class=\"hljs-title function_\">renderToString</span>(\n      <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-title class_\">CustomDynamicPage</span>, { data, <span class=\"hljs-attr\">slug</span>: params.<span class=\"hljs-property\">slug</span> })\n    )\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(html, {\n      <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;text/html; charset=utf-8&#x27;</span> }\n    })\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;动态页面渲染错误:&#x27;</span>, error)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(<span class=\"hljs-string\">&#x27;Internal Server Error&#x27;</span>, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">500</span> })\n  }\n}\n</code></pre>\n<h3 id=\"toc-16c4b6\">🔌 API 接口开发</h3>\n<h4 id=\"toc-d246cb\">创建自定义 API</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// src/routes/api/custom.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DatabaseSchema</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../types.ts&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">request</span>: <span class=\"hljs-title class_\">Request</span></span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Response</span>&gt; {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> data = (globalThis <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">any</span>).<span class=\"hljs-property\">__LUMOS_DATA__</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">DatabaseSchema</span>\n    <span class=\"hljs-keyword\">if</span> (!data) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(<span class=\"hljs-string\">&#x27;Server not initialized&#x27;</span>, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">500</span> })\n    }\n\n    <span class=\"hljs-comment\">// 处理不同的 HTTP 方法</span>\n    <span class=\"hljs-keyword\">const</span> method = request.<span class=\"hljs-property\">method</span>\n\n    <span class=\"hljs-keyword\">switch</span> (method) {\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;GET&#x27;</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">handleGet</span>(data, request)\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;POST&#x27;</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">handlePost</span>(data, request)\n      <span class=\"hljs-attr\">default</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(<span class=\"hljs-string\">&#x27;Method not allowed&#x27;</span>, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">405</span> })\n    }\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;API 错误:&#x27;</span>, error)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Response</span>.<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">error</span>: <span class=\"hljs-string\">&#x27;Internal Server Error&#x27;</span> }, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">500</span> })\n  }\n}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleGet</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DatabaseSchema</span>, <span class=\"hljs-attr\">request</span>: <span class=\"hljs-title class_\">Request</span></span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Response</span>&gt; {\n  <span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(request.<span class=\"hljs-property\">url</span>)\n  <span class=\"hljs-keyword\">const</span> query = url.<span class=\"hljs-property\">searchParams</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;query&#x27;</span>)\n\n  <span class=\"hljs-comment\">// 自定义业务逻辑</span>\n  <span class=\"hljs-keyword\">const</span> result = {\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Hello from custom API&#x27;</span>,\n    query,\n    <span class=\"hljs-attr\">timestamp</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">toISOString</span>(),\n    <span class=\"hljs-attr\">stats</span>: {\n      <span class=\"hljs-attr\">posts</span>: data.<span class=\"hljs-property\">posts</span>.<span class=\"hljs-property\">length</span>,\n      <span class=\"hljs-attr\">pages</span>: data.<span class=\"hljs-property\">pages</span>.<span class=\"hljs-property\">length</span>,\n      <span class=\"hljs-attr\">authors</span>: data.<span class=\"hljs-property\">authors</span>.<span class=\"hljs-property\">length</span>\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Response</span>.<span class=\"hljs-title function_\">json</span>(result)\n}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handlePost</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DatabaseSchema</span>, <span class=\"hljs-attr\">request</span>: <span class=\"hljs-title class_\">Request</span></span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Response</span>&gt; {\n  <span class=\"hljs-keyword\">const</span> body = <span class=\"hljs-keyword\">await</span> request.<span class=\"hljs-title function_\">json</span>()\n\n  <span class=\"hljs-comment\">// 处理 POST 请求</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Response</span>.<span class=\"hljs-title function_\">json</span>({\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;POST request received&#x27;</span>,\n    <span class=\"hljs-attr\">data</span>: body\n  })\n}\n</code></pre>\n<h2 id=\"toc-16139c\">🔌 插件系统开发</h2>\n<h3 id=\"toc-4cc7fc\">🧩 插件架构</h3>\n<p>Lumos 的插件系统基于生命周期钩子，允许在博客生成和运行的不同阶段执行自定义逻辑。</p>\n<h4 id=\"toc-05e25d\">插件接口定义</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// src/types.ts</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Plugin</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">version</span>?: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">description</span>?: <span class=\"hljs-built_in\">string</span>\n\n  <span class=\"hljs-comment\">// 生命周期钩子</span>\n  <span class=\"hljs-attr\">onGenerateStart</span>?: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">generator</span>: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">void</span>&gt; | <span class=\"hljs-built_in\">void</span>\n  <span class=\"hljs-attr\">onGenerateEnd</span>?: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DatabaseSchema</span></span>) =&gt;</span> <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">DatabaseSchema</span>&gt; | <span class=\"hljs-title class_\">DatabaseSchema</span>\n  <span class=\"hljs-attr\">onParseFile</span>?: <span class=\"hljs-function\">(<span class=\"hljs-params\">\n    <span class=\"hljs-attr\">filePath</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>,\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;post&#x27;</span> | <span class=\"hljs-string\">&#x27;page&#x27;</span> | <span class=\"hljs-string\">&#x27;author&#x27;</span>\n  </span>) =&gt;</span> <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; | <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">onRender</span>?: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">html</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; | <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">onServerStart</span>?: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-attr\">server</span>: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">void</span>&gt; | <span class=\"hljs-built_in\">void</span>\n}\n</code></pre>\n<h3 id=\"toc-d252a7\">🛠️ 创建自定义插件</h3>\n<h4 id=\"toc-569c00\">1. 基础插件结构</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// plugins/my-custom-plugin.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Plugin</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../src/types.ts&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">myCustomPlugin</span>: <span class=\"hljs-title class_\">Plugin</span> = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;my-custom-plugin&#x27;</span>,\n  <span class=\"hljs-attr\">version</span>: <span class=\"hljs-string\">&#x27;1.0.0&#x27;</span>,\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;我的自定义插件&#x27;</span>,\n\n  <span class=\"hljs-comment\">// 在生成开始时执行</span>\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onGenerateStart</span>(<span class=\"hljs-params\">generator</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;📝 我的插件: 开始生成数据&#x27;</span>)\n    <span class=\"hljs-comment\">// 可以在这里访问和修改生成器</span>\n  },\n\n  <span class=\"hljs-comment\">// 在生成结束时执行，可以修改最终数据</span>\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onGenerateEnd</span>(<span class=\"hljs-params\">data</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;✅ 我的插件: 数据生成完成&#x27;</span>)\n    <span class=\"hljs-comment\">// 可以在这里修改返回的数据</span>\n    <span class=\"hljs-keyword\">return</span> data\n  },\n\n  <span class=\"hljs-comment\">// 在解析文件时执行，可以修改文件内容</span>\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onParseFile</span>(<span class=\"hljs-params\">filePath, content, <span class=\"hljs-keyword\">type</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`📄 我的插件: 解析文件 <span class=\"hljs-subst\">${filePath}</span> (类型: <span class=\"hljs-subst\">${<span class=\"hljs-keyword\">type</span>}</span>)`</span>)\n    <span class=\"hljs-comment\">// 可以在这里修改文件内容</span>\n    <span class=\"hljs-keyword\">return</span> content\n  },\n\n  <span class=\"hljs-comment\">// 在渲染时执行，可以修改 HTML 输出</span>\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onRender</span>(<span class=\"hljs-params\">html, data</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;🖥️ 我的插件: 渲染页面&#x27;</span>)\n    <span class=\"hljs-comment\">// 可以在这里修改 HTML 输出</span>\n    <span class=\"hljs-keyword\">return</span> html\n  },\n\n  <span class=\"hljs-comment\">// 在服务器启动时执行</span>\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onServerStart</span>(<span class=\"hljs-params\">server</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;🚀 我的插件: 服务器启动&#x27;</span>)\n    <span class=\"hljs-comment\">// 可以在这里访问服务器实例</span>\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> myCustomPlugin\n</code></pre>\n<h4 id=\"toc-014afc\">2. 插件配置</h4>\n<p>在 <code>lumos.config.json</code> 中配置插件：</p>\n<pre><code class=\"hljs lang-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;plugins&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;my-custom-plugin&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;enabled&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;options&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">&quot;customOption&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;value&quot;</span>\n      <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h4 id=\"toc-798cd4\">3. 高级插件示例</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// plugins/word-count-plugin.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Plugin</span>, <span class=\"hljs-title class_\">DatabaseSchema</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../src/types.ts&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">wordCountPlugin</span>: <span class=\"hljs-title class_\">Plugin</span> = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;word-count-plugin&#x27;</span>,\n  <span class=\"hljs-attr\">version</span>: <span class=\"hljs-string\">&#x27;1.0.0&#x27;</span>,\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;文章字数统计插件&#x27;</span>,\n\n  <span class=\"hljs-comment\">// 在解析文件时统计字数</span>\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onParseFile</span>(<span class=\"hljs-params\">filePath, content, <span class=\"hljs-keyword\">type</span></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">type</span> === <span class=\"hljs-string\">&#x27;post&#x27;</span>) {\n      <span class=\"hljs-comment\">// 统计字数的逻辑</span>\n      <span class=\"hljs-keyword\">const</span> wordCount = content\n        .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;[^&gt;]*&gt;/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)\n        .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\s+/g</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>)\n        .<span class=\"hljs-title function_\">trim</span>()\n        .<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>).<span class=\"hljs-property\">length</span>\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`📝 文件 <span class=\"hljs-subst\">${filePath}</span> 字数统计: <span class=\"hljs-subst\">${wordCount}</span>`</span>)\n    }\n    <span class=\"hljs-keyword\">return</span> content\n  },\n\n  <span class=\"hljs-comment\">// 在生成结束时添加字数统计到数据中</span>\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onGenerateEnd</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DatabaseSchema</span></span>) {\n    <span class=\"hljs-comment\">// 为每篇文章添加字数统计</span>\n    <span class=\"hljs-keyword\">const</span> postsWithWordCount = data.<span class=\"hljs-property\">posts</span>.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> ({\n      ...post,\n      <span class=\"hljs-attr\">wordCount</span>: post.<span class=\"hljs-property\">content</span>\n        ? post.<span class=\"hljs-property\">content</span>\n            .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;[^&gt;]*&gt;/g</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)\n            .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\s+/g</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>)\n            .<span class=\"hljs-title function_\">trim</span>()\n            .<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>).<span class=\"hljs-property\">length</span>\n        : <span class=\"hljs-number\">0</span>\n    }))\n\n    <span class=\"hljs-keyword\">return</span> {\n      ...data,\n      <span class=\"hljs-attr\">posts</span>: postsWithWordCount\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> wordCountPlugin\n</code></pre>\n<h3 id=\"toc-ea52c1\">🔧 插件开发最佳实践</h3>\n<h4 id=\"toc-412f92\">1. 错误处理</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onGenerateEnd</span>(<span class=\"hljs-params\">data</span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// 插件逻辑</span>\n    <span class=\"hljs-keyword\">return</span> data\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">`插件 <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span> 执行失败:`</span>, error)\n    <span class=\"hljs-comment\">// 返回原始数据而不是抛出错误</span>\n    <span class=\"hljs-keyword\">return</span> data\n  }\n}\n</code></pre>\n<h4 id=\"toc-2a2cc7\">2. 性能优化</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 避免在每次调用时执行昂贵的操作</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">cachedData</span>: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-literal\">null</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onGenerateEnd</span>(<span class=\"hljs-params\">data</span>) {\n  <span class=\"hljs-keyword\">if</span> (!cachedData) {\n    <span class=\"hljs-comment\">// 执行昂贵的计算</span>\n    cachedData = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">expensiveComputation</span>(data)\n  }\n  <span class=\"hljs-keyword\">return</span> {\n    ...data,\n    cachedData\n  }\n}\n</code></pre>\n<h4 id=\"toc-9aaea5\">3. 配置管理</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onGenerateStart</span>(<span class=\"hljs-params\">generator</span>) {\n  <span class=\"hljs-comment\">// 从插件配置中获取选项</span>\n  <span class=\"hljs-keyword\">const</span> config = generator.<span class=\"hljs-property\">pluginConfigs</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>]\n  <span class=\"hljs-keyword\">const</span> options = config?.<span class=\"hljs-property\">options</span> || {}\n\n  <span class=\"hljs-comment\">// 使用配置选项</span>\n  <span class=\"hljs-keyword\">if</span> (options.<span class=\"hljs-property\">customOption</span>) {\n    <span class=\"hljs-comment\">// 根据配置执行不同的逻辑</span>\n  }\n}\n</code></pre>\n<h2 id=\"toc-a5d892\">🎨 主题系统开发</h2>\n<h3 id=\"toc-39b27f\">🧩 主题架构</h3>\n<p>Lumos 的主题系统允许开发者创建和使用自定义主题来改变博客的外观和功能。</p>\n<h4 id=\"toc-525c30\">主题目录结构</h4>\n<pre><code class=\"hljs lang-nix\">themes<span class=\"hljs-symbol\">/</span>\n└── my-theme<span class=\"hljs-symbol\">/</span>             <span class=\"hljs-comment\"># 自定义主题目录</span>\n    ├── assets<span class=\"hljs-symbol\">/</span>           <span class=\"hljs-comment\"># 主题静态资源</span>\n    │   ├── styles<span class=\"hljs-symbol\">/</span>       <span class=\"hljs-comment\"># 样式文件</span>\n    │   └── images<span class=\"hljs-symbol\">/</span>       <span class=\"hljs-comment\"># 图片资源</span>\n    ├── components<span class=\"hljs-symbol\">/</span>       <span class=\"hljs-comment\"># 主题组件</span>\n    │   └── Layout.tsx    <span class=\"hljs-comment\"># 布局组件</span>\n    └── routes<span class=\"hljs-symbol\">/</span>           <span class=\"hljs-comment\"># 主题路由</span>\n        ├── index.tsx     <span class=\"hljs-comment\"># 首页</span>\n        ├── posts.tsx     <span class=\"hljs-comment\"># 文章列表页</span>\n        └── post<span class=\"hljs-operator\">/</span>[url].tsx <span class=\"hljs-comment\"># 文章详情页</span>\n</code></pre>\n<h3 id=\"toc-ba50e5\">🎨 创建自定义主题</h3>\n<h4 id=\"toc-4c87fa\">1. 创建主题目录结构</h4>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-built_in\">mkdir</span> -p themes/my-custom-theme/{assets,components,routes}\n</code></pre>\n<h4 id=\"toc-a3e09a\">2. 创建布局组件</h4>\n<pre><code class=\"hljs lang-tsx\"><span class=\"hljs-comment\">// themes/my-custom-theme/components/Layout.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DatabaseSchema</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../../src/types.ts&#x27;</span>\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">LayoutProps</span> {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">children</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">ReactNode</span>\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DatabaseSchema</span>\n  <span class=\"hljs-attr\">description</span>?: <span class=\"hljs-built_in\">string</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Layout</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;<span class=\"hljs-title class_\">LayoutProps</span>&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{\n  title,\n  children,\n  data,\n  description = <span class=\"hljs-string\">&#x27;我的自定义博客&#x27;</span>\n}</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;zh-CN&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charSet</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>{title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;description&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">{description}</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/assets/styles/my-theme.css&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;my-custom-theme&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;site-title&quot;</span>&gt;</span>我的自定义博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;navigation&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/posts&quot;</span>&gt;</span>文章<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/about&quot;</span>&gt;</span>关于<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;main-content&quot;</span>&gt;</span>{children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-symbol\">&amp;copy;</span> {new Date().getFullYear()} 我的自定义博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>文章: {data.posts?.length || 0} 篇<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<h4 id=\"toc-7a21a8\">3. 创建路由页面</h4>\n<pre><code class=\"hljs lang-tsx\"><span class=\"hljs-comment\">// themes/my-custom-theme/routes/index.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { renderToString } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom/server&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DatabaseSchema</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../../src/types.ts&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Layout</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../components/Layout.tsx&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">HomePage</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;{ <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DatabaseSchema</span> }&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ data }</span>) =&gt;</span> (\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;home-page&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>欢迎来到我的博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>这是使用自定义主题的首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;latest-posts&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>最新文章<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;posts-list&quot;</span>&gt;</span>\n        {data.posts.slice(0, 5).map(post =&gt; (\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{post.id}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;post-item&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{</span>`/<span class=\"hljs-attr\">post</span>/${<span class=\"hljs-attr\">post.alias</span>}`}&gt;</span>{post.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;post-excerpt&quot;</span>&gt;</span>{post.excerpt}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;post-meta&quot;</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;post-date&quot;</span>&gt;</span>{post.date}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n              {post.categories &amp;&amp; post.categories.length &gt; 0 &amp;&amp; (\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;post-categories&quot;</span>&gt;</span>分类: {post.categories.join(&#x27;, &#x27;)}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n              )}\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span>\n        ))}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">_request</span>: <span class=\"hljs-title class_\">Request</span></span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Response</span>&gt; {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> data = (globalThis <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">any</span>).<span class=\"hljs-property\">__LUMOS_DATA__</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">DatabaseSchema</span>\n    <span class=\"hljs-keyword\">if</span> (!data) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(<span class=\"hljs-string\">&#x27;Server not initialized&#x27;</span>, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">500</span> })\n    }\n\n    <span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-string\">&#x27;&lt;!DOCTYPE html&gt;&#x27;</span> + <span class=\"hljs-title function_\">renderToString</span>(<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-title class_\">HomePage</span>, { data }))\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(html, {\n      <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;text/html; charset=utf-8&#x27;</span> }\n    })\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;首页渲染错误:&#x27;</span>, error)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(<span class=\"hljs-string\">&#x27;Internal Server Error&#x27;</span>, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">500</span> })\n  }\n}\n</code></pre>\n<h4 id=\"toc-0e7d36\">4. 配置主题</h4>\n<p>在 <code>lumos.config.json</code> 中切换到新主题：</p>\n<pre><code class=\"hljs lang-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;theme&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;my-custom-theme&quot;</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h3 id=\"toc-29a4ba\">🎨 主题开发最佳实践</h3>\n<h4 id=\"toc-170f32\">1. 样式组织</h4>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-comment\">/* themes/my-custom-theme/assets/styles/my-theme.css */</span>\n<span class=\"hljs-selector-pseudo\">:root</span> {\n  <span class=\"hljs-attr\">--primary-color</span>: <span class=\"hljs-number\">#3b82f6</span>;\n  <span class=\"hljs-attr\">--secondary-color</span>: <span class=\"hljs-number\">#64748b</span>;\n  <span class=\"hljs-attr\">--background-color</span>: <span class=\"hljs-number\">#f8fafc</span>;\n  <span class=\"hljs-attr\">--text-color</span>: <span class=\"hljs-number\">#1e293b</span>;\n}\n\n<span class=\"hljs-selector-class\">.my-custom-theme</span> {\n  <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&#x27;Inter&#x27;</span>, sans-serif;\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">var</span>(--background-color);\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--text-color);\n}\n\n<span class=\"hljs-selector-class\">.header</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">var</span>(--primary-color);\n  <span class=\"hljs-attribute\">color</span>: white;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">1rem</span>;\n}\n\n<span class=\"hljs-selector-class\">.site-title</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">2rem</span>;\n  <span class=\"hljs-attribute\">font-weight</span>: bold;\n}\n\n<span class=\"hljs-selector-class\">.navigation</span> <span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">color</span>: white;\n  <span class=\"hljs-attribute\">text-decoration</span>: none;\n  <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">1rem</span>;\n}\n\n<span class=\"hljs-selector-class\">.navigation</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">text-decoration</span>: underline;\n}\n</code></pre>\n<h4 id=\"toc-5cc338\">2. 响应式设计</h4>\n<pre><code class=\"hljs lang-tsx\"><span class=\"hljs-comment\">// 在组件中使用响应式类名</span>\n&lt;div className=<span class=\"hljs-string\">&quot;container mx-auto px-4 sm:px-6 lg:px-8&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;</span>&gt;</span>{/* 内容 */}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/div&gt;\n</code></pre>\n<h4 id=\"toc-fdae81\">3. 主题继承</h4>\n<p>可以通过扩展默认主题来创建自定义主题，只需覆盖需要修改的部分：</p>\n<pre><code class=\"hljs lang-tsx\"><span class=\"hljs-comment\">// themes/my-custom-theme/components/Layout.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DatabaseSchema</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../../src/types.ts&#x27;</span>\n<span class=\"hljs-comment\">// 导入默认主题的布局组件</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Layout</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">DefaultLayout</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../default/components/Layout.tsx&#x27;</span>\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">LayoutProps</span> {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">children</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">ReactNode</span>\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DatabaseSchema</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Layout</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;<span class=\"hljs-title class_\">LayoutProps</span>&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ title, children, data }</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 在默认布局基础上进行自定义</span>\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DefaultLayout</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{</span>`[<span class=\"hljs-attr\">自定义</span>] ${<span class=\"hljs-attr\">title</span>}`} <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{data}</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;custom-wrapper&quot;</span>&gt;</span>{children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DefaultLayout</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<h2 id=\"toc-38686e\">📊 数据使用</h2>\n<h3 id=\"toc-edc843\">🔍 在组件中使用数据</h3>\n<h4 id=\"toc-23be8f\">1. 获取全局数据</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 在路由处理器中获取数据</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">_request</span>: <span class=\"hljs-title class_\">Request</span></span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Response</span>&gt; {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> data = (globalThis <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">any</span>).<span class=\"hljs-property\">__LUMOS_DATA__</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">DatabaseSchema</span>\n    <span class=\"hljs-keyword\">if</span> (!data) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(<span class=\"hljs-string\">&#x27;Server not initialized&#x27;</span>, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">500</span> })\n    }\n\n    <span class=\"hljs-comment\">// 使用数据进行渲染</span>\n    <span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-string\">&#x27;&lt;!DOCTYPE html&gt;&#x27;</span> + <span class=\"hljs-title function_\">renderToString</span>(<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-title class_\">MyComponent</span>, { data }))\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(html, {\n      <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;text/html; charset=utf-8&#x27;</span> }\n    })\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;渲染错误:&#x27;</span>, error)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(<span class=\"hljs-string\">&#x27;Internal Server Error&#x27;</span>, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">500</span> })\n  }\n}\n</code></pre>\n<h4 id=\"toc-e583f9\">2. 在组件中处理数据</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 在 React 组件中使用数据</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MyComponent</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;{ <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">DatabaseSchema</span> }&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ data }</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 获取最新文章</span>\n  <span class=\"hljs-keyword\">const</span> latestPosts = data.<span class=\"hljs-property\">posts</span>\n    .<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> post.<span class=\"hljs-property\">published</span>)\n    .<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(b.<span class=\"hljs-property\">date</span>).<span class=\"hljs-title function_\">getTime</span>() - <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(a.<span class=\"hljs-property\">date</span>).<span class=\"hljs-title function_\">getTime</span>())\n    .<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>)\n\n  <span class=\"hljs-comment\">// 获取分类统计</span>\n  <span class=\"hljs-keyword\">const</span> categoryStats = data.<span class=\"hljs-property\">categories</span>.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">category</span> =&gt;</span> ({\n    ...category,\n    <span class=\"hljs-attr\">postCount</span>: data.<span class=\"hljs-property\">posts</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span>\n      post.<span class=\"hljs-property\">categories</span>?.<span class=\"hljs-title function_\">includes</span>(category.<span class=\"hljs-property\">title</span>)\n    ).<span class=\"hljs-property\">length</span>\n  }))\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>最新文章<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n      {latestPosts.map(post =&gt; (\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{post.id}</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>{post.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{post.excerpt}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      ))}\n\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>分类统计<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n      {categoryStats.map(category =&gt; (\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{category.id}</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{category.title}: {category.postCount} 篇<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      ))}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<h2 id=\"toc-9e2bc4\">🧪 测试与调试</h2>\n<h3 id=\"toc-ebc7f0\">🔍 基本测试</h3>\n<h4 id=\"toc-31a26e\">1. 组件测试</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 简单的组件测试示例</span>\n<span class=\"hljs-keyword\">import</span> { describe, it, expect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vitest&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { render } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@testing-library/react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Layout</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../Layout.tsx&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> mockData = {\n  <span class=\"hljs-attr\">posts</span>: [],\n  <span class=\"hljs-attr\">pages</span>: [],\n  <span class=\"hljs-attr\">authors</span>: [],\n  <span class=\"hljs-attr\">categories</span>: [],\n  <span class=\"hljs-attr\">tags</span>: []\n}\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Layout Component&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;renders with correct title&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { getByText } = <span class=\"hljs-title function_\">render</span>(\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Test Page&quot;</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{mockData}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Test Content<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout</span>&gt;</span></span>\n    )\n\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">getByText</span>(<span class=\"hljs-string\">&#x27;Test Page&#x27;</span>)).<span class=\"hljs-title function_\">toBeInTheDocument</span>()\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">getByText</span>(<span class=\"hljs-string\">&#x27;Test Content&#x27;</span>)).<span class=\"hljs-title function_\">toBeInTheDocument</span>()\n  })\n})\n</code></pre>\n<h3 id=\"toc-eba436\">🐛 调试技巧</h3>\n<h4 id=\"toc-da9f41\">1. 开发模式调试</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 简单的调试工具</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debugLog</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">data</span>?: <span class=\"hljs-built_in\">any</span></span>) {\n  <span class=\"hljs-keyword\">if</span> (process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> === <span class=\"hljs-string\">&#x27;development&#x27;</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`[DEBUG] <span class=\"hljs-subst\">${message}</span>`</span>, data)\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debugError</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">error</span>: <span class=\"hljs-title class_\">Error</span>, <span class=\"hljs-attr\">context</span>?: <span class=\"hljs-built_in\">string</span></span>) {\n  <span class=\"hljs-keyword\">if</span> (process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> === <span class=\"hljs-string\">&#x27;development&#x27;</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">`[ERROR] <span class=\"hljs-subst\">${context || <span class=\"hljs-string\">&#x27;Unknown context&#x27;</span>}</span>:`</span>, error)\n  }\n}\n</code></pre>\n<h4 id=\"toc-391598\">2. 服务器调试</h4>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 启动开发服务器进行调试</span>\nbun run dev\n\n<span class=\"hljs-comment\"># 查看服务器日志</span>\n<span class=\"hljs-built_in\">tail</span> -f logs/server.log\n</code></pre>\n<h2 id=\"toc-6a2067\">🚀 部署</h2>\n<h3 id=\"toc-4cfaea\">📦 基本部署</h3>\n<h4 id=\"toc-89f3b8\">1. 构建项目</h4>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 生成数据文件</span>\nlumos gen\n\n<span class=\"hljs-comment\"># 构建项目</span>\nbun run build\n\n<span class=\"hljs-comment\"># 启动生产服务器</span>\nlumos server -p 3000\n</code></pre>\n<h4 id=\"toc-270c02\">2. 环境变量配置</h4>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># .env 文件</span>\nNODE_ENV=production\nPORT=3000\nHOST=0.0.0.0\n</code></pre>\n<h4 id=\"toc-0fdc0e\">3. 简单部署</h4>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 使用 Bun 直接运行</span>\nbun run src/cli.ts server -p 3000\n\n<span class=\"hljs-comment\"># 或使用 systemd 服务</span>\n<span class=\"hljs-built_in\">sudo</span> systemctl start lumos-blog\n</code></pre>\n<h4 id=\"toc-7c1807\">4. Bun 特有的部署优势</h4>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># Bun 的快速启动</span>\nbun --bun src/cli.ts server\n\n<span class=\"hljs-comment\"># 使用 Bun 的打包功能</span>\nbun build src/cli.ts --outdir ./dist --target bun\n</code></pre>\n<h2 id=\"toc-68dc60\">📚 最佳实践</h2>\n<h3 id=\"toc-6d53a1\">🎯 开发规范</h3>\n<h4 id=\"toc-665301\">1. 代码组织</h4>\n<pre><code class=\"hljs lang-nix\">src<span class=\"hljs-symbol\">/</span>\n├── components<span class=\"hljs-symbol\">/</span>          <span class=\"hljs-comment\"># React 组件</span>\n├── routes<span class=\"hljs-symbol\">/</span>             <span class=\"hljs-comment\"># 路由处理器</span>\n├── utils<span class=\"hljs-symbol\">/</span>              <span class=\"hljs-comment\"># 工具函数</span>\n└── types.ts            <span class=\"hljs-comment\"># 类型定义</span>\n</code></pre>\n<h4 id=\"toc-dab5c8\">2. 命名规范</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 组件命名：PascalCase</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ArticleCard</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;<span class=\"hljs-title class_\">Props</span>&gt; = <span class=\"hljs-function\">() =&gt;</span> {}\n\n<span class=\"hljs-comment\">// 函数命名：camelCase</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">parseMarkdownFile</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">filePath</span>: <span class=\"hljs-built_in\">string</span></span>) {}\n\n<span class=\"hljs-comment\">// 类型命名：PascalCase</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">DatabaseSchema</span> {}\n</code></pre>\n<h4 id=\"toc-8b1d33\">3. 错误处理</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 简单的错误处理</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleError</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">error</span>: <span class=\"hljs-built_in\">unknown</span></span>): <span class=\"hljs-title class_\">Response</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;Error:&#x27;</span>, error)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(<span class=\"hljs-string\">&#x27;Internal Server Error&#x27;</span>, { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">500</span> })\n}\n</code></pre>\n<h3 id=\"toc-2856f2\">🔧 维护指南</h3>\n<h4 id=\"toc-58cd3c\">1. 版本管理</h4>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 更新版本</span>\nnpm version patch  <span class=\"hljs-comment\"># 补丁版本</span>\nnpm version minor  <span class=\"hljs-comment\"># 小版本</span>\nnpm version major  <span class=\"hljs-comment\"># 大版本</span>\n</code></pre>\n<h4 id=\"toc-fb3803\">2. 代码提交</h4>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 提交代码</span>\ngit add .\ngit commit -m <span class=\"hljs-string\">&quot;feat: 添加新功能&quot;</span>\ngit push origin main\n</code></pre>\n<h3 id=\"toc-9cc599\">🚀 Bun 开发最佳实践</h3>\n<h4 id=\"toc-f39481\">1. 使用 Bun 的包管理器</h4>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 安装依赖</span>\nbun install\n\n<span class=\"hljs-comment\"># 添加新依赖</span>\nbun add react react-dom\n\n<span class=\"hljs-comment\"># 添加开发依赖</span>\nbun add -d @types/react @types/react-dom\n</code></pre>\n<h4 id=\"toc-d5722e\">2. 利用 Bun 的性能优势</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 使用 Bun 的并行处理</span>\n<span class=\"hljs-keyword\">const</span> results = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([\n  <span class=\"hljs-title class_\">Bun</span>.<span class=\"hljs-title function_\">file</span>(<span class=\"hljs-string\">&#x27;file1.json&#x27;</span>).<span class=\"hljs-title function_\">text</span>(),\n  <span class=\"hljs-title class_\">Bun</span>.<span class=\"hljs-title function_\">file</span>(<span class=\"hljs-string\">&#x27;file2.json&#x27;</span>).<span class=\"hljs-title function_\">text</span>(),\n  <span class=\"hljs-title class_\">Bun</span>.<span class=\"hljs-title function_\">file</span>(<span class=\"hljs-string\">&#x27;file3.json&#x27;</span>).<span class=\"hljs-title function_\">text</span>()\n])\n\n<span class=\"hljs-comment\">// 使用 Bun 的快速 JSON 解析</span>\n<span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Bun</span>.<span class=\"hljs-title function_\">file</span>(<span class=\"hljs-string\">&#x27;data.json&#x27;</span>).<span class=\"hljs-title function_\">text</span>())\n</code></pre>\n<h4 id=\"toc-34eec4\">3. Bun 特有的类型支持</h4>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// 使用 Bun 的类型定义</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">type</span> { <span class=\"hljs-title class_\">BunFile</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;bun&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">file</span>: <span class=\"hljs-title class_\">BunFile</span> = <span class=\"hljs-title class_\">Bun</span>.<span class=\"hljs-title function_\">file</span>(<span class=\"hljs-string\">&#x27;example.txt&#x27;</span>)\n<span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-keyword\">await</span> file.<span class=\"hljs-title function_\">text</span>()\n</code></pre>\n<h2 id=\"toc-cca050\">🎉 总结</h2>\n<p>通过本教程，你已经学会了：</p>\n<ul>\n<li>🏗️ <strong>项目架构理解</strong>: 深入理解 Lumos 基于 Bun 的核心架构</li>\n<li>⚛️ <strong>React 组件开发</strong>: 创建自定义组件和布局系统</li>\n<li>🛣️ <strong>路由扩展</strong>: 使用 Bun FileSystemRouter 添加新页面和 API</li>\n<li>🔌 <strong>插件开发</strong>: 创建自定义插件扩展功能</li>\n<li>🎨 <strong>主题开发</strong>: 创建自定义主题改变外观</li>\n<li>📊 <strong>数据使用</strong>: 在组件中使用和处理数据</li>\n<li>🧪 <strong>测试调试</strong>: 基本的测试和调试技巧</li>\n<li>🚀 <strong>Bun 部署</strong>: 利用 Bun 的性能优势进行部署</li>\n</ul>\n<h3 id=\"toc-be4bb2\">🚀 Bun 的优势</h3>\n<ul>\n<li><strong>极速启动</strong>: 冷启动时间 &lt; 100ms</li>\n<li><strong>内置工具</strong>: 包管理器、测试框架、打包工具一体化</li>\n<li><strong>原生 TypeScript</strong>: 无需额外配置</li>\n<li><strong>高性能</strong>: 比 Node.js 快 3-5 倍</li>\n</ul>\n<p>现在你可以开始你的 Lumos 二次开发之旅了！🚀</p>\n<p>如需了解更多关于 Lumos CLI 命令的使用方法，请参阅 <a href=\"./lumos-cli-usage.md\">Lumos CLI 使用指南</a>。</p>\n<h2 id=\"toc-69b008\">🤝 社区支持</h2>\n<ul>\n<li>💬 <a href=\"https://github.com/your-username/lumos/discussions\">GitHub Discussions</a> - 技术讨论</li>\n<li>🐛 <a href=\"https://github.com/your-username/lumos/issues\">Issue 报告</a> - 问题反馈</li>\n<li>📝 <a href=\"https://github.com/your-username/lumos/blob/main/CONTRIBUTING.md\">贡献指南</a> - 参与贡献</li>\n</ul>\n<h2 id=\"toc-c707be\">📄 许可证</h2>\n<p>MIT License - 详见 <a href=\"https://github.com/your-username/lumos/blob/main/LICENSE\">LICENSE</a> 文件</p>\n",
      "mdContent": "\n# 🛠️ Lumos 二次开发教程\n\n本教程将深入介绍如何对 Lumos 静态博客生成器进行二次开发，包括项目架构解析、自定义组件开发、路由扩展等核心功能。适合有一定前端开发经验的开发者。\n\n在开始二次开发之前，建议您先了解 Lumos 的基本概念和使用方法。请参阅 [README](../README.md) 和 [Lumos 项目介绍](./lumos-introduce.md) 以获取更多基础信息，参阅 [Lumos CLI 使用指南](./lumos-cli-usage.md) 了解命令行工具的使用方法。\n\n## 📚 相关资源\n\n- 📚 [Lumos 项目文档](./lumos-introduce.md) - 项目介绍和基础使用\n- 🛠️ [CLI 使用指南](./lumos-cli-usage.md) - 命令行工具使用说明\n- 📖 [README 文档](../README.md) - 项目完整文档\n\n## 🎯 学习目标\n\n通过本教程，你将学会：\n\n- 🏗️ **项目架构理解**: 深入理解 Lumos 的核心架构和设计理念\n- ⚛️ **React 组件开发**: 创建自定义的 React 组件和布局\n- 🛣️ **路由扩展**: 添加新的页面路由和 API 接口\n- 🔌 **插件开发**: 创建自定义插件扩展功能\n- 🎨 **主题开发**: 创建自定义主题改变外观\n- 🧪 **测试调试**: 建立完善的测试和调试环境\n\n## 🚀 开发环境搭建\n\n### 📋 前置要求\n\n- 🚀 **Bun**: 现代化的 JavaScript 运行时（必需）\n- 🎨 **代码编辑器**: VS Code 或 WebStorm\n- 🔧 **Git**: 版本控制工具\n\n### ⚙️ 环境配置\n\n```bash\n# 1️⃣ 安装 Bun (如果尚未安装)\ncurl -fsSL https://bun.sh/install | bash\n\n# 2️⃣ 克隆项目或进入项目目录\ncd lumos\n\n# 3️⃣ 安装项目依赖\nbun install\n\n# 4️⃣ 构建项目\nbun run build\n\n# 5️⃣ 启动开发服务器\nbun run dev\n```\n\n### 🔧 开发工具配置\n\n#### VS Code 推荐插件\n\n```json\n{\n  \"recommendations\": [\n    \"bradlc.vscode-tailwindcss\",\n    \"ms-vscode.vscode-typescript-next\",\n    \"esbenp.prettier-vscode\",\n    \"ms-vscode.vscode-eslint\",\n    \"bradlc.vscode-tailwindcss\"\n  ]\n}\n```\n\n#### 调试配置\n\n在 `.vscode/launch.json` 中添加：\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Lumos Server\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/src/cli.ts\",\n      \"args\": [\"server\", \"-p\", \"3060\"],\n      \"runtimeExecutable\": \"bun\",\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\n```\n\n### 🚀 Bun 特有功能\n\n#### 1. 使用 Bun 的 FileSystemRouter\n\n```typescript\n// src/server.ts 中的路由配置\nconst router = new Bun.FileSystemRouter({\n  style: 'nextjs',\n  dir: join(process.cwd(), 'src/routes')\n})\n```\n\n#### 2. 使用 Bun 的文件 API\n\n```typescript\n// 读取文件\nconst file = Bun.file('data.json')\nconst content = await file.text()\n\n// 写入文件\nawait Bun.write('output.json', JSON.stringify(data, null, 2))\n```\n\n#### 3. 使用 Bun 的 HTTP 服务器\n\n```typescript\n// 创建 HTTP 服务器\nconst server = Bun.serve({\n  port: 3000,\n  fetch(request) {\n    return new Response('Hello from Bun!')\n  }\n})\n```\n\n## 🏗️ 项目架构深度解析\n\n### 📂 核心目录结构\n\n```\nlumos/\n├── 📁 source/               # 内容源目录\n│   ├── 📁 _authors/         # 作者 Markdown 文件\n│   ├── 📁 _pages/          # 页面 Markdown 文件\n│   ├── 📁 _posts/          # 文章 Markdown 文件\n│   ├── 📁 _jsons/          # JSON 配置文件\n│   └── 📁 _ymls/           # YAML 配置文件\n├── 📁 src/                  # 源码目录（核心开发区域）\n│   ├── 📄 cli.ts           # CLI 命令行工具\n│   ├── 📁 components/      # React 组件库\n│   ├── 📁 routes/          # 路由处理器\n│   ├── 📄 server.ts        # HTTP 服务器\n│   ├── 📄 generator.ts     # 数据生成器\n│   ├── 📄 parser.ts        # 文件解析器\n│   ├── 📄 renderer.tsx     # 渲染引擎\n│   ├── 📄 utils.ts         # 工具函数\n│   ├── 📄 plugin-manager.ts # 插件管理器\n│   └── 📄 theme-manager.ts  # 主题管理器\n├── 📁 assets/               # 静态资源目录\n│   ├── 📁 styles/          # 样式文件\n│   ├── 📁 javascript/      # JavaScript 文件\n│   ├── 📁 images/          # 图片资源\n│   └── 📁 fonts/           # 字体文件\n├── 📁 bundler/              # Bun HTML Bundling 目录\n│   ├── 📁 html/            # HTML 源文件\n│   │   ├── 📄 index.html   # 首页 HTML 入口\n│   │   ├── 📄 app.tsx      # React 组件\n│   │   └── 📄 about.html   # 关于页面 HTML 入口\n│   └── 📁 dist/            # 构建输出目录\n├── 📁 templates/            # 模板文件\n├── 📁 plugins/              # 插件目录\n├── 📁 themes/               # 主题目录\n├── 📄 lumos.config.json     # 配置文件\n├── 📄 package.json          # 项目配置\n├── 📄 tsconfig.json         # TypeScript 配置\n├── 📄 tailwind.config.js    # Tailwind CSS 配置\n├── 📄 lumos                 # CLI 可执行文件\n└── 📄 data.json             # 生成的数据文件\n```\n\n### 🔧 核心模块说明\n\n- **📄 cli.ts**: 命令行接口，处理用户输入和命令分发\n- **📄 server.ts**: HTTP 服务器，基于 Bun 的 FileSystemRouter\n- **📄 generator.ts**: 数据生成器，解析文件并生成结构化数据\n- **📄 parser.ts**: 文件解析器，处理 Markdown、JSON、YAML 文件\n- **📄 renderer.tsx**: 渲染引擎，将 React 组件渲染为 HTML\n- **📄 plugin-manager.ts**: 插件管理器，负责加载和执行插件\n- **📄 theme-manager.ts**: 主题管理器，负责加载和管理主题\n- **📁 components/**: React 组件库，可扩展的 UI 组件\n- **📁 routes/**: 路由处理器，定义页面和 API 路由\n- **📁 bundler/**: Bun HTML Bundling 目录，用于创建高优先级的静态页面\n\n## ⚛️ React 组件开发\n\n### 🧩 组件架构\n\nLumos 使用 React + TypeScript 构建组件系统，所有组件都支持 SSR 渲染。\n\n#### 基础组件结构\n\n```typescript\n// src/components/MyComponent.tsx\nimport * as React from 'react'\nimport { DatabaseSchema } from '../types.ts'\n\ninterface MyComponentProps {\n  title: string\n  data: DatabaseSchema\n  children?: React.ReactNode\n}\n\nexport const MyComponent: React.FC<MyComponentProps> = ({\n  title,\n  data,\n  children\n}) => {\n  return (\n    <div className=\"my-component\">\n      <h2>{title}</h2>\n      {children}\n    </div>\n  )\n}\n```\n\n### 🎨 自定义布局组件\n\n#### 创建新的布局组件\n\n```typescript\n// src/components/CustomLayout.tsx\nimport * as React from 'react'\nimport { DatabaseSchema } from '../types.ts'\n\ninterface CustomLayoutProps {\n  title: string\n  children: React.ReactNode\n  data: DatabaseSchema\n  className?: string\n}\n\nexport const CustomLayout: React.FC<CustomLayoutProps> = ({\n  title,\n  children,\n  data,\n  className = ''\n}) => {\n  return (\n    <html lang=\"zh-CN\">\n      <head>\n        <title>{title}</title>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"stylesheet\" href=\"/assets/styles/style.css\" />\n      </head>\n      <body className={`custom-layout ${className}`}>\n        <header className=\"header\">\n          <h1>我的自定义博客</h1>\n          <nav>\n            <a href=\"/\">首页</a>\n            <a href=\"/posts\">文章</a>\n            <a href=\"/about\">关于</a>\n          </nav>\n        </header>\n\n        <main className=\"main-content\">\n          {children}\n        </main>\n\n        <footer className=\"footer\">\n          <p>&copy; 2024 我的博客</p>\n        </footer>\n      </body>\n    </html>\n  )\n}\n```\n\n### 🔧 组件开发最佳实践\n\n#### 1. 类型安全\n\n```typescript\n// 定义严格的 Props 类型\ninterface ArticleCardProps {\n  article: {\n    id: string\n    title: string\n    excerpt: string\n    date: string\n    author?: string\n  }\n  showAuthor?: boolean\n  className?: string\n}\n\nexport const ArticleCard: React.FC<ArticleCardProps> = ({\n  article,\n  showAuthor = true,\n  className = ''\n}) => {\n  // 组件实现\n}\n```\n\n#### 2. 样式管理\n\n```typescript\n// 使用 Tailwind CSS 类名\nconst cardClasses = `\n  bg-white dark:bg-gray-800\n  rounded-lg shadow-md\n  p-6 mb-4\n  hover:shadow-lg transition-shadow\n  ${className}\n`\n\nreturn (\n  <article className={cardClasses}>\n    <h3 className=\"text-xl font-bold mb-2\">{article.title}</h3>\n    <p className=\"text-gray-600 dark:text-gray-300 mb-4\">{article.excerpt}</p>\n    {showAuthor && article.author && (\n      <p className=\"text-sm text-gray-500\">作者: {article.author}</p>\n    )}\n  </article>\n)\n```\n\n#### 3. 条件渲染\n\n```typescript\n// 使用条件渲染优化性能\n{data.posts.length > 0 ? (\n  <div className=\"posts-grid\">\n    {data.posts.map(post => (\n      <ArticleCard key={post.id} article={post} />\n    ))}\n  </div>\n) : (\n  <div className=\"empty-state\">\n    <p>暂无文章</p>\n  </div>\n)}\n```\n\n## 🛣️ 路由系统扩展\n\n### 📍 创建新的页面路由\n\n#### 1. 静态路由\n\n```typescript\n// src/routes/my-custom-page.tsx\nimport * as React from 'react'\nimport { renderToString } from 'react-dom/server'\nimport { DatabaseSchema } from '../types.ts'\nimport { Layout } from '../components/Layout.tsx'\n\nconst MyCustomPage: React.FC<{ data: DatabaseSchema }> = ({ data }) => (\n  <Layout title=\"我的自定义页面\" data={data}>\n    <div className=\"custom-page\">\n      <h1>欢迎来到我的自定义页面</h1>\n      <p>这是一个自定义的页面内容</p>\n    </div>\n  </Layout>\n)\n\nexport default async function handler(_request: Request): Promise<Response> {\n  try {\n    const data = (globalThis as any).__LUMOS_DATA__ as DatabaseSchema\n    if (!data) {\n      return new Response('Server not initialized', { status: 500 })\n    }\n\n    const html = '<!DOCTYPE html>' + renderToString(\n      React.createElement(MyCustomPage, { data })\n    )\n\n    return new Response(html, {\n      headers: { 'Content-Type': 'text/html; charset=utf-8' }\n    })\n  } catch (error) {\n    console.error('页面渲染错误:', error)\n    return new Response('Internal Server Error', { status: 500 })\n  }\n}\n```\n\n#### 2. 动态路由\n\n```typescript\n// src/routes/custom/[slug].tsx\nimport * as React from 'react'\nimport { renderToString } from 'react-dom/server'\nimport { DatabaseSchema } from '../types.ts'\nimport { Layout } from '../components/Layout.tsx'\n\nconst CustomDynamicPage: React.FC<{\n  data: DatabaseSchema,\n  slug: string\n}> = ({ data, slug }) => (\n  <Layout title={`自定义页面 - ${slug}`} data={data}>\n    <div className=\"custom-dynamic-page\">\n      <h1>动态页面: {slug}</h1>\n      <p>这是一个动态生成的自定义页面</p>\n    </div>\n  </Layout>\n)\n\nexport default async function handler(\n  request: Request,\n  params: { slug: string }\n): Promise<Response> {\n  try {\n    const data = (globalThis as any).__LUMOS_DATA__ as DatabaseSchema\n    if (!data) {\n      return new Response('Server not initialized', { status: 500 })\n    }\n\n    const html = '<!DOCTYPE html>' + renderToString(\n      React.createElement(CustomDynamicPage, { data, slug: params.slug })\n    )\n\n    return new Response(html, {\n      headers: { 'Content-Type': 'text/html; charset=utf-8' }\n    })\n  } catch (error) {\n    console.error('动态页面渲染错误:', error)\n    return new Response('Internal Server Error', { status: 500 })\n  }\n}\n```\n\n### 🔌 API 接口开发\n\n#### 创建自定义 API\n\n```typescript\n// src/routes/api/custom.ts\nimport { DatabaseSchema } from '../../types.ts'\n\nexport default async function handler(request: Request): Promise<Response> {\n  try {\n    const data = (globalThis as any).__LUMOS_DATA__ as DatabaseSchema\n    if (!data) {\n      return new Response('Server not initialized', { status: 500 })\n    }\n\n    // 处理不同的 HTTP 方法\n    const method = request.method\n\n    switch (method) {\n      case 'GET':\n        return handleGet(data, request)\n      case 'POST':\n        return handlePost(data, request)\n      default:\n        return new Response('Method not allowed', { status: 405 })\n    }\n  } catch (error) {\n    console.error('API 错误:', error)\n    return Response.json({ error: 'Internal Server Error' }, { status: 500 })\n  }\n}\n\nasync function handleGet(data: DatabaseSchema, request: Request): Promise<Response> {\n  const url = new URL(request.url)\n  const query = url.searchParams.get('query')\n\n  // 自定义业务逻辑\n  const result = {\n    message: 'Hello from custom API',\n    query,\n    timestamp: new Date().toISOString(),\n    stats: {\n      posts: data.posts.length,\n      pages: data.pages.length,\n      authors: data.authors.length\n    }\n  }\n\n  return Response.json(result)\n}\n\nasync function handlePost(data: DatabaseSchema, request: Request): Promise<Response> {\n  const body = await request.json()\n\n  // 处理 POST 请求\n  return Response.json({\n    message: 'POST request received',\n    data: body\n  })\n}\n```\n\n## 🔌 插件系统开发\n\n### 🧩 插件架构\n\nLumos 的插件系统基于生命周期钩子，允许在博客生成和运行的不同阶段执行自定义逻辑。\n\n#### 插件接口定义\n\n```typescript\n// src/types.ts\nexport interface Plugin {\n  name: string\n  version?: string\n  description?: string\n\n  // 生命周期钩子\n  onGenerateStart?: (generator: any) => Promise<void> | void\n  onGenerateEnd?: (data: DatabaseSchema) => Promise<DatabaseSchema> | DatabaseSchema\n  onParseFile?: (\n    filePath: string,\n    content: string,\n    type: 'post' | 'page' | 'author'\n  ) => Promise<string> | string\n  onRender?: (html: string, data: any) => Promise<string> | string\n  onServerStart?: (server: any) => Promise<void> | void\n}\n```\n\n### 🛠️ 创建自定义插件\n\n#### 1. 基础插件结构\n\n```typescript\n// plugins/my-custom-plugin.ts\nimport { Plugin } from '../src/types.ts'\n\nconst myCustomPlugin: Plugin = {\n  name: 'my-custom-plugin',\n  version: '1.0.0',\n  description: '我的自定义插件',\n\n  // 在生成开始时执行\n  async onGenerateStart(generator) {\n    console.log('📝 我的插件: 开始生成数据')\n    // 可以在这里访问和修改生成器\n  },\n\n  // 在生成结束时执行，可以修改最终数据\n  async onGenerateEnd(data) {\n    console.log('✅ 我的插件: 数据生成完成')\n    // 可以在这里修改返回的数据\n    return data\n  },\n\n  // 在解析文件时执行，可以修改文件内容\n  async onParseFile(filePath, content, type) {\n    console.log(`📄 我的插件: 解析文件 ${filePath} (类型: ${type})`)\n    // 可以在这里修改文件内容\n    return content\n  },\n\n  // 在渲染时执行，可以修改 HTML 输出\n  async onRender(html, data) {\n    console.log('🖥️ 我的插件: 渲染页面')\n    // 可以在这里修改 HTML 输出\n    return html\n  },\n\n  // 在服务器启动时执行\n  async onServerStart(server) {\n    console.log('🚀 我的插件: 服务器启动')\n    // 可以在这里访问服务器实例\n  }\n}\n\nexport default myCustomPlugin\n```\n\n#### 2. 插件配置\n\n在 `lumos.config.json` 中配置插件：\n\n```json\n{\n  \"plugins\": {\n    \"my-custom-plugin\": {\n      \"enabled\": true,\n      \"options\": {\n        \"customOption\": \"value\"\n      }\n    }\n  }\n}\n```\n\n#### 3. 高级插件示例\n\n```typescript\n// plugins/word-count-plugin.ts\nimport { Plugin, DatabaseSchema } from '../src/types.ts'\n\nconst wordCountPlugin: Plugin = {\n  name: 'word-count-plugin',\n  version: '1.0.0',\n  description: '文章字数统计插件',\n\n  // 在解析文件时统计字数\n  async onParseFile(filePath, content, type) {\n    if (type === 'post') {\n      // 统计字数的逻辑\n      const wordCount = content\n        .replace(/<[^>]*>/g, '')\n        .replace(/\\s+/g, ' ')\n        .trim()\n        .split(' ').length\n      console.log(`📝 文件 ${filePath} 字数统计: ${wordCount}`)\n    }\n    return content\n  },\n\n  // 在生成结束时添加字数统计到数据中\n  async onGenerateEnd(data: DatabaseSchema) {\n    // 为每篇文章添加字数统计\n    const postsWithWordCount = data.posts.map(post => ({\n      ...post,\n      wordCount: post.content\n        ? post.content\n            .replace(/<[^>]*>/g, '')\n            .replace(/\\s+/g, ' ')\n            .trim()\n            .split(' ').length\n        : 0\n    }))\n\n    return {\n      ...data,\n      posts: postsWithWordCount\n    }\n  }\n}\n\nexport default wordCountPlugin\n```\n\n### 🔧 插件开发最佳实践\n\n#### 1. 错误处理\n\n```typescript\nasync onGenerateEnd(data) {\n  try {\n    // 插件逻辑\n    return data\n  } catch (error) {\n    console.error(`插件 ${this.name} 执行失败:`, error)\n    // 返回原始数据而不是抛出错误\n    return data\n  }\n}\n```\n\n#### 2. 性能优化\n\n```typescript\n// 避免在每次调用时执行昂贵的操作\nlet cachedData: any = null\n\nasync onGenerateEnd(data) {\n  if (!cachedData) {\n    // 执行昂贵的计算\n    cachedData = await expensiveComputation(data)\n  }\n  return {\n    ...data,\n    cachedData\n  }\n}\n```\n\n#### 3. 配置管理\n\n```typescript\nasync onGenerateStart(generator) {\n  // 从插件配置中获取选项\n  const config = generator.pluginConfigs[this.name]\n  const options = config?.options || {}\n\n  // 使用配置选项\n  if (options.customOption) {\n    // 根据配置执行不同的逻辑\n  }\n}\n```\n\n## 🎨 主题系统开发\n\n### 🧩 主题架构\n\nLumos 的主题系统允许开发者创建和使用自定义主题来改变博客的外观和功能。\n\n#### 主题目录结构\n\n```\nthemes/\n└── my-theme/             # 自定义主题目录\n    ├── assets/           # 主题静态资源\n    │   ├── styles/       # 样式文件\n    │   └── images/       # 图片资源\n    ├── components/       # 主题组件\n    │   └── Layout.tsx    # 布局组件\n    └── routes/           # 主题路由\n        ├── index.tsx     # 首页\n        ├── posts.tsx     # 文章列表页\n        └── post/[url].tsx # 文章详情页\n```\n\n### 🎨 创建自定义主题\n\n#### 1. 创建主题目录结构\n\n```bash\nmkdir -p themes/my-custom-theme/{assets,components,routes}\n```\n\n#### 2. 创建布局组件\n\n```tsx\n// themes/my-custom-theme/components/Layout.tsx\nimport * as React from 'react'\nimport { DatabaseSchema } from '../../../src/types.ts'\n\ninterface LayoutProps {\n  title: string\n  children: React.ReactNode\n  data: DatabaseSchema\n  description?: string\n}\n\nexport const Layout: React.FC<LayoutProps> = ({\n  title,\n  children,\n  data,\n  description = '我的自定义博客'\n}) => {\n  return (\n    <html lang=\"zh-CN\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <title>{title}</title>\n        <meta name=\"description\" content={description} />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"stylesheet\" href=\"/assets/styles/my-theme.css\" />\n      </head>\n      <body className=\"my-custom-theme\">\n        <header className=\"header\">\n          <h1 className=\"site-title\">我的自定义博客</h1>\n          <nav className=\"navigation\">\n            <a href=\"/\">首页</a>\n            <a href=\"/posts\">文章</a>\n            <a href=\"/about\">关于</a>\n          </nav>\n        </header>\n\n        <main className=\"main-content\">{children}</main>\n\n        <footer className=\"footer\">\n          <p>&copy; {new Date().getFullYear()} 我的自定义博客</p>\n          <p>文章: {data.posts?.length || 0} 篇</p>\n        </footer>\n      </body>\n    </html>\n  )\n}\n```\n\n#### 3. 创建路由页面\n\n```tsx\n// themes/my-custom-theme/routes/index.tsx\nimport * as React from 'react'\nimport { renderToString } from 'react-dom/server'\nimport { DatabaseSchema } from '../../../src/types.ts'\nimport { Layout } from '../components/Layout.tsx'\n\nconst HomePage: React.FC<{ data: DatabaseSchema }> = ({ data }) => (\n  <div className=\"home-page\">\n    <h2>欢迎来到我的博客</h2>\n    <p>这是使用自定义主题的首页</p>\n\n    <section className=\"latest-posts\">\n      <h3>最新文章</h3>\n      <div className=\"posts-list\">\n        {data.posts.slice(0, 5).map(post => (\n          <article key={post.id} className=\"post-item\">\n            <h4>\n              <a href={`/post/${post.alias}`}>{post.title}</a>\n            </h4>\n            <p className=\"post-excerpt\">{post.excerpt}</p>\n            <div className=\"post-meta\">\n              <span className=\"post-date\">{post.date}</span>\n              {post.categories && post.categories.length > 0 && (\n                <span className=\"post-categories\">分类: {post.categories.join(', ')}</span>\n              )}\n            </div>\n          </article>\n        ))}\n      </div>\n    </section>\n  </div>\n)\n\nexport default async function handler(_request: Request): Promise<Response> {\n  try {\n    const data = (globalThis as any).__LUMOS_DATA__ as DatabaseSchema\n    if (!data) {\n      return new Response('Server not initialized', { status: 500 })\n    }\n\n    const html = '<!DOCTYPE html>' + renderToString(React.createElement(HomePage, { data }))\n\n    return new Response(html, {\n      headers: { 'Content-Type': 'text/html; charset=utf-8' }\n    })\n  } catch (error) {\n    console.error('首页渲染错误:', error)\n    return new Response('Internal Server Error', { status: 500 })\n  }\n}\n```\n\n#### 4. 配置主题\n\n在 `lumos.config.json` 中切换到新主题：\n\n```json\n{\n  \"theme\": \"my-custom-theme\"\n}\n```\n\n### 🎨 主题开发最佳实践\n\n#### 1. 样式组织\n\n```css\n/* themes/my-custom-theme/assets/styles/my-theme.css */\n:root {\n  --primary-color: #3b82f6;\n  --secondary-color: #64748b;\n  --background-color: #f8fafc;\n  --text-color: #1e293b;\n}\n\n.my-custom-theme {\n  font-family: 'Inter', sans-serif;\n  background-color: var(--background-color);\n  color: var(--text-color);\n}\n\n.header {\n  background-color: var(--primary-color);\n  color: white;\n  padding: 1rem;\n}\n\n.site-title {\n  font-size: 2rem;\n  font-weight: bold;\n}\n\n.navigation a {\n  color: white;\n  text-decoration: none;\n  margin-right: 1rem;\n}\n\n.navigation a:hover {\n  text-decoration: underline;\n}\n```\n\n#### 2. 响应式设计\n\n```tsx\n// 在组件中使用响应式类名\n<div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">{/* 内容 */}</div>\n</div>\n```\n\n#### 3. 主题继承\n\n可以通过扩展默认主题来创建自定义主题，只需覆盖需要修改的部分：\n\n```tsx\n// themes/my-custom-theme/components/Layout.tsx\nimport * as React from 'react'\nimport { DatabaseSchema } from '../../../src/types.ts'\n// 导入默认主题的布局组件\nimport { Layout as DefaultLayout } from '../../default/components/Layout.tsx'\n\ninterface LayoutProps {\n  title: string\n  children: React.ReactNode\n  data: DatabaseSchema\n}\n\nexport const Layout: React.FC<LayoutProps> = ({ title, children, data }) => {\n  // 在默认布局基础上进行自定义\n  return (\n    <DefaultLayout title={`[自定义] ${title}`} data={data}>\n      <div className=\"custom-wrapper\">{children}</div>\n    </DefaultLayout>\n  )\n}\n```\n\n## 📊 数据使用\n\n### 🔍 在组件中使用数据\n\n#### 1. 获取全局数据\n\n```typescript\n// 在路由处理器中获取数据\nexport default async function handler(_request: Request): Promise<Response> {\n  try {\n    const data = (globalThis as any).__LUMOS_DATA__ as DatabaseSchema\n    if (!data) {\n      return new Response('Server not initialized', { status: 500 })\n    }\n\n    // 使用数据进行渲染\n    const html = '<!DOCTYPE html>' + renderToString(React.createElement(MyComponent, { data }))\n\n    return new Response(html, {\n      headers: { 'Content-Type': 'text/html; charset=utf-8' }\n    })\n  } catch (error) {\n    console.error('渲染错误:', error)\n    return new Response('Internal Server Error', { status: 500 })\n  }\n}\n```\n\n#### 2. 在组件中处理数据\n\n```typescript\n// 在 React 组件中使用数据\nconst MyComponent: React.FC<{ data: DatabaseSchema }> = ({ data }) => {\n  // 获取最新文章\n  const latestPosts = data.posts\n    .filter(post => post.published)\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n    .slice(0, 5)\n\n  // 获取分类统计\n  const categoryStats = data.categories.map(category => ({\n    ...category,\n    postCount: data.posts.filter(post =>\n      post.categories?.includes(category.title)\n    ).length\n  }))\n\n  return (\n    <div>\n      <h2>最新文章</h2>\n      {latestPosts.map(post => (\n        <div key={post.id}>\n          <h3>{post.title}</h3>\n          <p>{post.excerpt}</p>\n        </div>\n      ))}\n\n      <h2>分类统计</h2>\n      {categoryStats.map(category => (\n        <div key={category.id}>\n          <span>{category.title}: {category.postCount} 篇</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n## 🧪 测试与调试\n\n### 🔍 基本测试\n\n#### 1. 组件测试\n\n```typescript\n// 简单的组件测试示例\nimport { describe, it, expect } from 'vitest'\nimport { render } from '@testing-library/react'\nimport { Layout } from '../Layout.tsx'\n\nconst mockData = {\n  posts: [],\n  pages: [],\n  authors: [],\n  categories: [],\n  tags: []\n}\n\ndescribe('Layout Component', () => {\n  it('renders with correct title', () => {\n    const { getByText } = render(\n      <Layout title=\"Test Page\" data={mockData}>\n        <div>Test Content</div>\n      </Layout>\n    )\n\n    expect(getByText('Test Page')).toBeInTheDocument()\n    expect(getByText('Test Content')).toBeInTheDocument()\n  })\n})\n```\n\n### 🐛 调试技巧\n\n#### 1. 开发模式调试\n\n```typescript\n// 简单的调试工具\nexport function debugLog(message: string, data?: any) {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`[DEBUG] ${message}`, data)\n  }\n}\n\nexport function debugError(error: Error, context?: string) {\n  if (process.env.NODE_ENV === 'development') {\n    console.error(`[ERROR] ${context || 'Unknown context'}:`, error)\n  }\n}\n```\n\n#### 2. 服务器调试\n\n```bash\n# 启动开发服务器进行调试\nbun run dev\n\n# 查看服务器日志\ntail -f logs/server.log\n```\n\n## 🚀 部署\n\n### 📦 基本部署\n\n#### 1. 构建项目\n\n```bash\n# 生成数据文件\nlumos gen\n\n# 构建项目\nbun run build\n\n# 启动生产服务器\nlumos server -p 3000\n```\n\n#### 2. 环境变量配置\n\n```bash\n# .env 文件\nNODE_ENV=production\nPORT=3000\nHOST=0.0.0.0\n```\n\n#### 3. 简单部署\n\n```bash\n# 使用 Bun 直接运行\nbun run src/cli.ts server -p 3000\n\n# 或使用 systemd 服务\nsudo systemctl start lumos-blog\n```\n\n#### 4. Bun 特有的部署优势\n\n```bash\n# Bun 的快速启动\nbun --bun src/cli.ts server\n\n# 使用 Bun 的打包功能\nbun build src/cli.ts --outdir ./dist --target bun\n```\n\n## 📚 最佳实践\n\n### 🎯 开发规范\n\n#### 1. 代码组织\n\n```\nsrc/\n├── components/          # React 组件\n├── routes/             # 路由处理器\n├── utils/              # 工具函数\n└── types.ts            # 类型定义\n```\n\n#### 2. 命名规范\n\n```typescript\n// 组件命名：PascalCase\nexport const ArticleCard: React.FC<Props> = () => {}\n\n// 函数命名：camelCase\nexport function parseMarkdownFile(filePath: string) {}\n\n// 类型命名：PascalCase\nexport interface DatabaseSchema {}\n```\n\n#### 3. 错误处理\n\n```typescript\n// 简单的错误处理\nexport function handleError(error: unknown): Response {\n  console.error('Error:', error)\n  return new Response('Internal Server Error', { status: 500 })\n}\n```\n\n### 🔧 维护指南\n\n#### 1. 版本管理\n\n```bash\n# 更新版本\nnpm version patch  # 补丁版本\nnpm version minor  # 小版本\nnpm version major  # 大版本\n```\n\n#### 2. 代码提交\n\n```bash\n# 提交代码\ngit add .\ngit commit -m \"feat: 添加新功能\"\ngit push origin main\n```\n\n### 🚀 Bun 开发最佳实践\n\n#### 1. 使用 Bun 的包管理器\n\n```bash\n# 安装依赖\nbun install\n\n# 添加新依赖\nbun add react react-dom\n\n# 添加开发依赖\nbun add -d @types/react @types/react-dom\n```\n\n#### 2. 利用 Bun 的性能优势\n\n```typescript\n// 使用 Bun 的并行处理\nconst results = await Promise.all([\n  Bun.file('file1.json').text(),\n  Bun.file('file2.json').text(),\n  Bun.file('file3.json').text()\n])\n\n// 使用 Bun 的快速 JSON 解析\nconst data = JSON.parse(await Bun.file('data.json').text())\n```\n\n#### 3. Bun 特有的类型支持\n\n```typescript\n// 使用 Bun 的类型定义\nimport type { BunFile } from 'bun'\n\nconst file: BunFile = Bun.file('example.txt')\nconst content = await file.text()\n```\n\n## 🎉 总结\n\n通过本教程，你已经学会了：\n\n- 🏗️ **项目架构理解**: 深入理解 Lumos 基于 Bun 的核心架构\n- ⚛️ **React 组件开发**: 创建自定义组件和布局系统\n- 🛣️ **路由扩展**: 使用 Bun FileSystemRouter 添加新页面和 API\n- 🔌 **插件开发**: 创建自定义插件扩展功能\n- 🎨 **主题开发**: 创建自定义主题改变外观\n- 📊 **数据使用**: 在组件中使用和处理数据\n- 🧪 **测试调试**: 基本的测试和调试技巧\n- 🚀 **Bun 部署**: 利用 Bun 的性能优势进行部署\n\n### 🚀 Bun 的优势\n\n- **极速启动**: 冷启动时间 < 100ms\n- **内置工具**: 包管理器、测试框架、打包工具一体化\n- **原生 TypeScript**: 无需额外配置\n- **高性能**: 比 Node.js 快 3-5 倍\n\n现在你可以开始你的 Lumos 二次开发之旅了！🚀\n\n如需了解更多关于 Lumos CLI 命令的使用方法，请参阅 [Lumos CLI 使用指南](./lumos-cli-usage.md)。\n\n## 🤝 社区支持\n\n- 💬 [GitHub Discussions](https://github.com/your-username/lumos/discussions) - 技术讨论\n- 🐛 [Issue 报告](https://github.com/your-username/lumos/issues) - 问题反馈\n- 📝 [贡献指南](https://github.com/your-username/lumos/blob/main/CONTRIBUTING.md) - 参与贡献\n\n## 📄 许可证\n\nMIT License - 详见 [LICENSE](https://github.com/your-username/lumos/blob/main/LICENSE) 文件\n",
      "toc": "<ul>\n<li><a href=\"#toc-1d5784\">🛠️ Lumos 二次开发教程</a><ul>\n<li><a href=\"#toc-c455c6\">📚 相关资源</a></li>\n<li><a href=\"#toc-c2f851\">🎯 学习目标</a></li>\n<li><a href=\"#toc-c893bf\">🚀 开发环境搭建</a><ul>\n<li><a href=\"#toc-e078f0\">📋 前置要求</a></li>\n<li><a href=\"#toc-883dda\">⚙️ 环境配置</a></li>\n<li><a href=\"#toc-b92b5c\">🔧 开发工具配置</a><ul>\n<li><a href=\"#toc-0c7fbe\">VS Code 推荐插件</a></li>\n<li><a href=\"#toc-b2b126\">调试配置</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-19e995\">🚀 Bun 特有功能</a><ul>\n<li><a href=\"#toc-2d81ed\">1. 使用 Bun 的 FileSystemRouter</a></li>\n<li><a href=\"#toc-c5a415\">2. 使用 Bun 的文件 API</a></li>\n<li><a href=\"#toc-a7baa8\">3. 使用 Bun 的 HTTP 服务器</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#toc-364a74\">🏗️ 项目架构深度解析</a><ul>\n<li><a href=\"#toc-1dac02\">📂 核心目录结构</a></li>\n<li><a href=\"#toc-a585ed\">🔧 核心模块说明</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-343d9a\">⚛️ React 组件开发</a><ul>\n<li><a href=\"#toc-c589e7\">🧩 组件架构</a><ul>\n<li><a href=\"#toc-13d766\">基础组件结构</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-25618a\">🎨 自定义布局组件</a><ul>\n<li><a href=\"#toc-e0998d\">创建新的布局组件</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-3503dd\">🔧 组件开发最佳实践</a><ul>\n<li><a href=\"#toc-c47362\">1. 类型安全</a></li>\n<li><a href=\"#toc-e1064c\">2. 样式管理</a></li>\n<li><a href=\"#toc-686417\">3. 条件渲染</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#toc-3fce07\">🛣️ 路由系统扩展</a><ul>\n<li><a href=\"#toc-1cc648\">📍 创建新的页面路由</a><ul>\n<li><a href=\"#toc-8d5a9c\">1. 静态路由</a></li>\n<li><a href=\"#toc-d446dd\">2. 动态路由</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-16c4b6\">🔌 API 接口开发</a><ul>\n<li><a href=\"#toc-d246cb\">创建自定义 API</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#toc-16139c\">🔌 插件系统开发</a><ul>\n<li><a href=\"#toc-4cc7fc\">🧩 插件架构</a><ul>\n<li><a href=\"#toc-05e25d\">插件接口定义</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-d252a7\">🛠️ 创建自定义插件</a><ul>\n<li><a href=\"#toc-569c00\">1. 基础插件结构</a></li>\n<li><a href=\"#toc-014afc\">2. 插件配置</a></li>\n<li><a href=\"#toc-798cd4\">3. 高级插件示例</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-ea52c1\">🔧 插件开发最佳实践</a><ul>\n<li><a href=\"#toc-412f92\">1. 错误处理</a></li>\n<li><a href=\"#toc-2a2cc7\">2. 性能优化</a></li>\n<li><a href=\"#toc-9aaea5\">3. 配置管理</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#toc-a5d892\">🎨 主题系统开发</a><ul>\n<li><a href=\"#toc-39b27f\">🧩 主题架构</a><ul>\n<li><a href=\"#toc-525c30\">主题目录结构</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-ba50e5\">🎨 创建自定义主题</a><ul>\n<li><a href=\"#toc-4c87fa\">1. 创建主题目录结构</a></li>\n<li><a href=\"#toc-a3e09a\">2. 创建布局组件</a></li>\n<li><a href=\"#toc-7a21a8\">3. 创建路由页面</a></li>\n<li><a href=\"#toc-0e7d36\">4. 配置主题</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-29a4ba\">🎨 主题开发最佳实践</a><ul>\n<li><a href=\"#toc-170f32\">1. 样式组织</a></li>\n<li><a href=\"#toc-5cc338\">2. 响应式设计</a></li>\n<li><a href=\"#toc-fdae81\">3. 主题继承</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#toc-38686e\">📊 数据使用</a><ul>\n<li><a href=\"#toc-edc843\">🔍 在组件中使用数据</a><ul>\n<li><a href=\"#toc-23be8f\">1. 获取全局数据</a></li>\n<li><a href=\"#toc-e583f9\">2. 在组件中处理数据</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#toc-9e2bc4\">🧪 测试与调试</a><ul>\n<li><a href=\"#toc-ebc7f0\">🔍 基本测试</a><ul>\n<li><a href=\"#toc-31a26e\">1. 组件测试</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-eba436\">🐛 调试技巧</a><ul>\n<li><a href=\"#toc-da9f41\">1. 开发模式调试</a></li>\n<li><a href=\"#toc-391598\">2. 服务器调试</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#toc-6a2067\">🚀 部署</a><ul>\n<li><a href=\"#toc-4cfaea\">📦 基本部署</a><ul>\n<li><a href=\"#toc-89f3b8\">1. 构建项目</a></li>\n<li><a href=\"#toc-270c02\">2. 环境变量配置</a></li>\n<li><a href=\"#toc-0fdc0e\">3. 简单部署</a></li>\n<li><a href=\"#toc-7c1807\">4. Bun 特有的部署优势</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#toc-68dc60\">📚 最佳实践</a><ul>\n<li><a href=\"#toc-6d53a1\">🎯 开发规范</a><ul>\n<li><a href=\"#toc-665301\">1. 代码组织</a></li>\n<li><a href=\"#toc-dab5c8\">2. 命名规范</a></li>\n<li><a href=\"#toc-8b1d33\">3. 错误处理</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-2856f2\">🔧 维护指南</a><ul>\n<li><a href=\"#toc-58cd3c\">1. 版本管理</a></li>\n<li><a href=\"#toc-fb3803\">2. 代码提交</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-9cc599\">🚀 Bun 开发最佳实践</a><ul>\n<li><a href=\"#toc-f39481\">1. 使用 Bun 的包管理器</a></li>\n<li><a href=\"#toc-d5722e\">2. 利用 Bun 的性能优势</a></li>\n<li><a href=\"#toc-34eec4\">3. Bun 特有的类型支持</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#toc-cca050\">🎉 总结</a><ul>\n<li><a href=\"#toc-be4bb2\">🚀 Bun 的优势</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-69b008\">🤝 社区支持</a></li>\n<li><a href=\"#toc-c707be\">📄 许可证</a></li>\n</ul>\n</li>\n</ul>\n",
      "created_timestamp": 1756835855000,
      "updated_timestamp": 1756835855000,
      "url": "lumos-development",
      "symbolsCount": 16347,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ]
    },
    {
      "id": "259ce29c-3f26-51f9-ab7c-fd809c3fcb31",
      "title": "README",
      "alias": "readme",
      "cover": "",
      "created_time": "2025-09-06 22:38:21",
      "date": "2025-09-06 22:38:21",
      "updated_time": "2025-09-06 22:38:21",
      "updated": "2025-09-06 22:38:21",
      "categories": [],
      "tags": [],
      "excerpt": "Lumos - 基于 Bun 的静态博客生成器\n基于 Bun 运行时的高性能静态博客生成器，使用 JSX 组件和现代化技术栈。专为低配置服务器优化，提供轻量级博客解决方案。\n📚 相关文档\n想要深入了解 Lumos 的更多功能和使用方法？请查看以下文档：\n\nLumos 项目介绍 - 项目的详细介绍和架构说明\nLumos CLI 使用指南 - CLI 命令的详细使用方法\nLumos 二次开发教程 -...",
      "published": true,
      "content": "<h1 id=\"toc-678420\">Lumos - 基于 Bun 的静态博客生成器</h1>\n<p>基于 Bun 运行时的高性能静态博客生成器，使用 JSX 组件和现代化技术栈。专为低配置服务器优化，提供轻量级博客解决方案。</p>\n<h2 id=\"toc-6df5e0\">📚 相关文档</h2>\n<p>想要深入了解 Lumos 的更多功能和使用方法？请查看以下文档：</p>\n<ul>\n<li><a href=\"./source/_pages/lumos-introduce.md\">Lumos 项目介绍</a> - 项目的详细介绍和架构说明</li>\n<li><a href=\"./source/_pages/lumos-cli-usage.md\">Lumos CLI 使用指南</a> - CLI 命令的详细使用方法</li>\n<li><a href=\"./source/_pages/lumos-development.md\">Lumos 二次开发教程</a> - 插件和主题开发的详细教程</li>\n</ul>\n<h2 id=\"toc-7947e4\">✨ 特性</h2>\n<ul>\n<li>⚡ <strong>极快启动</strong>: 基于 Bun 运行时，冷启动时间 &lt; 100ms</li>\n<li>📝 <strong>Markdown 原生支持</strong>: 完整的 Markdown 解析，支持代码高亮和 TOC 生成</li>\n<li>🎨 <strong>现代化模板</strong>: JSX + React 组件替代传统模板引擎</li>\n<li>🎯 <strong>TypeScript 全覆盖</strong>: 完整的类型安全和开发体验</li>\n<li>📁 <strong>多格式配置</strong>: 支持 JSON、YAML 配置文件</li>\n<li>🔥 <strong>热更新开发</strong>: 文件变化自动重新生成，支持监听模式</li>\n<li>🚀 <strong>零配置启动</strong>: 开箱即用，一键启动</li>\n<li>🎨 <strong>Tailwind CSS</strong>: 内置现代化 CSS 框架</li>\n<li>📊 <strong>智能缓存</strong>: 基于 MD5 的文件缓存机制，提升构建性能</li>\n<li>🌐 <strong>静态资源管理</strong>: 自动处理 CSS、JS、图片等静态资源</li>\n<li>🔧 <strong>强大的 CLI</strong>: 完整的命令行工具，支持创建、构建、服务等功能</li>\n<li>🔌 <strong>插件系统</strong>: 支持生命周期钩子的可扩展插件架构</li>\n<li>🎨 <strong>主题系统</strong>: 支持自定义主题和组件的灵活主题机制</li>\n<li>📦 <strong>Bundler HTML 页面</strong>: 支持使用 Bun HTML Bundling 创建高性能页面, 支持React 生态</li>\n</ul>\n<h2 id=\"toc-f25f2e\">🚀 安装</h2>\n<p>确保你已经安装了 Bun：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 安装 Bun (如果尚未安装)</span>\ncurl -fsSL https://bun.sh/install | bash\n\n<span class=\"hljs-comment\"># 克隆项目或进入项目目录</span>\n<span class=\"hljs-built_in\">cd</span> lumos\n\n<span class=\"hljs-comment\"># 安装项目依赖</span>\nbun install\n\n<span class=\"hljs-comment\"># 初始化项目（如果需要）</span>\nbun run build\n</code></pre>\n<h2 id=\"toc-b748d6\">🛠️ 使用方法</h2>\n<h3 id=\"toc-128d88\">CLI 命令</h3>\n<p>Lumos 提供了完整的命令行工具：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 查看帮助信息</span>\nlumos <span class=\"hljs-built_in\">help</span>\n\n<span class=\"hljs-comment\"># 查看版本</span>\nlumos --version\n</code></pre>\n<h3 id=\"toc-56b844\">1. 创建内容</h3>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 创建新文章</span>\nlumos new post <span class=\"hljs-string\">&quot;我的第一篇文章&quot;</span>\n\n<span class=\"hljs-comment\"># 创建新页面</span>\nlumos new page <span class=\"hljs-string\">&quot;关于我&quot;</span>\n\n<span class=\"hljs-comment\"># 创建新作者</span>\nlumos new author <span class=\"hljs-string\">&quot;张三&quot;</span>\n\n<span class=\"hljs-comment\"># 指定子目录</span>\nlumos new post <span class=\"hljs-string\">&quot;技术分享&quot;</span> -p <span class=\"hljs-string\">&quot;tech&quot;</span>\n</code></pre>\n<h3 id=\"toc-3625cd\">2. 生成数据文件</h3>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 解析所有 Markdown、JSON、YAML 文件，生成 data.json</span>\nlumos gen\n<span class=\"hljs-comment\"># 或</span>\nlumos generate\n</code></pre>\n<h3 id=\"toc-f841c0\">3. 启动开发服务器</h3>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 启动服务器（默认端口 3060）</span>\nlumos server\n\n<span class=\"hljs-comment\"># 指定端口</span>\nlumos server -p 8080\n\n<span class=\"hljs-comment\"># 监听模式（文件变化自动重新生成）</span>\nlumos server -w\n<span class=\"hljs-comment\"># 或</span>\nlumos server --watch\n</code></pre>\n<h3 id=\"toc-0e5c88\">4. 构建项目</h3>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 完整构建（生成数据 + 处理资源）</span>\nlumos build\n\n<span class=\"hljs-comment\"># 只处理资源文件</span>\nlumos assets\n</code></pre>\n<h3 id=\"toc-62940c\">5. 使用 PM2 部署（生产环境）</h3>\n<p>Lumos 支持使用 PM2 进行生产环境部署，确保应用的高可用性和自动重启。</p>\n<p>首先安装 PM2：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 全局安装 PM2</span>\nbun install -g pm2\n</code></pre>\n<p>使用 PM2 启动应用：</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 启动应用</span>\nbun run pm2:start\n\n<span class=\"hljs-comment\"># 查看应用状态</span>\nbun run pm2:status\n\n<span class=\"hljs-comment\"># 查看日志</span>\nbun run pm2:logs\n\n<span class=\"hljs-comment\"># 重启应用</span>\nbun run pm2:restart\n\n<span class=\"hljs-comment\"># 停止应用</span>\nbun run pm2:stop\n</code></pre>\n<p>PM2 配置文件 <code>ecosystem.config.cjs</code> 已经包含在项目中，可以根据需要进行调整：</p>\n<ul>\n<li>应用名称: <code>lumos-blog</code></li>\n<li>启动脚本: 使用 Bun 运行 <code>src/cli.ts server</code></li>\n<li>端口: 默认 3000</li>\n<li>日志文件: 存储在 <code>logs</code> 目录中</li>\n</ul>\n<h3 id=\"toc-c182e7\">快速开始</h3>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-comment\"># 一键启动开发环境</span>\nbun run dev\n\n<span class=\"hljs-comment\"># 或者手动步骤</span>\nlumos gen &amp;&amp; lumos server -w\n</code></pre>\n<h2 id=\"toc-4be1c9\">📁 项目结构</h2>\n<pre><code class=\"hljs lang-nix\">lumos<span class=\"hljs-symbol\">/</span>\n├── 📁 source<span class=\"hljs-symbol\">/</span>               <span class=\"hljs-comment\"># 内容源目录</span>\n│   ├── 📁 _authors<span class=\"hljs-symbol\">/</span>         <span class=\"hljs-comment\"># 作者 Markdown 文件</span>\n│   ├── 📁 _pages<span class=\"hljs-symbol\">/</span>          <span class=\"hljs-comment\"># 页面 Markdown 文件</span>\n│   ├── 📁 _posts<span class=\"hljs-symbol\">/</span>          <span class=\"hljs-comment\"># 文章 Markdown 文件</span>\n│   ├── 📁 _jsons<span class=\"hljs-symbol\">/</span>          <span class=\"hljs-comment\"># JSON 配置文件</span>\n│   └── 📁 _ymls<span class=\"hljs-symbol\">/</span>           <span class=\"hljs-comment\"># YAML 配置文件</span>\n├── 📁 src<span class=\"hljs-symbol\">/</span>                  <span class=\"hljs-comment\"># 源码目录</span>\n│   ├── 📄 cli.ts           <span class=\"hljs-comment\"># CLI 命令行工具</span>\n│   ├── 📁 components<span class=\"hljs-symbol\">/</span>      <span class=\"hljs-comment\"># React 组件</span>\n│   ├── 📁 routes<span class=\"hljs-symbol\">/</span>          <span class=\"hljs-comment\"># 路由处理器</span>\n│   ├── 📄 server.ts        <span class=\"hljs-comment\"># HTTP 服务器</span>\n│   ├── 📄 generator.ts     <span class=\"hljs-comment\"># 数据生成器</span>\n│   └── 📄 utils.ts         <span class=\"hljs-comment\"># 工具函数</span>\n├── 📁 assets<span class=\"hljs-symbol\">/</span>               <span class=\"hljs-comment\"># 静态资源目录</span>\n│   ├── 📁 styles<span class=\"hljs-symbol\">/</span>          <span class=\"hljs-comment\"># 样式文件</span>\n│   ├── 📁 javascript<span class=\"hljs-symbol\">/</span>      <span class=\"hljs-comment\"># JavaScript 文件</span>\n│   ├── 📁 images<span class=\"hljs-symbol\">/</span>          <span class=\"hljs-comment\"># 图片资源</span>\n│   └── 📁 fonts<span class=\"hljs-symbol\">/</span>           <span class=\"hljs-comment\"># 字体文件</span>\n├── 📁 bundler<span class=\"hljs-symbol\">/</span>              <span class=\"hljs-comment\"># Bun HTML Bundling 目录</span>\n│   ├── 📁 html<span class=\"hljs-symbol\">/</span>            <span class=\"hljs-comment\"># HTML 源文件</span>\n│   │   ├── 📄 index.html   <span class=\"hljs-comment\"># 首页 HTML 入口</span>\n│   │   ├── 📄 app.tsx      <span class=\"hljs-comment\"># React 组件</span>\n│   │   └── 📄 about.html   <span class=\"hljs-comment\"># 关于页面 HTML 入口</span>\n│   └── 📁 dist<span class=\"hljs-symbol\">/</span>            <span class=\"hljs-comment\"># 构建输出目录</span>\n├── 📁 templates<span class=\"hljs-symbol\">/</span>            <span class=\"hljs-comment\"># 模板文件</span>\n├── 📁 plugins<span class=\"hljs-symbol\">/</span>              <span class=\"hljs-comment\"># 插件目录</span>\n├── 📁 themes<span class=\"hljs-symbol\">/</span>               <span class=\"hljs-comment\"># 主题目录</span>\n│   └── 📁 default<span class=\"hljs-symbol\">/</span>         <span class=\"hljs-comment\"># 默认主题</span>\n├── 📄 lumos.config.json     <span class=\"hljs-comment\"># 插件和主题配置</span>\n├── 📄 package.json          <span class=\"hljs-comment\"># 项目配置</span>\n├── 📄 tsconfig.json         <span class=\"hljs-comment\"># TypeScript 配置</span>\n├── 📄 tailwind.config.js    <span class=\"hljs-comment\"># Tailwind CSS 配置</span>\n├── 📄 lumos                 <span class=\"hljs-comment\"># CLI 可执行文件</span>\n└── 📄 data.json             <span class=\"hljs-comment\"># 生成的数据文件</span>\n</code></pre>\n<h2 id=\"toc-04ceb4\">🧩 插件系统</h2>\n<p>Lumos 提供了强大的插件系统，允许开发者通过插件扩展博客的功能。插件系统基于生命周期钩子，可以在博客生成和运行的不同阶段执行自定义逻辑。</p>\n<h3 id=\"toc-590a64\">插件架构</h3>\n<p>插件系统基于以下核心概念：</p>\n<ol>\n<li><strong>生命周期钩子</strong>: 插件可以在特定的生命周期阶段执行代码</li>\n<li><strong>配置管理</strong>: 插件可以通过配置文件进行配置</li>\n<li><strong>易于扩展</strong>: 插件可以轻松地添加新功能</li>\n</ol>\n<h3 id=\"toc-484bc6\">生命周期钩子</h3>\n<p>插件支持以下生命周期钩子：</p>\n<ul>\n<li><code>onGenerateStart(generator)</code>: 数据生成开始前调用</li>\n<li><code>onGenerateEnd(data)</code>: 数据生成结束后调用</li>\n<li><code>onParseFile(filePath, content, type)</code>: 解析文件时调用</li>\n<li><code>onRender(html, data)</code>: 渲染页面时调用</li>\n<li><code>onServerStart(server)</code>: 服务器启动时调用</li>\n</ul>\n<h3 id=\"toc-4e530c\">插件配置</h3>\n<p>插件配置在项目根目录的 <code>lumos.config.json</code> 文件中：</p>\n<pre><code class=\"hljs lang-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;plugins&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;example-plugin&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;enabled&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;options&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">&quot;customOption&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;value&quot;</span>\n      <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h3 id=\"toc-f42010\">创建插件</h3>\n<p>插件是一个导出默认对象的 TypeScript 文件，放置在 <code>plugins/</code> 目录中：</p>\n<pre><code class=\"hljs lang-typescript\"><span class=\"hljs-comment\">// plugins/example-plugin.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Plugin</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../src/types.ts&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">examplePlugin</span>: <span class=\"hljs-title class_\">Plugin</span> = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;example-plugin&#x27;</span>,\n  <span class=\"hljs-attr\">version</span>: <span class=\"hljs-string\">&#x27;1.0.0&#x27;</span>,\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;示例插件&#x27;</span>,\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onGenerateStart</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">generator</span>: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;生成开始&#x27;</span>)\n  },\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onGenerateEnd</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;生成结束&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> data\n  },\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onParseFile</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">filePath</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;post&#x27;</span> | <span class=\"hljs-string\">&#x27;page&#x27;</span> | <span class=\"hljs-string\">&#x27;author&#x27;</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`解析文件: <span class=\"hljs-subst\">${filePath}</span>`</span>)\n    <span class=\"hljs-keyword\">return</span> content\n  },\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onRender</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">html</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;渲染页面&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> html\n  },\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">onServerStart</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">server</span>: <span class=\"hljs-built_in\">any</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;服务器启动&#x27;</span>)\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> examplePlugin\n</code></pre>\n<h2 id=\"toc-453dec\">🎨 主题系统</h2>\n<p>Lumos 支持灵活的主题系统，允许开发者创建和使用自定义主题来改变博客的外观和功能。</p>\n<h3 id=\"toc-7c62d4\">主题结构</h3>\n<p>主题文件位于 <code>themes/</code> 目录中，每个主题都有自己的目录：</p>\n<pre><code class=\"hljs lang-nix\">themes<span class=\"hljs-symbol\">/</span>\n└── default<span class=\"hljs-symbol\">/</span>              <span class=\"hljs-comment\"># 主题目录</span>\n    ├── assets<span class=\"hljs-symbol\">/</span>           <span class=\"hljs-comment\"># 主题静态资源</span>\n    │   ├── styles<span class=\"hljs-symbol\">/</span>       <span class=\"hljs-comment\"># 样式文件</span>\n    │   └── images<span class=\"hljs-symbol\">/</span>       <span class=\"hljs-comment\"># 图片资源</span>\n    ├── components<span class=\"hljs-symbol\">/</span>       <span class=\"hljs-comment\"># 主题组件</span>\n    │   └── Layout.tsx    <span class=\"hljs-comment\"># 布局组件</span>\n    └── routes<span class=\"hljs-symbol\">/</span>           <span class=\"hljs-comment\"># 主题路由</span>\n        ├── index.tsx     <span class=\"hljs-comment\"># 首页</span>\n        ├── posts.tsx     <span class=\"hljs-comment\"># 文章列表页</span>\n        └── post<span class=\"hljs-operator\">/</span>[url].tsx <span class=\"hljs-comment\"># 文章详情页</span>\n</code></pre>\n<h3 id=\"toc-5af700\">主题配置</h3>\n<p>主题配置在 <code>lumos.config.json</code> 文件中：</p>\n<pre><code class=\"hljs lang-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;theme&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;default&quot;</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h3 id=\"toc-24522c\">创建主题</h3>\n<p>创建新主题只需在 <code>themes/</code> 目录中创建新文件夹，并按照主题结构添加文件。</p>\n<h4 id=\"toc-4c87fa\">1. 创建主题目录结构</h4>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-built_in\">mkdir</span> -p themes/my-theme/{assets,components,routes}\n</code></pre>\n<h4 id=\"toc-a3e09a\">2. 创建布局组件</h4>\n<pre><code class=\"hljs lang-tsx\"><span class=\"hljs-comment\">// themes/my-theme/components/Layout.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">LayoutProps</span> {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">children</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">ReactNode</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Layout</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;<span class=\"hljs-title class_\">LayoutProps</span>&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ title, children }</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>{title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/assets/styles/theme.css&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>我的自定义主题<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>{children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-symbol\">&amp;copy;</span> 2024 我的博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<h4 id=\"toc-7a21a8\">3. 创建路由页面</h4>\n<pre><code class=\"hljs lang-tsx\"><span class=\"hljs-comment\">// themes/my-theme/routes/index.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { renderToString } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom/server&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Layout</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../components/Layout.tsx&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">HomePage</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =&gt;</span> (\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>欢迎来到我的博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>这是使用自定义主题的首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">_request</span>: <span class=\"hljs-title class_\">Request</span></span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Response</span>&gt; {\n  <span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-string\">&#x27;&lt;!DOCTYPE html&gt;&#x27;</span> + <span class=\"hljs-title function_\">renderToString</span>(<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-title class_\">HomePage</span>))\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(html, {\n    <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;text/html; charset=utf-8&#x27;</span> }\n  })\n}\n</code></pre>\n<h4 id=\"toc-0e7d36\">4. 配置主题</h4>\n<p>在 <code>lumos.config.json</code> 中切换到新主题：</p>\n<pre><code class=\"hljs lang-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;theme&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;my-theme&quot;</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h3 id=\"toc-732485\">主题继承</h3>\n<p>主题支持继承机制，可以通过扩展默认主题来创建自定义主题，只需覆盖需要修改的部分。</p>\n<h2 id=\"toc-387bbf\">📄 Markdown 文件格式</h2>\n<h3 id=\"toc-8e86fe\">文章 (_posts/*.md)</h3>\n<pre><code class=\"hljs lang-markdown\">---\ntitle: &#x27;文章标题&#x27;\ndate: &#x27;2024-01-01&#x27;\nalias: &#x27;my-first-post&#x27; # 可选，用于 URL\ncategories: [&#x27;技术&#x27;, &#x27;Web开发&#x27;]\ntags: [&#x27;Bun&#x27;, &#x27;JavaScript&#x27;, &#x27;博客&#x27;]\nexcerpt: &#x27;文章摘要&#x27;\nauthor: &#x27;author-alias&#x27;\npublished: true\n<span class=\"hljs-section\">featured: false # 是否置顶\n---</span>\n\n<span class=\"hljs-section\"># 文章内容</span>\n\n这里是文章的 Markdown 内容...\n\n<span class=\"hljs-section\">## 支持的功能</span>\n\n<span class=\"hljs-bullet\">-</span> 代码高亮\n<span class=\"hljs-bullet\">-</span> TOC 目录生成\n<span class=\"hljs-bullet\">-</span> 摘要自动提取\n<span class=\"hljs-bullet\">-</span> 字数统计\n<span class=\"hljs-bullet\">-</span> 中文 URL 友好化\n</code></pre>\n<h3 id=\"toc-c65ead\">页面 (_pages/*.md)</h3>\n<pre><code class=\"hljs lang-markdown\">---\ntitle: &#x27;关于页面&#x27;\nalias: &#x27;about&#x27;\npublished: true\n<span class=\"hljs-section\">navOrder: 1 # 导航栏排序\n---</span>\n\n<span class=\"hljs-section\"># 关于我们</span>\n\n这里是页面内容...\n</code></pre>\n<h3 id=\"toc-42b4fd\">作者 (_authors/*.md)</h3>\n<pre><code class=\"hljs lang-markdown\">---\ntitle: &#x27;作者名称&#x27;\nalias: &#x27;author-alias&#x27;\nbio: &#x27;作者简介&#x27;\navatar: &#x27;/assets/images/avatar.jpg&#x27;\nsocial:\n  github: &#x27;https://github.com/username&#x27;\n  twitter: &#x27;https://twitter.com/username&#x27;\n<span class=\"hljs-section\">  email: &#x27;author@example.com&#x27;\n---</span>\n\n<span class=\"hljs-section\"># 作者详情</span>\n\n作者的详细介绍...\n</code></pre>\n<h2 id=\"toc-f5cbb9\">⚙️ 配置文件</h2>\n<h3 id=\"toc-014838\">JSON 配置 (_jsons/*.json)</h3>\n<pre><code class=\"hljs lang-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;siteName&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;我的博客&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;siteUrl&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;https://example.com&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;description&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;这是一个基于 Lumos 的博客&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;author&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;默认作者&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;keywords&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;Lumos&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;博客&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;Bun&quot;</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;social&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;github&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;https://github.com/username&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;twitter&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;https://twitter.com/username&quot;</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;navigation&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;首页&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;url&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;/&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;文章&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;url&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;/posts&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;关于&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;url&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;/page/about&quot;</span> <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h3 id=\"toc-dc5fe1\">YAML 配置 (_ymls/*.yml)</h3>\n<pre><code class=\"hljs lang-yaml\"><span class=\"hljs-comment\"># 主题配置</span>\n<span class=\"hljs-attr\">theme:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">default</span>\n  <span class=\"hljs-attr\">colors:</span>\n    <span class=\"hljs-attr\">primary:</span> <span class=\"hljs-string\">&#x27;#007bff&#x27;</span>\n    <span class=\"hljs-attr\">secondary:</span> <span class=\"hljs-string\">&#x27;#6c757d&#x27;</span>\n  <span class=\"hljs-attr\">fonts:</span>\n    <span class=\"hljs-attr\">body:</span> <span class=\"hljs-string\">&#x27;Inter, sans-serif&#x27;</span>\n    <span class=\"hljs-attr\">heading:</span> <span class=\"hljs-string\">&#x27;Inter, sans-serif&#x27;</span>\n\n<span class=\"hljs-comment\"># SEO 配置</span>\n<span class=\"hljs-attr\">seo:</span>\n  <span class=\"hljs-attr\">titleTemplate:</span> <span class=\"hljs-string\">&#x27;%s | 我的博客&#x27;</span>\n  <span class=\"hljs-attr\">defaultDescription:</span> <span class=\"hljs-string\">&#x27;一个由 Lumos 驱动的静态博客&#x27;</span>\n  <span class=\"hljs-attr\">openGraph:</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">website</span>\n    <span class=\"hljs-attr\">locale:</span> <span class=\"hljs-string\">zh_CN</span>\n</code></pre>\n<h2 id=\"toc-d87461\">🌐 API 接口</h2>\n<p>服务器提供以下 RESTful API：</p>\n<h3 id=\"toc-f6f0d5\">文章 API</h3>\n<ul>\n<li><code>GET /api/posts</code> - 获取所有文章（支持分页、筛选）</li>\n<li><code>GET /api/posts/:alias</code> - 获取指定文章</li>\n<li><code>GET /api/posts/category/:name</code> - 获取指定分类下的文章</li>\n<li><code>GET /api/posts/tag/:name</code> - 获取指定标签下的文章</li>\n</ul>\n<h3 id=\"toc-b56a75\">页面 API</h3>\n<ul>\n<li><code>GET /api/pages</code> - 获取所有页面</li>\n<li><code>GET /api/pages/:alias</code> - 获取指定页面</li>\n</ul>\n<h3 id=\"toc-a484b8\">分类和标签 API</h3>\n<ul>\n<li><code>GET /api/categories</code> - 获取所有分类</li>\n<li><code>GET /api/tags</code> - 获取所有标签</li>\n</ul>\n<h3 id=\"toc-29ba66\">作者 API</h3>\n<ul>\n<li><code>GET /api/authors</code> - 获取所有作者</li>\n<li><code>GET /api/authors/:alias</code> - 获取指定作者</li>\n</ul>\n<h3 id=\"toc-f8be43\">统计 API</h3>\n<ul>\n<li><code>GET /api/stats</code> - 获取站点统计数据</li>\n</ul>\n<h3 id=\"toc-9a1898\">查询参数</h3>\n<pre><code class=\"hljs lang-dts\">GET <span class=\"hljs-keyword\">/api/</span>posts?<span class=\"hljs-attr\">page</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><span class=\"hljs-variable\">&amp;limit</span>=<span class=\"hljs-number\">10</span><span class=\"hljs-variable\">&amp;category</span>=技术<span class=\"hljs-variable\">&amp;tag</span>=JavaScript<span class=\"hljs-variable\">&amp;author</span>=author-alias\n</code></pre>\n<h2 id=\"toc-a0cf11\">🗺️ 页面路由</h2>\n<h3 id=\"toc-b608bc\">前台页面</h3>\n<h4 id=\"toc-73513b\">核心页面</h4>\n<ul>\n<li><code>/</code> - 首页（最新文章列表）</li>\n<li><code>/posts</code> - 文章列表页（分页显示）</li>\n<li><code>/archives</code> - 文章归档页（按年份分组）</li>\n<li><code>/about</code> - 关于页面</li>\n<li><code>/links</code> - 友情链接页面</li>\n</ul>\n<h4 id=\"toc-977f10\">内容页面</h4>\n<ul>\n<li><code>/post/:alias</code> - 文章详情页</li>\n<li><code>/archives/:url</code> - 文章归档详情页</li>\n<li><code>/page/:alias</code> - 自定义页面详情</li>\n<li><code>/pages/:url</code> - 页面详情（支持 URL 路径）</li>\n</ul>\n<h4 id=\"toc-81aeae\">分类和标签</h4>\n<ul>\n<li><code>/category/:name</code> - 分类页面（显示该分类下的文章）</li>\n<li><code>/categories/:alias</code> - 分类页面（支持别名）</li>\n<li><code>/tag/:name</code> - 标签页面（显示该标签下的文章）</li>\n<li><code>/tags/:value</code> - 标签页面（支持值匹配）</li>\n</ul>\n<h4 id=\"toc-2e0bd9\">特殊页面</h4>\n<ul>\n<li><code>/404</code> - 404 错误页面</li>\n<li><code>/error</code> - 通用错误页面</li>\n</ul>\n<h4 id=\"toc-31f8a7\">数据接口</h4>\n<ul>\n<li><code>/rss.xml</code> - RSS 订阅源</li>\n<li><code>/sitemap.xml</code> - 网站地图</li>\n<li><code>/api/*</code> - RESTful API 接口</li>\n</ul>\n<h3 id=\"toc-c666ad\">特性</h3>\n<ul>\n<li>基于 Bun FileSystemRouter 的自动路由</li>\n<li>支持动态路由参数和别名系统</li>\n<li>SSR 服务端渲染，SEO 友好</li>\n<li>SEO 友好的 URL 结构, 中文 URL 自动转拼音</li>\n<li>智能缓存和性能优化</li>\n<li>响应式设计，移动端友好</li>\n</ul>\n<h2 id=\"toc-271987\">📦 Bundler HTML 页面 (高优先级)</h2>\n<p>Lumos 支持使用 Bun 的 HTML bundling 功能创建页面，这种方式的优先级比主题中的 route 更高。Bundler HTML 页面位于 <code>bundler/html/</code> 目录中，构建后会生成到 <code>bundler/dist/</code> 目录。</p>\n<h3 id=\"toc-b3fbd1\">工作原理</h3>\n<ol>\n<li>在 <code>bundler/html/</code> 目录中创建 HTML 文件和相关的 TypeScript/JSX 组件</li>\n<li>运行 <code>bun run build:html</code> 命令构建这些页面</li>\n<li>构建后的页面会被放置在 <code>bundler/dist/</code> 目录中</li>\n<li>服务器会优先检查请求的路径是否在 <code>bundler/dist/</code> 目录中存在对应文件</li>\n<li>如果存在，则直接返回该文件，不会经过主题路由处理</li>\n</ol>\n<h3 id=\"toc-7efcb0\">使用场景</h3>\n<ul>\n<li>创建高性能的静态页面</li>\n<li>构建独立的 landing pages</li>\n<li>实现特殊的前端交互效果</li>\n<li>创建演示页面或测试页面</li>\n</ul>\n<h3 id=\"toc-1a63ac\">示例</h3>\n<pre><code class=\"hljs lang-xml\"><span class=\"hljs-comment\">&lt;!-- bundler/html/index.html --&gt;</span>\n<span class=\"hljs-meta\">&lt;!doctype <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Lumos 主题测试页面<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 将 app.tsx 作为模块引入 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./app.tsx&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-comment\">// bundler/html/app.tsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ReactDOM</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-dom/client&quot;</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello from Bun HTML Bundling!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n\n<span class=\"hljs-comment\">// 渲染应用</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;DOMContentLoaded&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> rootElement = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;root&#x27;</span>);\n  <span class=\"hljs-keyword\">if</span> (rootElement) {\n    <span class=\"hljs-keyword\">const</span> root = <span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">createRoot</span>(rootElement);\n    root.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-title class_\">App</span>));\n  }\n});\n</code></pre>\n<h2 id=\"toc-f3b9b1\">🛠️ 开发</h2>\n<h3 id=\"toc-1cd084\">开发命令</h3>\n<pre><code class=\"hljs lang-routeros\"><span class=\"hljs-comment\"># 开发模式（热更新）</span>\nbun <span class=\"hljs-built_in\">run</span> dev\n\n<span class=\"hljs-comment\"># 构建项目</span>\nbun <span class=\"hljs-built_in\">run</span> build\n\n<span class=\"hljs-comment\"># 代码检查</span>\nbun <span class=\"hljs-built_in\">run</span> lint\n\n<span class=\"hljs-comment\"># 修复代码风格</span>\nbun <span class=\"hljs-built_in\">run</span> fix\n\n<span class=\"hljs-comment\"># 构建 CSS</span>\nbun <span class=\"hljs-built_in\">run</span> build:css\n\n<span class=\"hljs-comment\"># TypeScript 编译</span>\nbun <span class=\"hljs-built_in\">run</span> tsc\n</code></pre>\n<h3 id=\"toc-228526\">工作流</h3>\n<ol>\n<li><strong>创建内容</strong>: 使用 <code>lumos new</code> 命令创建文章/页面/作者</li>\n<li><strong>开发调试</strong>: 运行 <code>bun run dev</code> 启动开发服务器</li>\n<li><strong>实时预览</strong>: 文件变化自动重新生成，无需手动刷新</li>\n<li><strong>构建部署</strong>: 运行 <code>lumos build</code> 生成生产文件</li>\n</ol>\n<h3 id=\"toc-01a021\">技术栈</h3>\n<ul>\n<li><strong>运行时</strong>: Bun</li>\n<li><strong>语言</strong>: TypeScript</li>\n<li><strong>模板</strong>: JSX + React</li>\n<li><strong>样式</strong>: Tailwind CSS</li>\n<li><strong>解析</strong>: Marked + Gray Matter</li>\n<li><strong>高亮</strong>: Highlight.js</li>\n<li><strong>路由</strong>: Bun FileSystemRouter</li>\n</ul>\n<h2 id=\"toc-460a5f\">📊 数据结构</h2>\n<p>生成的 <code>data.json</code> 包含以下数据结构：</p>\n<pre><code class=\"hljs lang-dts\">interface <span class=\"hljs-title class_\">DatabaseSchema</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-comment\">// 核心实体</span>\n<span class=\"hljs-symbol\">  posts:</span> POST[] <span class=\"hljs-comment\">// 文章列表</span>\n<span class=\"hljs-symbol\">  pages:</span> PAGE[] <span class=\"hljs-comment\">// 页面列表</span>\n<span class=\"hljs-symbol\">  authors:</span> AUTHOR[] <span class=\"hljs-comment\">// 作者列表</span>\n<span class=\"hljs-symbol\">  categories:</span> CATEGORY[] <span class=\"hljs-comment\">// 分类列表</span>\n<span class=\"hljs-symbol\">  tags:</span> TAG[] <span class=\"hljs-comment\">// 标签列表</span>\n\n  <span class=\"hljs-comment\">// 关联关系</span>\n<span class=\"hljs-symbol\">  postCategories:</span> POST_CATEGORY[] <span class=\"hljs-comment\">// 文章-分类关联</span>\n<span class=\"hljs-symbol\">  postTags:</span> POST_TAG[] <span class=\"hljs-comment\">// 文章-标签关联</span>\n\n  <span class=\"hljs-comment\">// 配置数据</span>\n  [key: string]: any <span class=\"hljs-comment\">// 其他 JSON/YAML 配置</span>\n<span class=\"hljs-punctuation\">}</span>\n\n<span class=\"hljs-comment\">// 文章结构</span>\ninterface <span class=\"hljs-title class_\">POST</span> <span class=\"hljs-punctuation\">{</span>\n<span class=\"hljs-symbol\">  id:</span> string\n<span class=\"hljs-symbol\">  title:</span> string\n  alias?: string\n<span class=\"hljs-symbol\">  content:</span> string <span class=\"hljs-comment\">// HTML 内容</span>\n<span class=\"hljs-symbol\">  mdContent:</span> string <span class=\"hljs-comment\">// 原始 Markdown</span>\n<span class=\"hljs-symbol\">  excerpt:</span> string <span class=\"hljs-comment\">// 摘要</span>\n<span class=\"hljs-symbol\">  date:</span> string\n<span class=\"hljs-symbol\">  published:</span> boolean\n<span class=\"hljs-symbol\">  featured:</span> boolean\n  author?: string\n<span class=\"hljs-symbol\">  wordCount:</span> number <span class=\"hljs-comment\">// 字数</span>\n<span class=\"hljs-symbol\">  readingTime:</span> number <span class=\"hljs-comment\">// 阅读时间（分钟）</span>\n  toc?: any[] <span class=\"hljs-comment\">// 目录结构</span>\n<span class=\"hljs-symbol\">  url:</span> string <span class=\"hljs-comment\">// 友好 URL</span>\n<span class=\"hljs-symbol\">  createdAt:</span> string\n<span class=\"hljs-symbol\">  updatedAt:</span> string\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h3 id=\"toc-0b8cf4\">数据特性</h3>\n<ul>\n<li><strong>智能缓存</strong>: 基于 MD5 的文件缓存，只对变更文件重新解析</li>\n<li><strong>关联关系</strong>: 支持文章与分类、标签、作者的多对多关联</li>\n<li><strong>SEO 优化</strong>: 自动生成友好 URL，支持中文转拼音</li>\n<li><strong>内容增强</strong>: 自动生成 TOC、摘要、字数统计等</li>\n</ul>\n<h2 id=\"toc-0bb99f\">📝 更新日志</h2>\n<h3 id=\"toc-19b3fe\">v1.0.0 (2025-09-01)</h3>\n<ul>\n<li>✨ 初始版本发布</li>\n<li>⚡ 基于 Bun 运行时重写，性能大幅提升</li>\n<li>🎨 使用 JSX + React 替代 Nunjucks 模板</li>\n<li>🔧 完整的 CLI 工具链</li>\n<li>🌐 支持 FileSystemRouter 自动路由</li>\n<li>🎨 集成 Tailwind CSS 样式系统</li>\n<li>📊 智能缓存机制，提升构建性能</li>\n<li>🔍 SEO 优化，支持中文 URL 转拼音</li>\n<li>📦 静态资源管理和服务</li>\n<li>🔥 开发模式热更新支持</li>\n</ul>\n<h2 id=\"toc-542d07\">🚀 路线图</h2>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 支持多主题系统</li>\n<li><input disabled=\"\" type=\"checkbox\"> 图片优化和懒加载</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 全文搜索功能</li>\n<li><input disabled=\"\" type=\"checkbox\"> PWA 支持</li>\n<li><input disabled=\"\" type=\"checkbox\"> 多语言国际化</li>\n<li><input disabled=\"\" type=\"checkbox\"> 评论系统集成</li>\n<li><input disabled=\"\" type=\"checkbox\"> 性能监控和分析</li>\n<li><input disabled=\"\" type=\"checkbox\"> Docker 容器化支持</li>\n</ul>\n<h2 id=\"toc-a78d4a\">🤝 贡献</h2>\n<p>欢迎提交 Issues 和 Pull Requests！</p>\n<h3 id=\"toc-5e7286\">开发流程</h3>\n<ol>\n<li>Fork 项目</li>\n<li>创建特性分支: <code>git checkout -b feature/amazing-feature</code></li>\n<li>提交更改: <code>git commit -m &#39;Add amazing feature&#39;</code></li>\n<li>推送分支: <code>git push origin feature/amazing-feature</code></li>\n<li>提交 Pull Request</li>\n</ol>\n<h2 id=\"toc-c707be\">📄 许可证</h2>\n<p>MIT License</p>\n",
      "mdContent": "# Lumos - 基于 Bun 的静态博客生成器\n\n基于 Bun 运行时的高性能静态博客生成器，使用 JSX 组件和现代化技术栈。专为低配置服务器优化，提供轻量级博客解决方案。\n\n## 📚 相关文档\n\n想要深入了解 Lumos 的更多功能和使用方法？请查看以下文档：\n\n- [Lumos 项目介绍](./source/_pages/lumos-introduce.md) - 项目的详细介绍和架构说明\n- [Lumos CLI 使用指南](./source/_pages/lumos-cli-usage.md) - CLI 命令的详细使用方法\n- [Lumos 二次开发教程](./source/_pages/lumos-development.md) - 插件和主题开发的详细教程\n\n## ✨ 特性\n\n- ⚡ **极快启动**: 基于 Bun 运行时，冷启动时间 < 100ms\n- 📝 **Markdown 原生支持**: 完整的 Markdown 解析，支持代码高亮和 TOC 生成\n- 🎨 **现代化模板**: JSX + React 组件替代传统模板引擎\n- 🎯 **TypeScript 全覆盖**: 完整的类型安全和开发体验\n- 📁 **多格式配置**: 支持 JSON、YAML 配置文件\n- 🔥 **热更新开发**: 文件变化自动重新生成，支持监听模式\n- 🚀 **零配置启动**: 开箱即用，一键启动\n- 🎨 **Tailwind CSS**: 内置现代化 CSS 框架\n- 📊 **智能缓存**: 基于 MD5 的文件缓存机制，提升构建性能\n- 🌐 **静态资源管理**: 自动处理 CSS、JS、图片等静态资源\n- 🔧 **强大的 CLI**: 完整的命令行工具，支持创建、构建、服务等功能\n- 🔌 **插件系统**: 支持生命周期钩子的可扩展插件架构\n- 🎨 **主题系统**: 支持自定义主题和组件的灵活主题机制\n- 📦 **Bundler HTML 页面**: 支持使用 Bun HTML Bundling 创建高性能页面, 支持React 生态\n\n## 🚀 安装\n\n确保你已经安装了 Bun：\n\n```bash\n# 安装 Bun (如果尚未安装)\ncurl -fsSL https://bun.sh/install | bash\n\n# 克隆项目或进入项目目录\ncd lumos\n\n# 安装项目依赖\nbun install\n\n# 初始化项目（如果需要）\nbun run build\n```\n\n## 🛠️ 使用方法\n\n### CLI 命令\n\nLumos 提供了完整的命令行工具：\n\n```bash\n# 查看帮助信息\nlumos help\n\n# 查看版本\nlumos --version\n```\n\n### 1. 创建内容\n\n```bash\n# 创建新文章\nlumos new post \"我的第一篇文章\"\n\n# 创建新页面\nlumos new page \"关于我\"\n\n# 创建新作者\nlumos new author \"张三\"\n\n# 指定子目录\nlumos new post \"技术分享\" -p \"tech\"\n```\n\n### 2. 生成数据文件\n\n```bash\n# 解析所有 Markdown、JSON、YAML 文件，生成 data.json\nlumos gen\n# 或\nlumos generate\n```\n\n### 3. 启动开发服务器\n\n```bash\n# 启动服务器（默认端口 3060）\nlumos server\n\n# 指定端口\nlumos server -p 8080\n\n# 监听模式（文件变化自动重新生成）\nlumos server -w\n# 或\nlumos server --watch\n```\n\n### 4. 构建项目\n\n```bash\n# 完整构建（生成数据 + 处理资源）\nlumos build\n\n# 只处理资源文件\nlumos assets\n```\n\n### 5. 使用 PM2 部署（生产环境）\n\nLumos 支持使用 PM2 进行生产环境部署，确保应用的高可用性和自动重启。\n\n首先安装 PM2：\n\n```bash\n# 全局安装 PM2\nbun install -g pm2\n```\n\n使用 PM2 启动应用：\n\n```bash\n# 启动应用\nbun run pm2:start\n\n# 查看应用状态\nbun run pm2:status\n\n# 查看日志\nbun run pm2:logs\n\n# 重启应用\nbun run pm2:restart\n\n# 停止应用\nbun run pm2:stop\n```\n\nPM2 配置文件 `ecosystem.config.cjs` 已经包含在项目中，可以根据需要进行调整：\n\n- 应用名称: `lumos-blog`\n- 启动脚本: 使用 Bun 运行 `src/cli.ts server`\n- 端口: 默认 3000\n- 日志文件: 存储在 `logs` 目录中\n\n### 快速开始\n\n```bash\n# 一键启动开发环境\nbun run dev\n\n# 或者手动步骤\nlumos gen && lumos server -w\n```\n\n## 📁 项目结构\n\n```\nlumos/\n├── 📁 source/               # 内容源目录\n│   ├── 📁 _authors/         # 作者 Markdown 文件\n│   ├── 📁 _pages/          # 页面 Markdown 文件\n│   ├── 📁 _posts/          # 文章 Markdown 文件\n│   ├── 📁 _jsons/          # JSON 配置文件\n│   └── 📁 _ymls/           # YAML 配置文件\n├── 📁 src/                  # 源码目录\n│   ├── 📄 cli.ts           # CLI 命令行工具\n│   ├── 📁 components/      # React 组件\n│   ├── 📁 routes/          # 路由处理器\n│   ├── 📄 server.ts        # HTTP 服务器\n│   ├── 📄 generator.ts     # 数据生成器\n│   └── 📄 utils.ts         # 工具函数\n├── 📁 assets/               # 静态资源目录\n│   ├── 📁 styles/          # 样式文件\n│   ├── 📁 javascript/      # JavaScript 文件\n│   ├── 📁 images/          # 图片资源\n│   └── 📁 fonts/           # 字体文件\n├── 📁 bundler/              # Bun HTML Bundling 目录\n│   ├── 📁 html/            # HTML 源文件\n│   │   ├── 📄 index.html   # 首页 HTML 入口\n│   │   ├── 📄 app.tsx      # React 组件\n│   │   └── 📄 about.html   # 关于页面 HTML 入口\n│   └── 📁 dist/            # 构建输出目录\n├── 📁 templates/            # 模板文件\n├── 📁 plugins/              # 插件目录\n├── 📁 themes/               # 主题目录\n│   └── 📁 default/         # 默认主题\n├── 📄 lumos.config.json     # 插件和主题配置\n├── 📄 package.json          # 项目配置\n├── 📄 tsconfig.json         # TypeScript 配置\n├── 📄 tailwind.config.js    # Tailwind CSS 配置\n├── 📄 lumos                 # CLI 可执行文件\n└── 📄 data.json             # 生成的数据文件\n```\n\n## 🧩 插件系统\n\nLumos 提供了强大的插件系统，允许开发者通过插件扩展博客的功能。插件系统基于生命周期钩子，可以在博客生成和运行的不同阶段执行自定义逻辑。\n\n### 插件架构\n\n插件系统基于以下核心概念：\n\n1. **生命周期钩子**: 插件可以在特定的生命周期阶段执行代码\n2. **配置管理**: 插件可以通过配置文件进行配置\n3. **易于扩展**: 插件可以轻松地添加新功能\n\n### 生命周期钩子\n\n插件支持以下生命周期钩子：\n\n- `onGenerateStart(generator)`: 数据生成开始前调用\n- `onGenerateEnd(data)`: 数据生成结束后调用\n- `onParseFile(filePath, content, type)`: 解析文件时调用\n- `onRender(html, data)`: 渲染页面时调用\n- `onServerStart(server)`: 服务器启动时调用\n\n### 插件配置\n\n插件配置在项目根目录的 `lumos.config.json` 文件中：\n\n```json\n{\n  \"plugins\": {\n    \"example-plugin\": {\n      \"enabled\": true,\n      \"options\": {\n        \"customOption\": \"value\"\n      }\n    }\n  }\n}\n```\n\n### 创建插件\n\n插件是一个导出默认对象的 TypeScript 文件，放置在 `plugins/` 目录中：\n\n```typescript\n// plugins/example-plugin.ts\nimport { Plugin } from '../src/types.ts'\n\nconst examplePlugin: Plugin = {\n  name: 'example-plugin',\n  version: '1.0.0',\n  description: '示例插件',\n\n  async onGenerateStart(generator: any) {\n    console.log('生成开始')\n  },\n\n  async onGenerateEnd(data: any) {\n    console.log('生成结束')\n    return data\n  },\n\n  async onParseFile(filePath: string, content: string, type: 'post' | 'page' | 'author') {\n    console.log(`解析文件: ${filePath}`)\n    return content\n  },\n\n  async onRender(html: string, data: any) {\n    console.log('渲染页面')\n    return html\n  },\n\n  async onServerStart(server: any) {\n    console.log('服务器启动')\n  }\n}\n\nexport default examplePlugin\n```\n\n## 🎨 主题系统\n\nLumos 支持灵活的主题系统，允许开发者创建和使用自定义主题来改变博客的外观和功能。\n\n### 主题结构\n\n主题文件位于 `themes/` 目录中，每个主题都有自己的目录：\n\n```\nthemes/\n└── default/              # 主题目录\n    ├── assets/           # 主题静态资源\n    │   ├── styles/       # 样式文件\n    │   └── images/       # 图片资源\n    ├── components/       # 主题组件\n    │   └── Layout.tsx    # 布局组件\n    └── routes/           # 主题路由\n        ├── index.tsx     # 首页\n        ├── posts.tsx     # 文章列表页\n        └── post/[url].tsx # 文章详情页\n```\n\n### 主题配置\n\n主题配置在 `lumos.config.json` 文件中：\n\n```json\n{\n  \"theme\": \"default\"\n}\n```\n\n### 创建主题\n\n创建新主题只需在 `themes/` 目录中创建新文件夹，并按照主题结构添加文件。\n\n#### 1. 创建主题目录结构\n\n```bash\nmkdir -p themes/my-theme/{assets,components,routes}\n```\n\n#### 2. 创建布局组件\n\n```tsx\n// themes/my-theme/components/Layout.tsx\nimport * as React from 'react'\n\ninterface LayoutProps {\n  title: string\n  children: React.ReactNode\n}\n\nexport const Layout: React.FC<LayoutProps> = ({ title, children }) => {\n  return (\n    <html>\n      <head>\n        <title>{title}</title>\n        <link rel=\"stylesheet\" href=\"/assets/styles/theme.css\" />\n      </head>\n      <body>\n        <header>\n          <h1>我的自定义主题</h1>\n        </header>\n        <main>{children}</main>\n        <footer>\n          <p>&copy; 2024 我的博客</p>\n        </footer>\n      </body>\n    </html>\n  )\n}\n```\n\n#### 3. 创建路由页面\n\n```tsx\n// themes/my-theme/routes/index.tsx\nimport * as React from 'react'\nimport { renderToString } from 'react-dom/server'\nimport { Layout } from '../components/Layout.tsx'\n\nconst HomePage: React.FC = () => (\n  <div>\n    <h2>欢迎来到我的博客</h2>\n    <p>这是使用自定义主题的首页</p>\n  </div>\n)\n\nexport default async function handler(_request: Request): Promise<Response> {\n  const html = '<!DOCTYPE html>' + renderToString(React.createElement(HomePage))\n  return new Response(html, {\n    headers: { 'Content-Type': 'text/html; charset=utf-8' }\n  })\n}\n```\n\n#### 4. 配置主题\n\n在 `lumos.config.json` 中切换到新主题：\n\n```json\n{\n  \"theme\": \"my-theme\"\n}\n```\n\n### 主题继承\n\n主题支持继承机制，可以通过扩展默认主题来创建自定义主题，只需覆盖需要修改的部分。\n\n## 📄 Markdown 文件格式\n\n### 文章 (\\_posts/\\*.md)\n\n```markdown\n---\ntitle: '文章标题'\ndate: '2024-01-01'\nalias: 'my-first-post' # 可选，用于 URL\ncategories: ['技术', 'Web开发']\ntags: ['Bun', 'JavaScript', '博客']\nexcerpt: '文章摘要'\nauthor: 'author-alias'\npublished: true\nfeatured: false # 是否置顶\n---\n\n# 文章内容\n\n这里是文章的 Markdown 内容...\n\n## 支持的功能\n\n- 代码高亮\n- TOC 目录生成\n- 摘要自动提取\n- 字数统计\n- 中文 URL 友好化\n```\n\n### 页面 (\\_pages/\\*.md)\n\n```markdown\n---\ntitle: '关于页面'\nalias: 'about'\npublished: true\nnavOrder: 1 # 导航栏排序\n---\n\n# 关于我们\n\n这里是页面内容...\n```\n\n### 作者 (\\_authors/\\*.md)\n\n```markdown\n---\ntitle: '作者名称'\nalias: 'author-alias'\nbio: '作者简介'\navatar: '/assets/images/avatar.jpg'\nsocial:\n  github: 'https://github.com/username'\n  twitter: 'https://twitter.com/username'\n  email: 'author@example.com'\n---\n\n# 作者详情\n\n作者的详细介绍...\n```\n\n## ⚙️ 配置文件\n\n### JSON 配置 (\\_jsons/\\*.json)\n\n```json\n{\n  \"siteName\": \"我的博客\",\n  \"siteUrl\": \"https://example.com\",\n  \"description\": \"这是一个基于 Lumos 的博客\",\n  \"author\": \"默认作者\",\n  \"keywords\": [\"Lumos\", \"博客\", \"Bun\"],\n  \"social\": {\n    \"github\": \"https://github.com/username\",\n    \"twitter\": \"https://twitter.com/username\"\n  },\n  \"navigation\": [\n    { \"name\": \"首页\", \"url\": \"/\" },\n    { \"name\": \"文章\", \"url\": \"/posts\" },\n    { \"name\": \"关于\", \"url\": \"/page/about\" }\n  ]\n}\n```\n\n### YAML 配置 (\\_ymls/\\*.yml)\n\n```yaml\n# 主题配置\ntheme:\n  name: default\n  colors:\n    primary: '#007bff'\n    secondary: '#6c757d'\n  fonts:\n    body: 'Inter, sans-serif'\n    heading: 'Inter, sans-serif'\n\n# SEO 配置\nseo:\n  titleTemplate: '%s | 我的博客'\n  defaultDescription: '一个由 Lumos 驱动的静态博客'\n  openGraph:\n    type: website\n    locale: zh_CN\n```\n\n## 🌐 API 接口\n\n服务器提供以下 RESTful API：\n\n### 文章 API\n\n- `GET /api/posts` - 获取所有文章（支持分页、筛选）\n- `GET /api/posts/:alias` - 获取指定文章\n- `GET /api/posts/category/:name` - 获取指定分类下的文章\n- `GET /api/posts/tag/:name` - 获取指定标签下的文章\n\n### 页面 API\n\n- `GET /api/pages` - 获取所有页面\n- `GET /api/pages/:alias` - 获取指定页面\n\n### 分类和标签 API\n\n- `GET /api/categories` - 获取所有分类\n- `GET /api/tags` - 获取所有标签\n\n### 作者 API\n\n- `GET /api/authors` - 获取所有作者\n- `GET /api/authors/:alias` - 获取指定作者\n\n### 统计 API\n\n- `GET /api/stats` - 获取站点统计数据\n\n### 查询参数\n\n```\nGET /api/posts?page=1&limit=10&category=技术&tag=JavaScript&author=author-alias\n```\n\n## 🗺️ 页面路由\n\n### 前台页面\n\n#### 核心页面\n\n- `/` - 首页（最新文章列表）\n- `/posts` - 文章列表页（分页显示）\n- `/archives` - 文章归档页（按年份分组）\n- `/about` - 关于页面\n- `/links` - 友情链接页面\n\n#### 内容页面\n\n- `/post/:alias` - 文章详情页\n- `/archives/:url` - 文章归档详情页\n- `/page/:alias` - 自定义页面详情\n- `/pages/:url` - 页面详情（支持 URL 路径）\n\n#### 分类和标签\n\n- `/category/:name` - 分类页面（显示该分类下的文章）\n- `/categories/:alias` - 分类页面（支持别名）\n- `/tag/:name` - 标签页面（显示该标签下的文章）\n- `/tags/:value` - 标签页面（支持值匹配）\n\n#### 特殊页面\n\n- `/404` - 404 错误页面\n- `/error` - 通用错误页面\n\n#### 数据接口\n\n- `/rss.xml` - RSS 订阅源\n- `/sitemap.xml` - 网站地图\n- `/api/*` - RESTful API 接口\n\n### 特性\n\n- 基于 Bun FileSystemRouter 的自动路由\n- 支持动态路由参数和别名系统\n- SSR 服务端渲染，SEO 友好\n- SEO 友好的 URL 结构, 中文 URL 自动转拼音\n- 智能缓存和性能优化\n- 响应式设计，移动端友好\n\n## 📦 Bundler HTML 页面 (高优先级)\n\nLumos 支持使用 Bun 的 HTML bundling 功能创建页面，这种方式的优先级比主题中的 route 更高。Bundler HTML 页面位于 `bundler/html/` 目录中，构建后会生成到 `bundler/dist/` 目录。\n\n### 工作原理\n\n1. 在 `bundler/html/` 目录中创建 HTML 文件和相关的 TypeScript/JSX 组件\n2. 运行 `bun run build:html` 命令构建这些页面\n3. 构建后的页面会被放置在 `bundler/dist/` 目录中\n4. 服务器会优先检查请求的路径是否在 `bundler/dist/` 目录中存在对应文件\n5. 如果存在，则直接返回该文件，不会经过主题路由处理\n\n### 使用场景\n\n- 创建高性能的静态页面\n- 构建独立的 landing pages\n- 实现特殊的前端交互效果\n- 创建演示页面或测试页面\n\n### 示例\n\n```\n<!-- bundler/html/index.html -->\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Lumos 主题测试页面</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <!-- 将 app.tsx 作为模块引入 -->\n    <script src=\"./app.tsx\" type=\"module\"></script>\n  </body>\n</html>\n```\n\n```\n// bundler/html/app.tsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Hello from Bun HTML Bundling!</h1>\n    </div>\n  );\n}\n\n// 渲染应用\ndocument.addEventListener('DOMContentLoaded', () => {\n  const rootElement = document.getElementById('root');\n  if (rootElement) {\n    const root = ReactDOM.createRoot(rootElement);\n    root.render(React.createElement(App));\n  }\n});\n```\n\n## 🛠️ 开发\n\n### 开发命令\n\n```\n# 开发模式（热更新）\nbun run dev\n\n# 构建项目\nbun run build\n\n# 代码检查\nbun run lint\n\n# 修复代码风格\nbun run fix\n\n# 构建 CSS\nbun run build:css\n\n# TypeScript 编译\nbun run tsc\n```\n\n### 工作流\n\n1. **创建内容**: 使用 `lumos new` 命令创建文章/页面/作者\n2. **开发调试**: 运行 `bun run dev` 启动开发服务器\n3. **实时预览**: 文件变化自动重新生成，无需手动刷新\n4. **构建部署**: 运行 `lumos build` 生成生产文件\n\n### 技术栈\n\n- **运行时**: Bun\n- **语言**: TypeScript\n- **模板**: JSX + React\n- **样式**: Tailwind CSS\n- **解析**: Marked + Gray Matter\n- **高亮**: Highlight.js\n- **路由**: Bun FileSystemRouter\n\n## 📊 数据结构\n\n生成的 `data.json` 包含以下数据结构：\n\n```\ninterface DatabaseSchema {\n  // 核心实体\n  posts: POST[] // 文章列表\n  pages: PAGE[] // 页面列表\n  authors: AUTHOR[] // 作者列表\n  categories: CATEGORY[] // 分类列表\n  tags: TAG[] // 标签列表\n\n  // 关联关系\n  postCategories: POST_CATEGORY[] // 文章-分类关联\n  postTags: POST_TAG[] // 文章-标签关联\n\n  // 配置数据\n  [key: string]: any // 其他 JSON/YAML 配置\n}\n\n// 文章结构\ninterface POST {\n  id: string\n  title: string\n  alias?: string\n  content: string // HTML 内容\n  mdContent: string // 原始 Markdown\n  excerpt: string // 摘要\n  date: string\n  published: boolean\n  featured: boolean\n  author?: string\n  wordCount: number // 字数\n  readingTime: number // 阅读时间（分钟）\n  toc?: any[] // 目录结构\n  url: string // 友好 URL\n  createdAt: string\n  updatedAt: string\n}\n```\n\n### 数据特性\n\n- **智能缓存**: 基于 MD5 的文件缓存，只对变更文件重新解析\n- **关联关系**: 支持文章与分类、标签、作者的多对多关联\n- **SEO 优化**: 自动生成友好 URL，支持中文转拼音\n- **内容增强**: 自动生成 TOC、摘要、字数统计等\n\n## 📝 更新日志\n\n### v1.0.0 (2025-09-01)\n\n- ✨ 初始版本发布\n- ⚡ 基于 Bun 运行时重写，性能大幅提升\n- 🎨 使用 JSX + React 替代 Nunjucks 模板\n- 🔧 完整的 CLI 工具链\n- 🌐 支持 FileSystemRouter 自动路由\n- 🎨 集成 Tailwind CSS 样式系统\n- 📊 智能缓存机制，提升构建性能\n- 🔍 SEO 优化，支持中文 URL 转拼音\n- 📦 静态资源管理和服务\n- 🔥 开发模式热更新支持\n\n## 🚀 路线图\n\n- [x] 支持多主题系统\n- [ ] 图片优化和懒加载\n- [x] 全文搜索功能\n- [ ] PWA 支持\n- [ ] 多语言国际化\n- [ ] 评论系统集成\n- [ ] 性能监控和分析\n- [ ] Docker 容器化支持\n\n## 🤝 贡献\n\n欢迎提交 Issues 和 Pull Requests！\n\n### 开发流程\n\n1. Fork 项目\n2. 创建特性分支: `git checkout -b feature/amazing-feature`\n3. 提交更改: `git commit -m 'Add amazing feature'`\n4. 推送分支: `git push origin feature/amazing-feature`\n5. 提交 Pull Request\n\n## 📄 许可证\n\nMIT License\n",
      "toc": "<ul>\n<li><a href=\"#toc-678420\">Lumos - 基于 Bun 的静态博客生成器</a><ul>\n<li><a href=\"#toc-6df5e0\">📚 相关文档</a></li>\n<li><a href=\"#toc-7947e4\">✨ 特性</a></li>\n<li><a href=\"#toc-f25f2e\">🚀 安装</a></li>\n<li><a href=\"#toc-b748d6\">🛠️ 使用方法</a><ul>\n<li><a href=\"#toc-128d88\">CLI 命令</a></li>\n<li><a href=\"#toc-56b844\">1. 创建内容</a></li>\n<li><a href=\"#toc-3625cd\">2. 生成数据文件</a></li>\n<li><a href=\"#toc-f841c0\">3. 启动开发服务器</a></li>\n<li><a href=\"#toc-0e5c88\">4. 构建项目</a></li>\n<li><a href=\"#toc-62940c\">5. 使用 PM2 部署（生产环境）</a></li>\n<li><a href=\"#toc-c182e7\">快速开始</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-4be1c9\">📁 项目结构</a></li>\n<li><a href=\"#toc-04ceb4\">🧩 插件系统</a><ul>\n<li><a href=\"#toc-590a64\">插件架构</a></li>\n<li><a href=\"#toc-484bc6\">生命周期钩子</a></li>\n<li><a href=\"#toc-4e530c\">插件配置</a></li>\n<li><a href=\"#toc-f42010\">创建插件</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-453dec\">🎨 主题系统</a><ul>\n<li><a href=\"#toc-7c62d4\">主题结构</a></li>\n<li><a href=\"#toc-5af700\">主题配置</a></li>\n<li><a href=\"#toc-24522c\">创建主题</a><ul>\n<li><a href=\"#toc-4c87fa\">1. 创建主题目录结构</a></li>\n<li><a href=\"#toc-a3e09a\">2. 创建布局组件</a></li>\n<li><a href=\"#toc-7a21a8\">3. 创建路由页面</a></li>\n<li><a href=\"#toc-0e7d36\">4. 配置主题</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-732485\">主题继承</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-387bbf\">📄 Markdown 文件格式</a><ul>\n<li><a href=\"#toc-8e86fe\">文章 (_posts/*.md)</a></li>\n<li><a href=\"#toc-c65ead\">页面 (_pages/*.md)</a></li>\n<li><a href=\"#toc-42b4fd\">作者 (_authors/*.md)</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-f5cbb9\">⚙️ 配置文件</a><ul>\n<li><a href=\"#toc-014838\">JSON 配置 (_jsons/*.json)</a></li>\n<li><a href=\"#toc-dc5fe1\">YAML 配置 (_ymls/*.yml)</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-d87461\">🌐 API 接口</a><ul>\n<li><a href=\"#toc-f6f0d5\">文章 API</a></li>\n<li><a href=\"#toc-b56a75\">页面 API</a></li>\n<li><a href=\"#toc-a484b8\">分类和标签 API</a></li>\n<li><a href=\"#toc-29ba66\">作者 API</a></li>\n<li><a href=\"#toc-f8be43\">统计 API</a></li>\n<li><a href=\"#toc-9a1898\">查询参数</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-a0cf11\">🗺️ 页面路由</a><ul>\n<li><a href=\"#toc-b608bc\">前台页面</a><ul>\n<li><a href=\"#toc-73513b\">核心页面</a></li>\n<li><a href=\"#toc-977f10\">内容页面</a></li>\n<li><a href=\"#toc-81aeae\">分类和标签</a></li>\n<li><a href=\"#toc-2e0bd9\">特殊页面</a></li>\n<li><a href=\"#toc-31f8a7\">数据接口</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-c666ad\">特性</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-271987\">📦 Bundler HTML 页面 (高优先级)</a><ul>\n<li><a href=\"#toc-b3fbd1\">工作原理</a></li>\n<li><a href=\"#toc-7efcb0\">使用场景</a></li>\n<li><a href=\"#toc-1a63ac\">示例</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-f3b9b1\">🛠️ 开发</a><ul>\n<li><a href=\"#toc-1cd084\">开发命令</a></li>\n<li><a href=\"#toc-228526\">工作流</a></li>\n<li><a href=\"#toc-01a021\">技术栈</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-460a5f\">📊 数据结构</a><ul>\n<li><a href=\"#toc-0b8cf4\">数据特性</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-0bb99f\">📝 更新日志</a><ul>\n<li><a href=\"#toc-19b3fe\">v1.0.0 (2025-09-01)</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-542d07\">🚀 路线图</a></li>\n<li><a href=\"#toc-a78d4a\">🤝 贡献</a><ul>\n<li><a href=\"#toc-5e7286\">开发流程</a></li>\n</ul>\n</li>\n<li><a href=\"#toc-c707be\">📄 许可证</a></li>\n</ul>\n</li>\n</ul>\n",
      "created_timestamp": 1757169501886,
      "updated_timestamp": 1757169501886,
      "url": "readme",
      "symbolsCount": 5600,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ]
    }
  ],
  "authors": [
    {
      "id": "1efcda06-45e2-6e50-9e2c-b51ec4837066",
      "title": "uuice",
      "alias": "uuice",
      "cover": null,
      "created_time": "2025-01-08T17:10:23.000Z",
      "date": "2025-01-08T17:10:23.000Z",
      "updated_time": "2025-01-08T17:10:23.000Z",
      "updated": "2025-01-08T17:10:23.000Z",
      "categories": null,
      "tags": null,
      "excerpt": null,
      "published": true,
      "content": "",
      "mdContent": "",
      "toc": "",
      "created_timestamp": 1736356223000,
      "updated_timestamp": 1736356223000,
      "url": "uuice",
      "symbolsCount": 0,
      "authorIds": [
        "b2c46a46-f8d7-5a0c-8e28-09bf3b946cae"
      ],
      "isDefault": false
    }
  ],
  "categories": [
    {
      "id": "1e432a95-9d87-506d-9d69-29f572bcda29",
      "title": "linux",
      "description": "Category: linux",
      "url": "linux"
    },
    {
      "id": "cb0ef58a-2349-5585-a770-5a56ff01172e",
      "title": "nodejs",
      "description": "Category: nodejs",
      "url": "nodejs"
    },
    {
      "id": "efdf3ce5-1571-50d5-a4a3-52d6865d8efe",
      "title": "css",
      "description": "Category: css",
      "url": "css"
    },
    {
      "id": "31bf0413-abf9-5a2c-801c-e6da2b0cbda4",
      "title": "javascript",
      "description": "Category: javascript",
      "url": "javascript"
    },
    {
      "id": "87c0a1b1-3341-5a5e-a503-a693a57e9e6c",
      "title": "angular",
      "description": "Category: angular",
      "url": "angular"
    },
    {
      "id": "f34a5161-9ece-596b-9ee6-cdc51d6fd112",
      "title": "notes",
      "description": "Category: notes",
      "url": "notes"
    },
    {
      "id": "bc64f47c-2587-56c8-9bf6-a74272c64e47",
      "title": "html",
      "description": "Category: html",
      "url": "html"
    },
    {
      "id": "d89b25df-4af3-58d5-9be1-9494ab6f4c6e",
      "title": "canvas",
      "description": "Category: canvas",
      "url": "canvas"
    },
    {
      "id": "c581f028-58b0-582c-b82e-7d98fe65818c",
      "title": "http",
      "description": "Category: http",
      "url": "http"
    }
  ],
  "tags": [
    {
      "id": "f4da7d3e-4e37-56db-8f2a-638c4ff1528c",
      "title": "pnpm",
      "description": "Tag: pnpm",
      "url": "pnpm"
    },
    {
      "id": "a0f08da6-205f-5a5a-a661-801ccecd30eb",
      "title": "Rxjs",
      "description": "Tag: Rxjs",
      "url": "rxjs"
    },
    {
      "id": "05667c6a-3d6e-5faa-a8e5-bef445acd918",
      "title": "Angular",
      "description": "Tag: Angular",
      "url": "angular"
    },
    {
      "id": "e4428283-c10b-570e-ab7f-0d5c789ff1a6",
      "title": "angular",
      "description": "Tag: angular",
      "url": "angular"
    },
    {
      "id": "c9c512c9-3e0a-59e9-9f25-87a7f34c15ad",
      "title": "directive",
      "description": "Tag: directive",
      "url": "directive"
    }
  ],
  "postCategories": [
    {
      "id": "4518e8b1-515a-5763-be67-9f8f7a14a8d4",
      "postId": "1ef3b5ae-4c0c-69f0-aa92-08c2005ee788",
      "categoryId": "1e432a95-9d87-506d-9d69-29f572bcda29"
    },
    {
      "id": "5c859a30-5b71-503b-9b96-89955a6e2c77",
      "postId": "1ef3b5ae-4c0c-69f0-aa92-08c2005ee788",
      "categoryId": "cb0ef58a-2349-5585-a770-5a56ff01172e"
    },
    {
      "id": "1c7c20fe-c560-5aba-a8ea-37e5e7782473",
      "postId": "1ef3b5db-fc15-6310-b8d7-128489aa72d6",
      "categoryId": "cb0ef58a-2349-5585-a770-5a56ff01172e"
    },
    {
      "id": "5cfcb8be-53c5-5766-a549-53540b7a671d",
      "postId": "1ef3b596-893a-6790-a593-1d07427d06eb",
      "categoryId": "cb0ef58a-2349-5585-a770-5a56ff01172e"
    },
    {
      "id": "3895fb27-0803-546a-868c-7a5d26e60c55",
      "postId": "1ef3b5dd-e4d9-6b40-b309-a07bac6c751a",
      "categoryId": "cb0ef58a-2349-5585-a770-5a56ff01172e"
    },
    {
      "id": "217db59b-0419-58ba-93b5-5ce29f0c6dee",
      "postId": "1ef3b5b5-5f66-6ad0-9846-ac1b4e440327",
      "categoryId": "cb0ef58a-2349-5585-a770-5a56ff01172e"
    },
    {
      "id": "af7f94e5-7a2e-54d9-8f6b-1a213a51aaa4",
      "postId": "1ef3b5b7-e0bc-6ce0-ac15-c509070dad5f",
      "categoryId": "efdf3ce5-1571-50d5-a4a3-52d6865d8efe"
    },
    {
      "id": "2ca72853-6af2-55ec-b76d-801227921672",
      "postId": "1ef3b5d9-1b23-6f70-9c72-cad688b0117d",
      "categoryId": "31bf0413-abf9-5a2c-801c-e6da2b0cbda4"
    },
    {
      "id": "eb00a719-a915-515d-b4f2-f3db22c6f23a",
      "postId": "1ef3b5c3-e152-6d60-94dd-7da5eda79cf5",
      "categoryId": "cb0ef58a-2349-5585-a770-5a56ff01172e"
    },
    {
      "id": "73ff281f-c1ef-564e-b0f1-eb2c912e8235",
      "postId": "1ef3b5ed-f869-6b00-8f14-0e29fe3fa024",
      "categoryId": "31bf0413-abf9-5a2c-801c-e6da2b0cbda4"
    },
    {
      "id": "c579d8fa-6c81-5a7f-bdf5-c70e4404f017",
      "postId": "1ef3b5a2-b387-6370-adf2-057eb14ae353",
      "categoryId": "31bf0413-abf9-5a2c-801c-e6da2b0cbda4"
    },
    {
      "id": "06ba9f73-893f-5547-b8a1-a98482bc9e7b",
      "postId": "1ef3b5bb-0805-6d80-9432-553b597926f2",
      "categoryId": "31bf0413-abf9-5a2c-801c-e6da2b0cbda4"
    },
    {
      "id": "36d76924-299e-5797-bbea-2c4f98d9b085",
      "postId": "1ef3b59b-0a4e-6760-9d78-69ba27cbd20e",
      "categoryId": "31bf0413-abf9-5a2c-801c-e6da2b0cbda4"
    },
    {
      "id": "408fd7b8-b244-57f3-afee-89ab7ca269b8",
      "postId": "1ef3b5a7-26a0-61a0-aeca-5e11b525f15e",
      "categoryId": "87c0a1b1-3341-5a5e-a503-a693a57e9e6c"
    },
    {
      "id": "caa0d806-a849-50bf-bb8a-fc79102c552c",
      "postId": "1ef3b5c6-dba2-6340-9f1a-fbf62a73561b",
      "categoryId": "f34a5161-9ece-596b-9ee6-cdc51d6fd112"
    },
    {
      "id": "05800d99-ecc3-5e63-a82b-0db7d427d3ab",
      "postId": "1ef3b5c6-dba2-6340-9f1a-fbf62a73561b",
      "categoryId": "bc64f47c-2587-56c8-9bf6-a74272c64e47"
    },
    {
      "id": "87ac7442-cc95-51f7-9188-16abc6c7a9d3",
      "postId": "1ef3b5d3-d10c-6040-8228-d52499675442",
      "categoryId": "bc64f47c-2587-56c8-9bf6-a74272c64e47"
    },
    {
      "id": "e9359c8e-b129-51e2-9bb9-dab0d893af8c",
      "postId": "1ef3b5cb-5325-6760-803d-418bab754735",
      "categoryId": "d89b25df-4af3-58d5-9be1-9494ab6f4c6e"
    },
    {
      "id": "0ace4226-8c66-59b1-90b2-d7428a385362",
      "postId": "1ef3b5b1-f8de-63b0-8838-ac54a1c91482",
      "categoryId": "d89b25df-4af3-58d5-9be1-9494ab6f4c6e"
    },
    {
      "id": "3860c854-6541-5c50-aebc-b64613eb124c",
      "postId": "1ef3b5e7-6a16-6cf0-bda8-629a71b2a5d5",
      "categoryId": "d89b25df-4af3-58d5-9be1-9494ab6f4c6e"
    },
    {
      "id": "e3b40b15-92a3-54c3-ba5d-0e95e1304aa3",
      "postId": "1ef3b5cf-0201-6880-9695-c8862c624a56",
      "categoryId": "d89b25df-4af3-58d5-9be1-9494ab6f4c6e"
    },
    {
      "id": "658bd544-b28a-5b69-90f5-488ad7bd9a9f",
      "postId": "1ef3b5e1-c89c-6410-866c-c03a58533afa",
      "categoryId": "d89b25df-4af3-58d5-9be1-9494ab6f4c6e"
    },
    {
      "id": "40e04a28-5a82-5feb-b4db-5f05954b3d74",
      "postId": "1ef3b5e4-51b0-6ce0-b727-e8921436fadf",
      "categoryId": "f34a5161-9ece-596b-9ee6-cdc51d6fd112"
    },
    {
      "id": "f3608b42-582d-594c-ad51-c51b51f6cc7e",
      "postId": "1ef3b5be-561c-6f70-a98e-1d4fbfc5d1c2",
      "categoryId": "f34a5161-9ece-596b-9ee6-cdc51d6fd112"
    },
    {
      "id": "846c7c87-b427-5213-806c-5357882fab7b",
      "postId": "1ef3b5be-561c-6f70-a98e-1d4fbfc5d1c2",
      "categoryId": "c581f028-58b0-582c-b82e-7d98fe65818c"
    }
  ],
  "postTags": [
    {
      "id": "61e4ee9c-0928-58dc-acd8-e68054650494",
      "postId": "1ef3b596-893a-6790-a593-1d07427d06eb",
      "tagId": "f4da7d3e-4e37-56db-8f2a-638c4ff1528c"
    },
    {
      "id": "c17f27ef-2a0a-55f1-aa5c-7a90416844e0",
      "postId": "1ef3b59b-0a4e-6760-9d78-69ba27cbd20e",
      "tagId": "a0f08da6-205f-5a5a-a661-801ccecd30eb"
    },
    {
      "id": "61a9a8bb-9319-5ccf-bb53-50941ed4e9ce",
      "postId": "1ef3b59b-0a4e-6760-9d78-69ba27cbd20e",
      "tagId": "05667c6a-3d6e-5faa-a8e5-bef445acd918"
    },
    {
      "id": "8dfc045d-6cde-5065-991a-a3a8bc6c0b9b",
      "postId": "1ef3b5a7-26a0-61a0-aeca-5e11b525f15e",
      "tagId": "e4428283-c10b-570e-ab7f-0d5c789ff1a6"
    },
    {
      "id": "53d5da08-6f33-5c30-b32d-37d0faa21316",
      "postId": "1ef3b5a7-26a0-61a0-aeca-5e11b525f15e",
      "tagId": "c9c512c9-3e0a-59e9-9f25-87a7f34c15ad"
    }
  ],
  "settingJsonConfig": {
    "storageSetting": {
      "storageType": "local",
      "accessKey": "",
      "secretKey": "",
      "bucket": "",
      "region": "",
      "domain": "",
      "uploadPath": "uploads"
    },
    "recordSettings": {
      "icpNumber": "浙ICP备13002567号-4",
      "icpLink": "https://beian.miit.gov.cn/",
      "policeNumber": "",
      "policeLink": "",
      "recordText": "",
      "showRecord": true
    },
    "siteSetting": {
      "baseUrl": "http://localhost:3060",
      "siteName": "轻盈的鱼",
      "siteDescription": "专注于前端开发的程序员，分享Vue、Angular、Node.js等技术栈的学习笔记和解决方案。记录工作中遇到的问题和解决方案，致力于构建现代化的响应式Web应用。",
      "siteKeywords": "前端开发, Vue, Angular, Node.js, JavaScript, 学习笔记, 技术博客, 前端技术栈, 响应式设计, Web开发, 程序员, 前端工程师",
      "siteLogo": "",
      "siteFavicon": "",
      "siteFooter": "",
      "allowRegistration": true,
      "allowComment": true,
      "commentAudit": true,
      "defaultLanguage": "zh-CN",
      "timezone": "Asia/Shanghai",
      "dateFormat": "YYYY-MM-DD",
      "timeFormat": "HH:mm:ss"
    }
  },
  "menuJsonConfig": [
    {
      "title": "首页",
      "icon": "",
      "url": "/",
      "target": "_self"
    },
    {
      "title": "归档",
      "icon": "",
      "url": "/archives",
      "target": "_self"
    },
    {
      "title": "友情链接",
      "icon": "",
      "url": "/links",
      "target": "_self"
    },
    {
      "title": "关于博主",
      "icon": "",
      "url": "/about",
      "target": "_self"
    },
    {
      "title": "uuice doc",
      "icon": "",
      "url": "/uuice-doc",
      "target": "_target"
    }
  ],
  "linkJsonConfig": [
    {
      "title": "Fayfox",
      "icon": "",
      "url": "https://www.fayfox.com/",
      "type": "码畜"
    }
  ],
  "configYmlConfig": {
    "title": "Fayfox",
    "icon": "",
    "url": "https://www.fayfox.com/",
    "type": "码畜"
  },
  "linkYmlConfig": [
    {
      "title": "Fayfox",
      "icon": "",
      "url": "https://www.fayfox.com/",
      "type": "码畜"
    }
  ]
}